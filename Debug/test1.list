
C:\Users\tomas\Documents\Atollic7Workspace\projekt\test1\Debug\test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027d8  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000066c  08002914  08002914  00012914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08002f80  08002f80  00012f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08002f88  08002f88  00012f88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08002f8c  08002f8c  00012f8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  08002f90  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000050  20000008  08002f94  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  20000058  08002f94  00020058  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   000080e9  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000173c  00000000  00000000  00028116  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ac0  00000000  00000000  00029858  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009b8  00000000  00000000  0002a318  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000038b7  00000000  00000000  0002acd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000314f  00000000  00000000  0002e587  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000316d6  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002da4  00000000  00000000  00031754  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000344f8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	080028fc 	.word	0x080028fc

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	080028fc 	.word	0x080028fc

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b982 	b.w	80004a8 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	460c      	mov	r4, r1
 80001c4:	4605      	mov	r5, r0
 80001c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14f      	bne.n	800026c <__udivmoddi4+0xb0>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d96b      	bls.n	80002aa <__udivmoddi4+0xee>
 80001d2:	fab2 fe82 	clz	lr, r2
 80001d6:	f1be 0f00 	cmp.w	lr, #0
 80001da:	d00b      	beq.n	80001f4 <__udivmoddi4+0x38>
 80001dc:	f1ce 0520 	rsb	r5, lr, #32
 80001e0:	fa20 f505 	lsr.w	r5, r0, r5
 80001e4:	fa01 f30e 	lsl.w	r3, r1, lr
 80001e8:	ea45 0c03 	orr.w	ip, r5, r3
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	fa00 f50e 	lsl.w	r5, r0, lr
 80001f4:	0c39      	lsrs	r1, r7, #16
 80001f6:	fbbc f0f1 	udiv	r0, ip, r1
 80001fa:	b2ba      	uxth	r2, r7
 80001fc:	fb01 c310 	mls	r3, r1, r0, ip
 8000200:	fb00 f802 	mul.w	r8, r0, r2
 8000204:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000208:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 800020c:	45a0      	cmp	r8, r4
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x68>
 8000210:	19e4      	adds	r4, r4, r7
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8128 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800021a:	45a0      	cmp	r8, r4
 800021c:	f240 8125 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000220:	3802      	subs	r0, #2
 8000222:	443c      	add	r4, r7
 8000224:	ebc8 0404 	rsb	r4, r8, r4
 8000228:	fbb4 f3f1 	udiv	r3, r4, r1
 800022c:	fb01 4c13 	mls	ip, r1, r3, r4
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	b2ac      	uxth	r4, r5
 8000236:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 800023a:	428a      	cmp	r2, r1
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x96>
 800023e:	19c9      	adds	r1, r1, r7
 8000240:	f103 34ff 	add.w	r4, r3, #4294967295
 8000244:	f080 810f 	bcs.w	8000466 <__udivmoddi4+0x2aa>
 8000248:	428a      	cmp	r2, r1
 800024a:	f240 810c 	bls.w	8000466 <__udivmoddi4+0x2aa>
 800024e:	3b02      	subs	r3, #2
 8000250:	4439      	add	r1, r7
 8000252:	1a8a      	subs	r2, r1, r2
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	2100      	movs	r1, #0
 800025a:	2e00      	cmp	r6, #0
 800025c:	d063      	beq.n	8000326 <__udivmoddi4+0x16a>
 800025e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000262:	2300      	movs	r3, #0
 8000264:	e886 000c 	stmia.w	r6, {r2, r3}
 8000268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d907      	bls.n	8000280 <__udivmoddi4+0xc4>
 8000270:	2e00      	cmp	r6, #0
 8000272:	d056      	beq.n	8000322 <__udivmoddi4+0x166>
 8000274:	2100      	movs	r1, #0
 8000276:	e886 0011 	stmia.w	r6, {r0, r4}
 800027a:	4608      	mov	r0, r1
 800027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000280:	fab3 f183 	clz	r1, r3
 8000284:	2900      	cmp	r1, #0
 8000286:	f040 8093 	bne.w	80003b0 <__udivmoddi4+0x1f4>
 800028a:	42a3      	cmp	r3, r4
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd8>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fe 	bhi.w	8000490 <__udivmoddi4+0x2d4>
 8000294:	1a85      	subs	r5, r0, r2
 8000296:	eb64 0303 	sbc.w	r3, r4, r3
 800029a:	469c      	mov	ip, r3
 800029c:	2001      	movs	r0, #1
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d041      	beq.n	8000326 <__udivmoddi4+0x16a>
 80002a2:	e886 1020 	stmia.w	r6, {r5, ip}
 80002a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002aa:	b912      	cbnz	r2, 80002b2 <__udivmoddi4+0xf6>
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb7 f7f2 	udiv	r7, r7, r2
 80002b2:	fab7 fe87 	clz	lr, r7
 80002b6:	f1be 0f00 	cmp.w	lr, #0
 80002ba:	d136      	bne.n	800032a <__udivmoddi4+0x16e>
 80002bc:	1be4      	subs	r4, r4, r7
 80002be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c2:	fa1f f987 	uxth.w	r9, r7
 80002c6:	2101      	movs	r1, #1
 80002c8:	fbb4 f3f8 	udiv	r3, r4, r8
 80002cc:	fb08 4413 	mls	r4, r8, r3, r4
 80002d0:	fb09 f203 	mul.w	r2, r9, r3
 80002d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80002d8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x134>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x132>
 80002e8:	42a2      	cmp	r2, r4
 80002ea:	f200 80d3 	bhi.w	8000494 <__udivmoddi4+0x2d8>
 80002ee:	4603      	mov	r3, r0
 80002f0:	1aa4      	subs	r4, r4, r2
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4810 	mls	r8, r8, r0, r4
 80002fa:	fb09 f900 	mul.w	r9, r9, r0
 80002fe:	b2ac      	uxth	r4, r5
 8000300:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000304:	4591      	cmp	r9, r2
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x15c>
 8000308:	19d2      	adds	r2, r2, r7
 800030a:	f100 34ff 	add.w	r4, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x15a>
 8000310:	4591      	cmp	r9, r2
 8000312:	f200 80ba 	bhi.w	800048a <__udivmoddi4+0x2ce>
 8000316:	4620      	mov	r0, r4
 8000318:	ebc9 0202 	rsb	r2, r9, r2
 800031c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000320:	e79b      	b.n	800025a <__udivmoddi4+0x9e>
 8000322:	4631      	mov	r1, r6
 8000324:	4630      	mov	r0, r6
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	fa07 f70e 	lsl.w	r7, r7, lr
 800032e:	f1ce 0c20 	rsb	ip, lr, #32
 8000332:	fa24 f30c 	lsr.w	r3, r4, ip
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	fbb3 faf8 	udiv	sl, r3, r8
 800033e:	fa1f f987 	uxth.w	r9, r7
 8000342:	fb08 351a 	mls	r5, r8, sl, r3
 8000346:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034a:	fa04 f40e 	lsl.w	r4, r4, lr
 800034e:	fb0a fb09 	mul.w	fp, sl, r9
 8000352:	ea4c 0c04 	orr.w	ip, ip, r4
 8000356:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 800035e:	459b      	cmp	fp, r3
 8000360:	fa00 f50e 	lsl.w	r5, r0, lr
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x1c0>
 8000366:	19db      	adds	r3, r3, r7
 8000368:	f10a 32ff 	add.w	r2, sl, #4294967295
 800036c:	f080 808b 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000370:	459b      	cmp	fp, r3
 8000372:	f240 8088 	bls.w	8000486 <__udivmoddi4+0x2ca>
 8000376:	f1aa 0a02 	sub.w	sl, sl, #2
 800037a:	443b      	add	r3, r7
 800037c:	ebcb 0303 	rsb	r3, fp, r3
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	fb00 f409 	mul.w	r4, r0, r9
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x1ec>
 8000398:	19db      	adds	r3, r3, r7
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	d26e      	bcs.n	800047e <__udivmoddi4+0x2c2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d96c      	bls.n	800047e <__udivmoddi4+0x2c2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1b1c      	subs	r4, r3, r4
 80003aa:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80003ae:	e78b      	b.n	80002c8 <__udivmoddi4+0x10c>
 80003b0:	f1c1 0e20 	rsb	lr, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f70e 	lsr.w	r7, r4, lr
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb7 faf9 	udiv	sl, r7, r9
 80003ca:	fa1f f38c 	uxth.w	r3, ip
 80003ce:	fb09 771a 	mls	r7, r9, sl, r7
 80003d2:	fa20 f80e 	lsr.w	r8, r0, lr
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fb0a f503 	mul.w	r5, sl, r3
 80003dc:	ea48 0404 	orr.w	r4, r8, r4
 80003e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80003e4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80003e8:	42bd      	cmp	r5, r7
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 fb01 	lsl.w	fp, r0, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f4:	eb17 070c 	adds.w	r7, r7, ip
 80003f8:	f10a 30ff 	add.w	r0, sl, #4294967295
 80003fc:	d241      	bcs.n	8000482 <__udivmoddi4+0x2c6>
 80003fe:	42bd      	cmp	r5, r7
 8000400:	d93f      	bls.n	8000482 <__udivmoddi4+0x2c6>
 8000402:	f1aa 0a02 	sub.w	sl, sl, #2
 8000406:	4467      	add	r7, ip
 8000408:	1b7f      	subs	r7, r7, r5
 800040a:	fbb7 f5f9 	udiv	r5, r7, r9
 800040e:	fb09 7715 	mls	r7, r9, r5, r7
 8000412:	fb05 f303 	mul.w	r3, r5, r3
 8000416:	b2a4      	uxth	r4, r4
 8000418:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800041c:	42bb      	cmp	r3, r7
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb17 070c 	adds.w	r7, r7, ip
 8000424:	f105 30ff 	add.w	r0, r5, #4294967295
 8000428:	d227      	bcs.n	800047a <__udivmoddi4+0x2be>
 800042a:	42bb      	cmp	r3, r7
 800042c:	d925      	bls.n	800047a <__udivmoddi4+0x2be>
 800042e:	3d02      	subs	r5, #2
 8000430:	4467      	add	r7, ip
 8000432:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	1aff      	subs	r7, r7, r3
 800043c:	454f      	cmp	r7, r9
 800043e:	4645      	mov	r5, r8
 8000440:	464c      	mov	r4, r9
 8000442:	d314      	bcc.n	800046e <__udivmoddi4+0x2b2>
 8000444:	d029      	beq.n	800049a <__udivmoddi4+0x2de>
 8000446:	b366      	cbz	r6, 80004a2 <__udivmoddi4+0x2e6>
 8000448:	ebbb 0305 	subs.w	r3, fp, r5
 800044c:	eb67 0704 	sbc.w	r7, r7, r4
 8000450:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000454:	40cb      	lsrs	r3, r1
 8000456:	40cf      	lsrs	r7, r1
 8000458:	ea4e 0303 	orr.w	r3, lr, r3
 800045c:	e886 0088 	stmia.w	r6, {r3, r7}
 8000460:	2100      	movs	r1, #0
 8000462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000466:	4623      	mov	r3, r4
 8000468:	e6f3      	b.n	8000252 <__udivmoddi4+0x96>
 800046a:	4618      	mov	r0, r3
 800046c:	e6da      	b.n	8000224 <__udivmoddi4+0x68>
 800046e:	ebb8 0502 	subs.w	r5, r8, r2
 8000472:	eb69 040c 	sbc.w	r4, r9, ip
 8000476:	3801      	subs	r0, #1
 8000478:	e7e5      	b.n	8000446 <__udivmoddi4+0x28a>
 800047a:	4605      	mov	r5, r0
 800047c:	e7d9      	b.n	8000432 <__udivmoddi4+0x276>
 800047e:	4610      	mov	r0, r2
 8000480:	e792      	b.n	80003a8 <__udivmoddi4+0x1ec>
 8000482:	4682      	mov	sl, r0
 8000484:	e7c0      	b.n	8000408 <__udivmoddi4+0x24c>
 8000486:	4692      	mov	sl, r2
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1c0>
 800048a:	3802      	subs	r0, #2
 800048c:	443a      	add	r2, r7
 800048e:	e743      	b.n	8000318 <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e704      	b.n	800029e <__udivmoddi4+0xe2>
 8000494:	3b02      	subs	r3, #2
 8000496:	443c      	add	r4, r7
 8000498:	e72a      	b.n	80002f0 <__udivmoddi4+0x134>
 800049a:	45c3      	cmp	fp, r8
 800049c:	d3e7      	bcc.n	800046e <__udivmoddi4+0x2b2>
 800049e:	463c      	mov	r4, r7
 80004a0:	e7d1      	b.n	8000446 <__udivmoddi4+0x28a>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080004a8 <__aeabi_idiv0>:
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b085      	sub	sp, #20
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80004b4:	2300      	movs	r3, #0
 80004b6:	73fb      	strb	r3, [r7, #15]
 80004b8:	2300      	movs	r3, #0
 80004ba:	73bb      	strb	r3, [r7, #14]
 80004bc:	230f      	movs	r3, #15
 80004be:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	78db      	ldrb	r3, [r3, #3]
 80004c4:	2b00      	cmp	r3, #0
 80004c6:	d038      	beq.n	800053a <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004c8:	4b26      	ldr	r3, [pc, #152]	; (8000564 <NVIC_Init+0xb8>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	43db      	mvns	r3, r3
 80004ce:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004d2:	0a1b      	lsrs	r3, r3, #8
 80004d4:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80004d6:	7bfb      	ldrb	r3, [r7, #15]
 80004d8:	f1c3 0304 	rsb	r3, r3, #4
 80004dc:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 80004de:	7b7a      	ldrb	r2, [r7, #13]
 80004e0:	7bfb      	ldrb	r3, [r7, #15]
 80004e2:	fa42 f303 	asr.w	r3, r2, r3
 80004e6:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	785b      	ldrb	r3, [r3, #1]
 80004ec:	461a      	mov	r2, r3
 80004ee:	7bbb      	ldrb	r3, [r7, #14]
 80004f0:	fa02 f303 	lsl.w	r3, r2, r3
 80004f4:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	789a      	ldrb	r2, [r3, #2]
 80004fa:	7b7b      	ldrb	r3, [r7, #13]
 80004fc:	4013      	ands	r3, r2
 80004fe:	b2da      	uxtb	r2, r3
 8000500:	7bfb      	ldrb	r3, [r7, #15]
 8000502:	4313      	orrs	r3, r2
 8000504:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 8000506:	7bfb      	ldrb	r3, [r7, #15]
 8000508:	011b      	lsls	r3, r3, #4
 800050a:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 800050c:	4a16      	ldr	r2, [pc, #88]	; (8000568 <NVIC_Init+0xbc>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	4413      	add	r3, r2
 8000514:	7bfa      	ldrb	r2, [r7, #15]
 8000516:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800051a:	4a13      	ldr	r2, [pc, #76]	; (8000568 <NVIC_Init+0xbc>)
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	095b      	lsrs	r3, r3, #5
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	781b      	ldrb	r3, [r3, #0]
 800052a:	f003 031f 	and.w	r3, r3, #31
 800052e:	2101      	movs	r1, #1
 8000530:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000534:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 8000538:	e00f      	b.n	800055a <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800053a:	490b      	ldr	r1, [pc, #44]	; (8000568 <NVIC_Init+0xbc>)
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	095b      	lsrs	r3, r3, #5
 8000542:	b2db      	uxtb	r3, r3
 8000544:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f003 031f 	and.w	r3, r3, #31
 800054e:	2201      	movs	r2, #1
 8000550:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000552:	f100 0320 	add.w	r3, r0, #32
 8000556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	bc80      	pop	{r7}
 8000562:	4770      	bx	lr
 8000564:	e000ed00 	.word	0xe000ed00
 8000568:	e000e100 	.word	0xe000e100

0800056c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 800056c:	b480      	push	{r7}
 800056e:	b085      	sub	sp, #20
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
 8000574:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800057a:	2300      	movs	r3, #0
 800057c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	685b      	ldr	r3, [r3, #4]
 8000582:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800058a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800058e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000590:	683b      	ldr	r3, [r7, #0]
 8000592:	791b      	ldrb	r3, [r3, #4]
 8000594:	021a      	lsls	r2, r3, #8
 8000596:	683b      	ldr	r3, [r7, #0]
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	4313      	orrs	r3, r2
 800059c:	68fa      	ldr	r2, [r7, #12]
 800059e:	4313      	orrs	r3, r2
 80005a0:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	68fa      	ldr	r2, [r7, #12]
 80005a6:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80005ae:	68fa      	ldr	r2, [r7, #12]
 80005b0:	4b17      	ldr	r3, [pc, #92]	; (8000610 <ADC_Init+0xa4>)
 80005b2:	4013      	ands	r3, r2
 80005b4:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	691a      	ldr	r2, [r3, #16]
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	68db      	ldr	r3, [r3, #12]
 80005be:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005c4:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	795b      	ldrb	r3, [r3, #5]
 80005ca:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005cc:	4313      	orrs	r3, r2
 80005ce:	68fa      	ldr	r2, [r7, #12]
 80005d0:	4313      	orrs	r3, r2
 80005d2:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	68fa      	ldr	r2, [r7, #12]
 80005d8:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 80005e6:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 80005e8:	683b      	ldr	r3, [r7, #0]
 80005ea:	7d1b      	ldrb	r3, [r3, #20]
 80005ec:	3b01      	subs	r3, #1
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	7afb      	ldrb	r3, [r7, #11]
 80005f2:	4313      	orrs	r3, r2
 80005f4:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	051b      	lsls	r3, r3, #20
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000606:	bf00      	nop
 8000608:	3714      	adds	r7, #20
 800060a:	46bd      	mov	sp, r7
 800060c:	bc80      	pop	{r7}
 800060e:	4770      	bx	lr
 8000610:	c0fff7fd 	.word	0xc0fff7fd

08000614 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2200      	movs	r2, #0
 8000626:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2200      	movs	r2, #0
 800062c:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800063a:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	2200      	movs	r2, #0
 8000640:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2201      	movs	r2, #1
 8000646:	751a      	strb	r2, [r3, #20]
}
 8000648:	bf00      	nop
 800064a:	370c      	adds	r7, #12
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop

08000654 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	460b      	mov	r3, r1
 800065e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000660:	78fb      	ldrb	r3, [r7, #3]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d006      	beq.n	8000674 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f043 0201 	orr.w	r2, r3, #1
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000672:	e005      	b.n	8000680 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	689b      	ldr	r3, [r3, #8]
 8000678:	f023 0201 	bic.w	r2, r3, #1
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	609a      	str	r2, [r3, #8]
  }
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	bc80      	pop	{r7}
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800068c:	b480      	push	{r7}
 800068e:	b085      	sub	sp, #20
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]
 8000694:	4608      	mov	r0, r1
 8000696:	4611      	mov	r1, r2
 8000698:	461a      	mov	r2, r3
 800069a:	4603      	mov	r3, r0
 800069c:	70fb      	strb	r3, [r7, #3]
 800069e:	460b      	mov	r3, r1
 80006a0:	70bb      	strb	r3, [r7, #2]
 80006a2:	4613      	mov	r3, r2
 80006a4:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	2300      	movs	r3, #0
 80006ac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80006ae:	78fb      	ldrb	r3, [r7, #3]
 80006b0:	2b1d      	cmp	r3, #29
 80006b2:	d923      	bls.n	80006fc <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006b8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80006ba:	78fb      	ldrb	r3, [r7, #3]
 80006bc:	f1a3 021e 	sub.w	r2, r3, #30
 80006c0:	4613      	mov	r3, r2
 80006c2:	005b      	lsls	r3, r3, #1
 80006c4:	4413      	add	r3, r2
 80006c6:	2207      	movs	r2, #7
 80006c8:	fa02 f303 	lsl.w	r3, r2, r3
 80006cc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006ce:	68bb      	ldr	r3, [r7, #8]
 80006d0:	43db      	mvns	r3, r3
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	4013      	ands	r3, r2
 80006d6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80006d8:	7879      	ldrb	r1, [r7, #1]
 80006da:	78fb      	ldrb	r3, [r7, #3]
 80006dc:	f1a3 021e 	sub.w	r2, r3, #30
 80006e0:	4613      	mov	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	4413      	add	r3, r2
 80006e6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ea:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80006ec:	68fa      	ldr	r2, [r7, #12]
 80006ee:	68bb      	ldr	r3, [r7, #8]
 80006f0:	4313      	orrs	r3, r2
 80006f2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80006fa:	e06c      	b.n	80007d6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	2b13      	cmp	r3, #19
 8000700:	d923      	bls.n	800074a <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	68db      	ldr	r3, [r3, #12]
 8000706:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000708:	78fb      	ldrb	r3, [r7, #3]
 800070a:	f1a3 0214 	sub.w	r2, r3, #20
 800070e:	4613      	mov	r3, r2
 8000710:	005b      	lsls	r3, r3, #1
 8000712:	4413      	add	r3, r2
 8000714:	2207      	movs	r2, #7
 8000716:	fa02 f303 	lsl.w	r3, r2, r3
 800071a:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800071c:	68bb      	ldr	r3, [r7, #8]
 800071e:	43db      	mvns	r3, r3
 8000720:	68fa      	ldr	r2, [r7, #12]
 8000722:	4013      	ands	r3, r2
 8000724:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000726:	7879      	ldrb	r1, [r7, #1]
 8000728:	78fb      	ldrb	r3, [r7, #3]
 800072a:	f1a3 0214 	sub.w	r2, r3, #20
 800072e:	4613      	mov	r3, r2
 8000730:	005b      	lsls	r3, r3, #1
 8000732:	4413      	add	r3, r2
 8000734:	fa01 f303 	lsl.w	r3, r1, r3
 8000738:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
 8000740:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	e045      	b.n	80007d6 <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800074a:	78fb      	ldrb	r3, [r7, #3]
 800074c:	2b09      	cmp	r3, #9
 800074e:	d923      	bls.n	8000798 <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	691b      	ldr	r3, [r3, #16]
 8000754:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000756:	78fb      	ldrb	r3, [r7, #3]
 8000758:	f1a3 020a 	sub.w	r2, r3, #10
 800075c:	4613      	mov	r3, r2
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	4413      	add	r3, r2
 8000762:	2207      	movs	r2, #7
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	43db      	mvns	r3, r3
 800076e:	68fa      	ldr	r2, [r7, #12]
 8000770:	4013      	ands	r3, r2
 8000772:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000774:	7879      	ldrb	r1, [r7, #1]
 8000776:	78fb      	ldrb	r3, [r7, #3]
 8000778:	f1a3 020a 	sub.w	r2, r3, #10
 800077c:	4613      	mov	r3, r2
 800077e:	005b      	lsls	r3, r3, #1
 8000780:	4413      	add	r3, r2
 8000782:	fa01 f303 	lsl.w	r3, r1, r3
 8000786:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000788:	68fa      	ldr	r2, [r7, #12]
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	4313      	orrs	r3, r2
 800078e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	e01e      	b.n	80007d6 <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	695b      	ldr	r3, [r3, #20]
 800079c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 800079e:	78fa      	ldrb	r2, [r7, #3]
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	2207      	movs	r2, #7
 80007a8:	fa02 f303 	lsl.w	r3, r2, r3
 80007ac:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	43db      	mvns	r3, r3
 80007b2:	68fa      	ldr	r2, [r7, #12]
 80007b4:	4013      	ands	r3, r2
 80007b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80007b8:	7879      	ldrb	r1, [r7, #1]
 80007ba:	78fa      	ldrb	r2, [r7, #3]
 80007bc:	4613      	mov	r3, r2
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	4413      	add	r3, r2
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007c8:	68fa      	ldr	r2, [r7, #12]
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	4313      	orrs	r3, r2
 80007ce:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	68fa      	ldr	r2, [r7, #12]
 80007d4:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80007d6:	78bb      	ldrb	r3, [r7, #2]
 80007d8:	2b06      	cmp	r3, #6
 80007da:	d821      	bhi.n	8000820 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007e0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 80007e2:	78bb      	ldrb	r3, [r7, #2]
 80007e4:	1e5a      	subs	r2, r3, #1
 80007e6:	4613      	mov	r3, r2
 80007e8:	009b      	lsls	r3, r3, #2
 80007ea:	4413      	add	r3, r2
 80007ec:	221f      	movs	r2, #31
 80007ee:	fa02 f303 	lsl.w	r3, r2, r3
 80007f2:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80007f4:	68bb      	ldr	r3, [r7, #8]
 80007f6:	43db      	mvns	r3, r3
 80007f8:	68fa      	ldr	r2, [r7, #12]
 80007fa:	4013      	ands	r3, r2
 80007fc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 80007fe:	78f9      	ldrb	r1, [r7, #3]
 8000800:	78bb      	ldrb	r3, [r7, #2]
 8000802:	1e5a      	subs	r2, r3, #1
 8000804:	4613      	mov	r3, r2
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	4413      	add	r3, r2
 800080a:	fa01 f303 	lsl.w	r3, r1, r3
 800080e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	68bb      	ldr	r3, [r7, #8]
 8000814:	4313      	orrs	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	68fa      	ldr	r2, [r7, #12]
 800081c:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800081e:	e095      	b.n	800094c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000820:	78bb      	ldrb	r3, [r7, #2]
 8000822:	2b0c      	cmp	r3, #12
 8000824:	d821      	bhi.n	800086a <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800082a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 800082c:	78bb      	ldrb	r3, [r7, #2]
 800082e:	1fda      	subs	r2, r3, #7
 8000830:	4613      	mov	r3, r2
 8000832:	009b      	lsls	r3, r3, #2
 8000834:	4413      	add	r3, r2
 8000836:	221f      	movs	r2, #31
 8000838:	fa02 f303 	lsl.w	r3, r2, r3
 800083c:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800083e:	68bb      	ldr	r3, [r7, #8]
 8000840:	43db      	mvns	r3, r3
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	4013      	ands	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000848:	78f9      	ldrb	r1, [r7, #3]
 800084a:	78bb      	ldrb	r3, [r7, #2]
 800084c:	1fda      	subs	r2, r3, #7
 800084e:	4613      	mov	r3, r2
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	4413      	add	r3, r2
 8000854:	fa01 f303 	lsl.w	r3, r1, r3
 8000858:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800085a:	68fa      	ldr	r2, [r7, #12]
 800085c:	68bb      	ldr	r3, [r7, #8]
 800085e:	4313      	orrs	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	68fa      	ldr	r2, [r7, #12]
 8000866:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000868:	e070      	b.n	800094c <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800086a:	78bb      	ldrb	r3, [r7, #2]
 800086c:	2b12      	cmp	r3, #18
 800086e:	d823      	bhi.n	80008b8 <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000874:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	f1a3 020d 	sub.w	r2, r3, #13
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	221f      	movs	r2, #31
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	43db      	mvns	r3, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000894:	78f9      	ldrb	r1, [r7, #3]
 8000896:	78bb      	ldrb	r3, [r7, #2]
 8000898:	f1a3 020d 	sub.w	r2, r3, #13
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008b6:	e049      	b.n	800094c <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80008b8:	78bb      	ldrb	r3, [r7, #2]
 80008ba:	2b18      	cmp	r3, #24
 80008bc:	d823      	bhi.n	8000906 <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008c2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80008c4:	78bb      	ldrb	r3, [r7, #2]
 80008c6:	f1a3 0213 	sub.w	r2, r3, #19
 80008ca:	4613      	mov	r3, r2
 80008cc:	009b      	lsls	r3, r3, #2
 80008ce:	4413      	add	r3, r2
 80008d0:	221f      	movs	r2, #31
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	43db      	mvns	r3, r3
 80008dc:	68fa      	ldr	r2, [r7, #12]
 80008de:	4013      	ands	r3, r2
 80008e0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 80008e2:	78f9      	ldrb	r1, [r7, #3]
 80008e4:	78bb      	ldrb	r3, [r7, #2]
 80008e6:	f1a3 0213 	sub.w	r2, r3, #19
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	fa01 f303 	lsl.w	r3, r1, r3
 80008f4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008f6:	68fa      	ldr	r2, [r7, #12]
 80008f8:	68bb      	ldr	r3, [r7, #8]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000904:	e022      	b.n	800094c <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 800090c:	78bb      	ldrb	r3, [r7, #2]
 800090e:	f1a3 0219 	sub.w	r2, r3, #25
 8000912:	4613      	mov	r3, r2
 8000914:	009b      	lsls	r3, r3, #2
 8000916:	4413      	add	r3, r2
 8000918:	221f      	movs	r2, #31
 800091a:	fa02 f303 	lsl.w	r3, r2, r3
 800091e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	43db      	mvns	r3, r3
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	4013      	ands	r3, r2
 8000928:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800092a:	78f9      	ldrb	r1, [r7, #3]
 800092c:	78bb      	ldrb	r3, [r7, #2]
 800092e:	f1a3 0219 	sub.w	r2, r3, #25
 8000932:	4613      	mov	r3, r2
 8000934:	009b      	lsls	r3, r3, #2
 8000936:	4413      	add	r3, r2
 8000938:	fa01 f303 	lsl.w	r3, r1, r3
 800093c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800093e:	68fa      	ldr	r2, [r7, #12]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4313      	orrs	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 800094c:	bf00      	nop
 800094e:	3714      	adds	r7, #20
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop

08000958 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	609a      	str	r2, [r3, #8]
}
 800096c:	bf00      	nop
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	bc80      	pop	{r7}
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <ADC_DMACmd>:
  * @param  NewState: new state of the selected ADC DMA transfer.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMACmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000978:	b480      	push	{r7}
 800097a:	b083      	sub	sp, #12
 800097c:	af00      	add	r7, sp, #0
 800097e:	6078      	str	r0, [r7, #4]
 8000980:	460b      	mov	r3, r1
 8000982:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_DMA_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000984:	78fb      	ldrb	r3, [r7, #3]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d006      	beq.n	8000998 <ADC_DMACmd+0x20>
  {
    /* Enable the selected ADC DMA request */
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
  }
}
 8000996:	e005      	b.n	80009a4 <ADC_DMACmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_DMA;
  }
  else
  {
    /* Disable the selected ADC DMA request */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_DMA);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	609a      	str	r2, [r3, #8]
  }
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bc80      	pop	{r7}
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop

080009b0 <ADC_DMARequestAfterLastTransferCmd>:
  * @param  NewState: new state of the selected ADC EOC flag rising
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_DMARequestAfterLastTransferCmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <ADC_DMARequestAfterLastTransferCmd+0x20>
  {
    /* Enable the selected ADC DMA request after last transfer */
    ADCx->CR2 |= ADC_CR2_DDS;
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	689b      	ldr	r3, [r3, #8]
 80009c6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
  }
}
 80009ce:	e005      	b.n	80009dc <ADC_DMARequestAfterLastTransferCmd+0x2c>
    ADCx->CR2 |= ADC_CR2_DDS;
  }
  else
  {
    /* Disable the selected ADC DMA request after last transfer */
    ADCx->CR2 &= (uint32_t)~ADC_CR2_DDS;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	689b      	ldr	r3, [r3, #8]
 80009d4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	609a      	str	r2, [r3, #8]
  }
}
 80009dc:	bf00      	nop
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bc80      	pop	{r7}
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
 80009f0:	460b      	mov	r3, r1
 80009f2:	807b      	strh	r3, [r7, #2]
 80009f4:	4613      	mov	r3, r2
 80009f6:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80009f8:	2300      	movs	r3, #0
 80009fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80009fc:	887b      	ldrh	r3, [r7, #2]
 80009fe:	b2db      	uxtb	r3, r3
 8000a00:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 8000a02:	2201      	movs	r2, #1
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	fa02 f303 	lsl.w	r3, r2, r3
 8000a0a:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 8000a0c:	787b      	ldrb	r3, [r7, #1]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d006      	beq.n	8000a20 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	685a      	ldr	r2, [r3, #4]
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	431a      	orrs	r2, r3
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 8000a1e:	e006      	b.n	8000a2e <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	685a      	ldr	r2, [r3, #4]
 8000a24:	68fb      	ldr	r3, [r7, #12]
 8000a26:	43db      	mvns	r3, r3
 8000a28:	401a      	ands	r2, r3
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	605a      	str	r2, [r3, #4]
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3714      	adds	r7, #20
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bc80      	pop	{r7}
 8000a36:	4770      	bx	lr

08000a38 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
 8000a40:	460b      	mov	r3, r1
 8000a42:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000a44:	2300      	movs	r3, #0
 8000a46:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681a      	ldr	r2, [r3, #0]
 8000a4c:	887b      	ldrh	r3, [r7, #2]
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d002      	beq.n	8000a5a <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
 8000a58:	e001      	b.n	8000a5e <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3714      	adds	r7, #20
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bc80      	pop	{r7}
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that
  *         contains the configuration information for the specified DMA Channel.
  * @retval None
  */
void DMA_Init(DMA_Channel_TypeDef* DMAy_Channelx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_PRIORITY(DMA_InitStruct->DMA_Priority));
  assert_param(IS_DMA_M2M_STATE(DMA_InitStruct->DMA_M2M));

/*--------------------------- DMAy Channelx CCR Configuration -----------------*/
  /* Get the DMAy_Channelx CCR value */
  tmpreg = DMAy_Channelx->CCR;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	60fb      	str	r3, [r7, #12]
  /* Clear MEM2MEM, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= CCR_CLEAR_MASK;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000a8a:	60fb      	str	r3, [r7, #12]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	689a      	ldr	r2, [r3, #8]
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	6a1b      	ldr	r3, [r3, #32]
 8000a94:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	691b      	ldr	r3, [r3, #16]
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000a9a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	695b      	ldr	r3, [r3, #20]
 8000aa0:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	699b      	ldr	r3, [r3, #24]
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000aa6:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	69db      	ldr	r3, [r3, #28]
 8000aac:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000ab2:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ab8:	4313      	orrs	r3, r2
  /* Set MINC bit according to DMA_MemoryInc value */
  /* Set PSIZE bits according to DMA_PeripheralDataSize value */
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set PL bits according to DMA_Priority value */
  /* Set the MEM2MEM bit according to DMA_M2M value */
  tmpreg |= DMA_InitStruct->DMA_DIR | DMA_InitStruct->DMA_Mode |
 8000aba:	68fa      	ldr	r2, [r7, #12]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
            DMA_InitStruct->DMA_Priority | DMA_InitStruct->DMA_M2M;

  /* Write to DMAy Channelx CCR */
  DMAy_Channelx->CCR = tmpreg;
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	68fa      	ldr	r2, [r7, #12]
 8000ac4:	601a      	str	r2, [r3, #0]

/*--------------------------- DMAy Channelx CNDTR Configuration ---------------*/
  /* Write to DMAy Channelx CNDTR */
  DMAy_Channelx->CNDTR = DMA_InitStruct->DMA_BufferSize;
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	68da      	ldr	r2, [r3, #12]
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	605a      	str	r2, [r3, #4]

/*--------------------------- DMAy Channelx CPAR Configuration ----------------*/
  /* Write to DMAy Channelx CPAR */
  DMAy_Channelx->CPAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 8000ace:	683b      	ldr	r3, [r7, #0]
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	609a      	str	r2, [r3, #8]

/*--------------------------- DMAy Channelx CMAR Configuration ----------------*/
  /* Write to DMAy Channelx CMAR */
  DMAy_Channelx->CMAR = DMA_InitStruct->DMA_MemoryBaseAddr;
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	685a      	ldr	r2, [r3, #4]
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	60da      	str	r2, [r3, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bc80      	pop	{r7}
 8000ae6:	4770      	bx	lr

08000ae8 <DMA_Cmd>:
  * @param  NewState: new state of the DMAy Channelx. 
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_Cmd(DMA_Channel_TypeDef* DMAy_Channelx, FunctionalState NewState)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
 8000af0:	460b      	mov	r3, r1
 8000af2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000af4:	78fb      	ldrb	r3, [r7, #3]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Channelx */
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f043 0201 	orr.w	r2, r3, #1
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
  }
}
 8000b06:	e006      	b.n	8000b16 <DMA_Cmd+0x2e>
    DMAy_Channelx->CCR |= DMA_CCR1_EN;
  }
  else
  {
    /* Disable the selected DMAy Channelx */
    DMAy_Channelx->CCR &= (uint16_t)(~DMA_CCR1_EN);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681a      	ldr	r2, [r3, #0]
 8000b0c:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8000b10:	4013      	ands	r3, r2
 8000b12:	687a      	ldr	r2, [r7, #4]
 8000b14:	6013      	str	r3, [r2, #0]
  }
}
 8000b16:	bf00      	nop
 8000b18:	370c      	adds	r7, #12
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bc80      	pop	{r7}
 8000b1e:	4770      	bx	lr

08000b20 <DMA_ITConfig>:
  * @param  NewState: new state of the specified DMA interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void DMA_ITConfig(DMA_Channel_TypeDef* DMAy_Channelx, uint32_t DMA_IT, FunctionalState NewState)
{
 8000b20:	b480      	push	{r7}
 8000b22:	b085      	sub	sp, #20
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	4613      	mov	r3, r2
 8000b2c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Channelx));
  assert_param(IS_DMA_CONFIG_IT(DMA_IT));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d006      	beq.n	8000b42 <DMA_ITConfig+0x22>
  {
    /* Enable the selected DMA interrupts */
    DMAy_Channelx->CCR |= DMA_IT;
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	68bb      	ldr	r3, [r7, #8]
 8000b3a:	431a      	orrs	r2, r3
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
  }
}
 8000b40:	e006      	b.n	8000b50 <DMA_ITConfig+0x30>
    DMAy_Channelx->CCR |= DMA_IT;
  }
  else
  {
    /* Disable the selected DMA interrupts */
    DMAy_Channelx->CCR &= ~DMA_IT;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	681a      	ldr	r2, [r3, #0]
 8000b46:	68bb      	ldr	r3, [r7, #8]
 8000b48:	43db      	mvns	r3, r3
 8000b4a:	401a      	ands	r2, r3
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	601a      	str	r2, [r3, #0]
  }
}
 8000b50:	bf00      	nop
 8000b52:	3714      	adds	r7, #20
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bc80      	pop	{r7}
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop

08000b5c <DMA_GetITStatus>:
  *    DMAy_IT_HTx or DMAy_IT_TEx). 
  *      
  * @retval The new state of DMAy_IT (SET or RESET).
  */
ITStatus DMA_GetITStatus(uint32_t DMAy_IT)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  ITStatus bitstatus = RESET;
 8000b64:	2300      	movs	r3, #0
 8000b66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpreg = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	60bb      	str	r3, [r7, #8]
 
  /* Check the parameters */
  assert_param(IS_DMA_GET_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d103      	bne.n	8000b7e <DMA_GetITStatus+0x22>
  {
    /* Get DMA1 ISR register value */
    tmpreg = DMA1->ISR;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <DMA_GetITStatus+0x48>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	60bb      	str	r3, [r7, #8]
 8000b7c:	e002      	b.n	8000b84 <DMA_GetITStatus+0x28>
  }
  else
  {
    /* Get DMA2 ISR register value */
    tmpreg = DMA2->ISR;
 8000b7e:	4b0a      	ldr	r3, [pc, #40]	; (8000ba8 <DMA_GetITStatus+0x4c>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	60bb      	str	r3, [r7, #8]
  }
  
  /* Check the status of the specified DMAy interrupt */
  if ((tmpreg & DMAy_IT) != (uint32_t)RESET)
 8000b84:	68ba      	ldr	r2, [r7, #8]
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	4013      	ands	r3, r2
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d002      	beq.n	8000b94 <DMA_GetITStatus+0x38>
  {
    /* DMAy_IT is set */
    bitstatus = SET;
 8000b8e:	2301      	movs	r3, #1
 8000b90:	73fb      	strb	r3, [r7, #15]
 8000b92:	e001      	b.n	8000b98 <DMA_GetITStatus+0x3c>
  }
  else
  {
    /* DMAy_IT is reset */
    bitstatus = RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the DMAy_IT status */
  return  bitstatus;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr
 8000ba4:	40026000 	.word	0x40026000
 8000ba8:	40026400 	.word	0x40026400

08000bac <DMA_ClearITPendingBit>:
  *    DMAy_IT_TEx).  
  *        
  * @retval None
  */
void DMA_ClearITPendingBit(uint32_t DMAy_IT)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b083      	sub	sp, #12
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DMA_CLEAR_IT(DMAy_IT));

  /* Calculate the used DMAy */
  if ((DMAy_IT & FLAG_MASK) == (uint32_t)RESET)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d103      	bne.n	8000bc6 <DMA_ClearITPendingBit+0x1a>
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA1->IFCR = DMAy_IT;
 8000bbe:	4a06      	ldr	r2, [pc, #24]	; (8000bd8 <DMA_ClearITPendingBit+0x2c>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6053      	str	r3, [r2, #4]
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
  }  
}
 8000bc4:	e002      	b.n	8000bcc <DMA_ClearITPendingBit+0x20>
    DMA1->IFCR = DMAy_IT;
  }
  else
  {
    /* Clear the selected DMAy interrupt pending bits */
    DMA2->IFCR = DMAy_IT;
 8000bc6:	4a05      	ldr	r2, [pc, #20]	; (8000bdc <DMA_ClearITPendingBit+0x30>)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6053      	str	r3, [r2, #4]
  }  
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bc80      	pop	{r7}
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40026000 	.word	0x40026000
 8000bdc:	40026400 	.word	0x40026400

08000be0 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000be0:	b480      	push	{r7}
 8000be2:	b087      	sub	sp, #28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000bea:	2300      	movs	r3, #0
 8000bec:	617b      	str	r3, [r7, #20]
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e07e      	b.n	8000cfa <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	fa02 f303 	lsl.w	r3, r2, r3
 8000c04:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	693b      	ldr	r3, [r7, #16]
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000c10:	68fa      	ldr	r2, [r7, #12]
 8000c12:	693b      	ldr	r3, [r7, #16]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d16d      	bne.n	8000cf4 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	005b      	lsls	r3, r3, #1
 8000c20:	2103      	movs	r1, #3
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43db      	mvns	r3, r3
 8000c28:	401a      	ands	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	791b      	ldrb	r3, [r3, #4]
 8000c36:	4619      	mov	r1, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	005b      	lsls	r3, r3, #1
 8000c3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c40:	431a      	orrs	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	791b      	ldrb	r3, [r3, #4]
 8000c4a:	2b01      	cmp	r3, #1
 8000c4c:	d003      	beq.n	8000c56 <GPIO_Init+0x76>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	791b      	ldrb	r3, [r3, #4]
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d136      	bne.n	8000cc4 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	689a      	ldr	r2, [r3, #8]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	005b      	lsls	r3, r3, #1
 8000c5e:	2103      	movs	r1, #3
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	401a      	ands	r2, r3
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	689a      	ldr	r2, [r3, #8]
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	795b      	ldrb	r3, [r3, #5]
 8000c74:	4619      	mov	r1, r3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c7e:	431a      	orrs	r2, r3
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	889b      	ldrh	r3, [r3, #4]
 8000c88:	b29a      	uxth	r2, r3
 8000c8a:	697b      	ldr	r3, [r7, #20]
 8000c8c:	b29b      	uxth	r3, r3
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fa01 f303 	lsl.w	r3, r1, r3
 8000c94:	b29b      	uxth	r3, r3
 8000c96:	43db      	mvns	r3, r3
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	4013      	ands	r3, r2
 8000c9c:	b29a      	uxth	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	889b      	ldrh	r3, [r3, #4]
 8000ca6:	b29b      	uxth	r3, r3
 8000ca8:	b21a      	sxth	r2, r3
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	799b      	ldrb	r3, [r3, #6]
 8000cae:	4619      	mov	r1, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	b29b      	uxth	r3, r3
 8000cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cb8:	b21b      	sxth	r3, r3
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	b21b      	sxth	r3, r3
 8000cbe:	b29a      	uxth	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	68da      	ldr	r2, [r3, #12]
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	b29b      	uxth	r3, r3
 8000ccc:	005b      	lsls	r3, r3, #1
 8000cce:	2103      	movs	r1, #3
 8000cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8000cd4:	43db      	mvns	r3, r3
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	79db      	ldrb	r3, [r3, #7]
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa01 f303 	lsl.w	r3, r1, r3
 8000cee:	431a      	orrs	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	617b      	str	r3, [r7, #20]
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	2b0f      	cmp	r3, #15
 8000cfe:	f67f af7d 	bls.w	8000bfc <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000d02:	bf00      	nop
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bc80      	pop	{r7}
 8000d0a:	4770      	bx	lr

08000d0c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	460b      	mov	r3, r1
 8000d16:	807b      	strh	r3, [r7, #2]
 8000d18:	4613      	mov	r3, r2
 8000d1a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000d20:	2300      	movs	r3, #0
 8000d22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d24:	787a      	ldrb	r2, [r7, #1]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	f003 0307 	and.w	r3, r3, #7
 8000d2c:	009b      	lsls	r3, r3, #2
 8000d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d32:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000d34:	887b      	ldrh	r3, [r7, #2]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	887b      	ldrh	r3, [r7, #2]
 8000d3e:	08db      	lsrs	r3, r3, #3
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	461a      	mov	r2, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3208      	adds	r2, #8
 8000d48:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d4c:	887b      	ldrh	r3, [r7, #2]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	210f      	movs	r1, #15
 8000d56:	fa01 f303 	lsl.w	r3, r1, r3
 8000d5a:	43db      	mvns	r3, r3
 8000d5c:	ea02 0103 	and.w	r1, r2, r3
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f100 0208 	add.w	r2, r0, #8
 8000d66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000d6a:	887b      	ldrh	r3, [r7, #2]
 8000d6c:	08db      	lsrs	r3, r3, #3
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	461a      	mov	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3208      	adds	r2, #8
 8000d76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000d7a:	68fb      	ldr	r3, [r7, #12]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000d80:	887b      	ldrh	r3, [r7, #2]
 8000d82:	08db      	lsrs	r3, r3, #3
 8000d84:	b29b      	uxth	r3, r3
 8000d86:	461a      	mov	r2, r3
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	3208      	adds	r2, #8
 8000d8c:	68b9      	ldr	r1, [r7, #8]
 8000d8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000d92:	bf00      	nop
 8000d94:	3714      	adds	r7, #20
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bc80      	pop	{r7}
 8000d9a:	4770      	bx	lr

08000d9c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	4603      	mov	r3, r0
 8000da4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000da6:	4a04      	ldr	r2, [pc, #16]	; (8000db8 <RCC_HSICmd+0x1c>)
 8000da8:	79fb      	ldrb	r3, [r7, #7]
 8000daa:	6013      	str	r3, [r2, #0]
}
 8000dac:	bf00      	nop
 8000dae:	370c      	adds	r7, #12
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bc80      	pop	{r7}
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop
 8000db8:	42470000 	.word	0x42470000

08000dbc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000dc8:	78fb      	ldrb	r3, [r7, #3]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d006      	beq.n	8000ddc <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000dce:	4909      	ldr	r1, [pc, #36]	; (8000df4 <RCC_AHBPeriphClockCmd+0x38>)
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <RCC_AHBPeriphClockCmd+0x38>)
 8000dd2:	69da      	ldr	r2, [r3, #28]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000dda:	e006      	b.n	8000dea <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000ddc:	4905      	ldr	r1, [pc, #20]	; (8000df4 <RCC_AHBPeriphClockCmd+0x38>)
 8000dde:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <RCC_AHBPeriphClockCmd+0x38>)
 8000de0:	69da      	ldr	r2, [r3, #28]
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	4013      	ands	r3, r2
 8000de8:	61cb      	str	r3, [r1, #28]
  }
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr
 8000df4:	40023800 	.word	0x40023800

08000df8 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	460b      	mov	r3, r1
 8000e02:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000e04:	78fb      	ldrb	r3, [r7, #3]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d006      	beq.n	8000e18 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000e0a:	4909      	ldr	r1, [pc, #36]	; (8000e30 <RCC_APB2PeriphClockCmd+0x38>)
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <RCC_APB2PeriphClockCmd+0x38>)
 8000e0e:	6a1a      	ldr	r2, [r3, #32]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000e16:	e006      	b.n	8000e26 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000e18:	4905      	ldr	r1, [pc, #20]	; (8000e30 <RCC_APB2PeriphClockCmd+0x38>)
 8000e1a:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <RCC_APB2PeriphClockCmd+0x38>)
 8000e1c:	6a1a      	ldr	r2, [r3, #32]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	43db      	mvns	r3, r3
 8000e22:	4013      	ands	r3, r2
 8000e24:	620b      	str	r3, [r1, #32]
  }
}
 8000e26:	bf00      	nop
 8000e28:	370c      	adds	r7, #12
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bc80      	pop	{r7}
 8000e2e:	4770      	bx	lr
 8000e30:	40023800 	.word	0x40023800

08000e34 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b087      	sub	sp, #28
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000e46:	2300      	movs	r3, #0
 8000e48:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000e4a:	79fb      	ldrb	r3, [r7, #7]
 8000e4c:	095b      	lsrs	r3, r3, #5
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d103      	bne.n	8000e60 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000e58:	4b0e      	ldr	r3, [pc, #56]	; (8000e94 <RCC_GetFlagStatus+0x60>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	617b      	str	r3, [r7, #20]
 8000e5e:	e002      	b.n	8000e66 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000e60:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <RCC_GetFlagStatus+0x60>)
 8000e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e64:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 031f 	and.w	r3, r3, #31
 8000e6c:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000e6e:	697a      	ldr	r2, [r7, #20]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	fa22 f303 	lsr.w	r3, r2, r3
 8000e76:	f003 0301 	and.w	r3, r3, #1
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d002      	beq.n	8000e84 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	74fb      	strb	r3, [r7, #19]
 8000e82:	e001      	b.n	8000e88 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000e84:	2300      	movs	r3, #0
 8000e86:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000e88:	7cfb      	ldrb	r3, [r7, #19]
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	371c      	adds	r7, #28
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bc80      	pop	{r7}
 8000e92:	4770      	bx	lr
 8000e94:	40023800 	.word	0x40023800

08000e98 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000eac:	89fb      	ldrh	r3, [r7, #14]
 8000eae:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000eb2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	881a      	ldrh	r2, [r3, #0]
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	885b      	ldrh	r3, [r3, #2]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ed4:	4313      	orrs	r3, r2
 8000ed6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000eec:	4313      	orrs	r3, r2
 8000eee:	b29a      	uxth	r2, r3
 8000ef0:	89fb      	ldrh	r3, [r7, #14]
 8000ef2:	4313      	orrs	r3, r2
 8000ef4:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	89fa      	ldrh	r2, [r7, #14]
 8000efa:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	8b9b      	ldrh	r3, [r3, #28]
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000f06:	b29a      	uxth	r2, r3
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	8a1a      	ldrh	r2, [r3, #16]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	821a      	strh	r2, [r3, #16]
}
 8000f14:	bf00      	nop
 8000f16:	3714      	adds	r7, #20
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bc80      	pop	{r7}
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d008      	beq.n	8000f44 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	881b      	ldrh	r3, [r3, #0]
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f3c:	b29a      	uxth	r2, r3
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000f42:	e007      	b.n	8000f54 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	881b      	ldrh	r3, [r3, #0]
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000f4e:	b29a      	uxth	r2, r3
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	801a      	strh	r2, [r3, #0]
  }
}
 8000f54:	bf00      	nop
 8000f56:	370c      	adds	r7, #12
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bc80      	pop	{r7}
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop

08000f60 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	460b      	mov	r3, r1
 8000f6a:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	891b      	ldrh	r3, [r3, #8]
 8000f74:	b29a      	uxth	r2, r3
 8000f76:	887b      	ldrh	r3, [r7, #2]
 8000f78:	4013      	ands	r3, r2
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d002      	beq.n	8000f86 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000f80:	2301      	movs	r3, #1
 8000f82:	73fb      	strb	r3, [r7, #15]
 8000f84:	e001      	b.n	8000f8a <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000f8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop

08000f98 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b085      	sub	sp, #20
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
 8000fa0:	460b      	mov	r3, r1
 8000fa2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	81bb      	strh	r3, [r7, #12]
 8000fac:	2300      	movs	r3, #0
 8000fae:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	8a1b      	ldrh	r3, [r3, #16]
 8000fb4:	b29a      	uxth	r2, r3
 8000fb6:	887b      	ldrh	r3, [r7, #2]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	899b      	ldrh	r3, [r3, #12]
 8000fc0:	b29a      	uxth	r2, r3
 8000fc2:	887b      	ldrh	r3, [r7, #2]
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000fc8:	89bb      	ldrh	r3, [r7, #12]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d005      	beq.n	8000fda <TIM_GetITStatus+0x42>
 8000fce:	897b      	ldrh	r3, [r7, #10]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d002      	beq.n	8000fda <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e001      	b.n	8000fde <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3714      	adds	r7, #20
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bc80      	pop	{r7}
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000ff8:	887b      	ldrh	r3, [r7, #2]
 8000ffa:	43db      	mvns	r3, r3
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	821a      	strh	r2, [r3, #16]
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8001010:	f000 fd9c 	bl	8001b4c <res_reset>
	Delay(10000);
 8001014:	f242 7010 	movw	r0, #10000	; 0x2710
 8001018:	f000 ffc8 	bl	8001fac <Delay>

	res_set();
 800101c:	f000 fd8a 	bl	8001b34 <res_set>
	Delay(10000);
 8001020:	f242 7010 	movw	r0, #10000	; 0x2710
 8001024:	f000 ffc2 	bl	8001fac <Delay>
}
 8001028:	bf00      	nop
 800102a:	bd80      	pop	{r7, pc}

0800102c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	4603      	mov	r3, r0
 8001034:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8001036:	f000 fd53 	bl	8001ae0 <cd_reset>

	readWriteSPI2(address);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	4618      	mov	r0, r3
 800103e:	f000 fce3 	bl	8001a08 <readWriteSPI2>
}
 8001042:	bf00      	nop
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop

0800104c <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8001056:	f000 fd37 	bl	8001ac8 <cd_set>

	readWriteSPI2(parameter);
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	4618      	mov	r0, r3
 800105e:	f000 fcd3 	bl	8001a08 <readWriteSPI2>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop

0800106c <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	4603      	mov	r3, r0
 8001074:	460a      	mov	r2, r1
 8001076:	71fb      	strb	r3, [r7, #7]
 8001078:	4613      	mov	r3, r2
 800107a:	71bb      	strb	r3, [r7, #6]
	cd_set();
 800107c:	f000 fd24 	bl	8001ac8 <cd_set>

	readWriteSPI2(dataByte1);
 8001080:	79fb      	ldrb	r3, [r7, #7]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 fcc0 	bl	8001a08 <readWriteSPI2>
	readWriteSPI2(dataByte2);
 8001088:	79bb      	ldrb	r3, [r7, #6]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fcbc 	bl	8001a08 <readWriteSPI2>
}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}

08001098 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	4603      	mov	r3, r0
 80010a0:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 80010a2:	f7ff ffb3 	bl	800100c <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 80010a6:	2011      	movs	r0, #17
 80010a8:	f7ff ffc0 	bl	800102c <lcdWriteCommand>
    Delay(10000); // Wait for the screen to wake up
 80010ac:	f242 7010 	movw	r0, #10000	; 0x2710
 80010b0:	f000 ff7c 	bl	8001fac <Delay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 80010b4:	203a      	movs	r0, #58	; 0x3a
 80010b6:	f7ff ffb9 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 80010ba:	2005      	movs	r0, #5
 80010bc:	f7ff ffc6 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 80010c0:	2026      	movs	r0, #38	; 0x26
 80010c2:	f7ff ffb3 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 80010c6:	2004      	movs	r0, #4
 80010c8:	f7ff ffc0 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 80010cc:	20f2      	movs	r0, #242	; 0xf2
 80010ce:	f7ff ffad 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 80010d2:	2001      	movs	r0, #1
 80010d4:	f7ff ffba 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 80010d8:	20e0      	movs	r0, #224	; 0xe0
 80010da:	f7ff ffa7 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 80010de:	203f      	movs	r0, #63	; 0x3f
 80010e0:	f7ff ffb4 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 80010e4:	2025      	movs	r0, #37	; 0x25
 80010e6:	f7ff ffb1 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 80010ea:	201c      	movs	r0, #28
 80010ec:	f7ff ffae 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 80010f0:	201e      	movs	r0, #30
 80010f2:	f7ff ffab 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 80010f6:	2020      	movs	r0, #32
 80010f8:	f7ff ffa8 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 80010fc:	2012      	movs	r0, #18
 80010fe:	f7ff ffa5 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8001102:	202a      	movs	r0, #42	; 0x2a
 8001104:	f7ff ffa2 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8001108:	2090      	movs	r0, #144	; 0x90
 800110a:	f7ff ff9f 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 800110e:	2024      	movs	r0, #36	; 0x24
 8001110:	f7ff ff9c 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8001114:	2011      	movs	r0, #17
 8001116:	f7ff ff99 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 800111a:	2000      	movs	r0, #0
 800111c:	f7ff ff96 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8001120:	2000      	movs	r0, #0
 8001122:	f7ff ff93 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ff90 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ff8d 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff8a 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8001138:	20e1      	movs	r0, #225	; 0xe1
 800113a:	f7ff ff77 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 800113e:	2020      	movs	r0, #32
 8001140:	f7ff ff84 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8001144:	2020      	movs	r0, #32
 8001146:	f7ff ff81 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 800114a:	2020      	movs	r0, #32
 800114c:	f7ff ff7e 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8001150:	2020      	movs	r0, #32
 8001152:	f7ff ff7b 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8001156:	2005      	movs	r0, #5
 8001158:	f7ff ff78 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 800115c:	2000      	movs	r0, #0
 800115e:	f7ff ff75 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8001162:	2015      	movs	r0, #21
 8001164:	f7ff ff72 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8001168:	20a7      	movs	r0, #167	; 0xa7
 800116a:	f7ff ff6f 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 800116e:	203d      	movs	r0, #61	; 0x3d
 8001170:	f7ff ff6c 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8001174:	2018      	movs	r0, #24
 8001176:	f7ff ff69 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 800117a:	2025      	movs	r0, #37	; 0x25
 800117c:	f7ff ff66 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8001180:	202a      	movs	r0, #42	; 0x2a
 8001182:	f7ff ff63 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8001186:	202b      	movs	r0, #43	; 0x2b
 8001188:	f7ff ff60 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 800118c:	202b      	movs	r0, #43	; 0x2b
 800118e:	f7ff ff5d 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 8001192:	203a      	movs	r0, #58	; 0x3a
 8001194:	f7ff ff5a 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 8001198:	20b1      	movs	r0, #177	; 0xb1
 800119a:	f7ff ff47 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 800119e:	2008      	movs	r0, #8
 80011a0:	f7ff ff54 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 80011a4:	2008      	movs	r0, #8
 80011a6:	f7ff ff51 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 80011aa:	20b4      	movs	r0, #180	; 0xb4
 80011ac:	f7ff ff3e 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 80011b0:	2007      	movs	r0, #7
 80011b2:	f7ff ff4b 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 80011b6:	20c0      	movs	r0, #192	; 0xc0
 80011b8:	f7ff ff38 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 80011bc:	200a      	movs	r0, #10
 80011be:	f7ff ff45 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 80011c2:	2002      	movs	r0, #2
 80011c4:	f7ff ff42 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 80011c8:	20c1      	movs	r0, #193	; 0xc1
 80011ca:	f7ff ff2f 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 80011ce:	2002      	movs	r0, #2
 80011d0:	f7ff ff3c 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 80011d4:	20c5      	movs	r0, #197	; 0xc5
 80011d6:	f7ff ff29 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 80011da:	2050      	movs	r0, #80	; 0x50
 80011dc:	f7ff ff36 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 80011e0:	205b      	movs	r0, #91	; 0x5b
 80011e2:	f7ff ff33 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 80011e6:	20c7      	movs	r0, #199	; 0xc7
 80011e8:	f7ff ff20 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 80011ec:	2040      	movs	r0, #64	; 0x40
 80011ee:	f7ff ff2d 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 80011f2:	202a      	movs	r0, #42	; 0x2a
 80011f4:	f7ff ff1a 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 80011f8:	2000      	movs	r0, #0
 80011fa:	f7ff ff27 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 80011fe:	2000      	movs	r0, #0
 8001200:	f7ff ff24 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff21 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 800120a:	207f      	movs	r0, #127	; 0x7f
 800120c:	f7ff ff1e 	bl	800104c <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8001210:	202b      	movs	r0, #43	; 0x2b
 8001212:	f7ff ff0b 	bl	800102c <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8001216:	2000      	movs	r0, #0
 8001218:	f7ff ff18 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 800121c:	2000      	movs	r0, #0
 800121e:	f7ff ff15 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff ff12 	bl	800104c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8001228:	207f      	movs	r0, #127	; 0x7f
 800122a:	f7ff ff0f 	bl	800104c <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 800122e:	2036      	movs	r0, #54	; 0x36
 8001230:	f7ff fefc 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8001234:	79fb      	ldrb	r3, [r7, #7]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff ff08 	bl	800104c <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 800123c:	2029      	movs	r0, #41	; 0x29
 800123e:	f7ff fef5 	bl	800102c <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8001242:	202c      	movs	r0, #44	; 0x2c
 8001244:	f7ff fef2 	bl	800102c <lcdWriteCommand>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b084      	sub	sp, #16
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 800125a:	202a      	movs	r0, #42	; 0x2a
 800125c:	f7ff fee6 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001260:	2000      	movs	r0, #0
 8001262:	f7ff fef3 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001266:	2000      	movs	r0, #0
 8001268:	f7ff fef0 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800126c:	2000      	movs	r0, #0
 800126e:	f7ff feed 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001272:	207f      	movs	r0, #127	; 0x7f
 8001274:	f7ff feea 	bl	800104c <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001278:	202b      	movs	r0, #43	; 0x2b
 800127a:	f7ff fed7 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800127e:	2000      	movs	r0, #0
 8001280:	f7ff fee4 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001284:	2000      	movs	r0, #0
 8001286:	f7ff fee1 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800128a:	2000      	movs	r0, #0
 800128c:	f7ff fede 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001290:	207f      	movs	r0, #127	; 0x7f
 8001292:	f7ff fedb 	bl	800104c <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 8001296:	202c      	movs	r0, #44	; 0x2c
 8001298:	f7ff fec8 	bl	800102c <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++) lcdWriteData(colour >> 8, colour);
 800129c:	2300      	movs	r3, #0
 800129e:	81fb      	strh	r3, [r7, #14]
 80012a0:	e00c      	b.n	80012bc <lcdClearDisplay+0x6c>
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	0a1b      	lsrs	r3, r3, #8
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	88fa      	ldrh	r2, [r7, #6]
 80012ac:	b2d2      	uxtb	r2, r2
 80012ae:	4611      	mov	r1, r2
 80012b0:	4618      	mov	r0, r3
 80012b2:	f7ff fedb 	bl	800106c <lcdWriteData>
 80012b6:	89fb      	ldrh	r3, [r7, #14]
 80012b8:	3301      	adds	r3, #1
 80012ba:	81fb      	strh	r3, [r7, #14]
 80012bc:	89fb      	ldrh	r3, [r7, #14]
 80012be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80012c2:	d9ee      	bls.n	80012a2 <lcdClearDisplay+0x52>
}
 80012c4:	bf00      	nop
 80012c6:	3710      	adds	r7, #16
 80012c8:	46bd      	mov	sp, r7
 80012ca:	bd80      	pop	{r7, pc}

080012cc <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	460b      	mov	r3, r1
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	4613      	mov	r3, r2
 80012dc:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80012de:	202a      	movs	r0, #42	; 0x2a
 80012e0:	f7ff fea4 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80012e4:	2000      	movs	r0, #0
 80012e6:	f7ff feb1 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(x);
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff fead 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80012f2:	2000      	movs	r0, #0
 80012f4:	f7ff feaa 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80012f8:	207f      	movs	r0, #127	; 0x7f
 80012fa:	f7ff fea7 	bl	800104c <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 80012fe:	202b      	movs	r0, #43	; 0x2b
 8001300:	f7ff fe94 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001304:	2000      	movs	r0, #0
 8001306:	f7ff fea1 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(y);
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	4618      	mov	r0, r3
 800130e:	f7ff fe9d 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001312:	2000      	movs	r0, #0
 8001314:	f7ff fe9a 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 8001318:	207f      	movs	r0, #127	; 0x7f
 800131a:	f7ff fe97 	bl	800104c <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 800131e:	202c      	movs	r0, #44	; 0x2c
 8001320:	f7ff fe84 	bl	800102c <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8001324:	88bb      	ldrh	r3, [r7, #4]
 8001326:	0a1b      	lsrs	r3, r3, #8
 8001328:	b29b      	uxth	r3, r3
 800132a:	b2db      	uxtb	r3, r3
 800132c:	88ba      	ldrh	r2, [r7, #4]
 800132e:	b2d2      	uxtb	r2, r2
 8001330:	4611      	mov	r1, r2
 8001332:	4618      	mov	r0, r3
 8001334:	f7ff fe9a 	bl	800106c <lcdWriteData>
}
 8001338:	bf00      	nop
 800133a:	3708      	adds	r7, #8
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}

08001340 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8001340:	b590      	push	{r4, r7, lr}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	4604      	mov	r4, r0
 8001348:	4608      	mov	r0, r1
 800134a:	4611      	mov	r1, r2
 800134c:	461a      	mov	r2, r3
 800134e:	4623      	mov	r3, r4
 8001350:	80fb      	strh	r3, [r7, #6]
 8001352:	4603      	mov	r3, r0
 8001354:	80bb      	strh	r3, [r7, #4]
 8001356:	460b      	mov	r3, r1
 8001358:	807b      	strh	r3, [r7, #2]
 800135a:	4613      	mov	r3, r2
 800135c:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 800135e:	883a      	ldrh	r2, [r7, #0]
 8001360:	88bb      	ldrh	r3, [r7, #4]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	b29b      	uxth	r3, r3
 8001366:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 8001368:	887a      	ldrh	r2, [r7, #2]
 800136a:	88fb      	ldrh	r3, [r7, #6]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	b29b      	uxth	r3, r3
 8001370:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 8001372:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001376:	2b00      	cmp	r3, #0
 8001378:	da07      	bge.n	800138a <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	425b      	negs	r3, r3
 800137e:	b29b      	uxth	r3, r3
 8001380:	82fb      	strh	r3, [r7, #22]
 8001382:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001386:	823b      	strh	r3, [r7, #16]
 8001388:	e001      	b.n	800138e <lcdLine+0x4e>
	}
	else stepy = 1;
 800138a:	2301      	movs	r3, #1
 800138c:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 800138e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	da07      	bge.n	80013a6 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 8001396:	8abb      	ldrh	r3, [r7, #20]
 8001398:	425b      	negs	r3, r3
 800139a:	b29b      	uxth	r3, r3
 800139c:	82bb      	strh	r3, [r7, #20]
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	827b      	strh	r3, [r7, #18]
 80013a4:	e001      	b.n	80013aa <lcdLine+0x6a>
	}
	else stepx = 1;
 80013a6:	2301      	movs	r3, #1
 80013a8:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 80013aa:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 80013b2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	88ba      	ldrh	r2, [r7, #4]
 80013c0:	b2d1      	uxtb	r1, r2
 80013c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff81 	bl	80012cc <lcdPlot>

	if (dx > dy) {
 80013ca:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013ce:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013d2:	429a      	cmp	r2, r3
 80013d4:	dd2e      	ble.n	8001434 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 80013d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80013de:	1052      	asrs	r2, r2, #1
 80013e0:	b212      	sxth	r2, r2
 80013e2:	1a9b      	subs	r3, r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 80013e6:	e01e      	b.n	8001426 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	db09      	blt.n	8001402 <lcdLine+0xc2>
			{
				y0 += stepy;
 80013ee:	88ba      	ldrh	r2, [r7, #4]
 80013f0:	8a3b      	ldrh	r3, [r7, #16]
 80013f2:	4413      	add	r3, r2
 80013f4:	b29b      	uxth	r3, r3
 80013f6:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 80013f8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013fc:	68fa      	ldr	r2, [r7, #12]
 80013fe:	1ad3      	subs	r3, r2, r3
 8001400:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 8001402:	88fa      	ldrh	r2, [r7, #6]
 8001404:	8a7b      	ldrh	r3, [r7, #18]
 8001406:	4413      	add	r3, r2
 8001408:	b29b      	uxth	r3, r3
 800140a:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 800140c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	4413      	add	r3, r2
 8001414:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 8001416:	88fb      	ldrh	r3, [r7, #6]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	88ba      	ldrh	r2, [r7, #4]
 800141c:	b2d1      	uxtb	r1, r2
 800141e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff ff53 	bl	80012cc <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1)
 8001426:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800142a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d1da      	bne.n	80013e8 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8001432:	e02d      	b.n	8001490 <lcdLine+0x150>
   			lcdPlot(x0, y0, colour);
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
 8001434:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001438:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800143c:	1052      	asrs	r2, r2, #1
 800143e:	b212      	sxth	r2, r2
 8001440:	1a9b      	subs	r3, r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8001444:	e01e      	b.n	8001484 <lcdLine+0x144>
		{
			if (fraction >= 0)
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	db09      	blt.n	8001460 <lcdLine+0x120>
			{
				x0 += stepx;
 800144c:	88fa      	ldrh	r2, [r7, #6]
 800144e:	8a7b      	ldrh	r3, [r7, #18]
 8001450:	4413      	add	r3, r2
 8001452:	b29b      	uxth	r3, r3
 8001454:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8001456:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	1ad3      	subs	r3, r2, r3
 800145e:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 8001460:	88ba      	ldrh	r2, [r7, #4]
 8001462:	8a3b      	ldrh	r3, [r7, #16]
 8001464:	4413      	add	r3, r2
 8001466:	b29b      	uxth	r3, r3
 8001468:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 800146a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800146e:	68ba      	ldr	r2, [r7, #8]
 8001470:	4413      	add	r3, r2
 8001472:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	b2db      	uxtb	r3, r3
 8001478:	88ba      	ldrh	r2, [r7, #4]
 800147a:	b2d1      	uxtb	r1, r2
 800147c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800147e:	4618      	mov	r0, r3
 8001480:	f7ff ff24 	bl	80012cc <lcdPlot>
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
		while (y0 != y1)
 8001484:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001488:	f9b7 3000 	ldrsh.w	r3, [r7]
 800148c:	429a      	cmp	r2, r3
 800148e:	d1da      	bne.n	8001446 <lcdLine+0x106>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8001490:	bf00      	nop
 8001492:	371c      	adds	r7, #28
 8001494:	46bd      	mov	sp, r7
 8001496:	bd90      	pop	{r4, r7, pc}

08001498 <lcdPlnyTrojuholnik>:
		lcdWriteData(colour >> 8, colour);;
}

// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
 8001498:	b590      	push	{r4, r7, lr}
 800149a:	b087      	sub	sp, #28
 800149c:	af02      	add	r7, sp, #8
 800149e:	4604      	mov	r4, r0
 80014a0:	4608      	mov	r0, r1
 80014a2:	4611      	mov	r1, r2
 80014a4:	461a      	mov	r2, r3
 80014a6:	4623      	mov	r3, r4
 80014a8:	80fb      	strh	r3, [r7, #6]
 80014aa:	4603      	mov	r3, r0
 80014ac:	80bb      	strh	r3, [r7, #4]
 80014ae:	460b      	mov	r3, r1
 80014b0:	807b      	strh	r3, [r7, #2]
 80014b2:	4613      	mov	r3, r2
 80014b4:	803b      	strh	r3, [r7, #0]
	uint16_t pixels;
	uint16_t c = (B-A)/2;
 80014b6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80014ba:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	0fda      	lsrs	r2, r3, #31
 80014c2:	4413      	add	r3, r2
 80014c4:	105b      	asrs	r3, r3, #1
 80014c6:	81bb      	strh	r3, [r7, #12]
	for(pixels = 0; pixels < c+1; pixels++){
 80014c8:	2300      	movs	r3, #0
 80014ca:	81fb      	strh	r3, [r7, #14]
 80014cc:	e01c      	b.n	8001508 <lcdPlnyTrojuholnik+0x70>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
 80014ce:	88fa      	ldrh	r2, [r7, #6]
 80014d0:	89fb      	ldrh	r3, [r7, #14]
 80014d2:	4413      	add	r3, r2
 80014d4:	b29b      	uxth	r3, r3
 80014d6:	b218      	sxth	r0, r3
 80014d8:	887a      	ldrh	r2, [r7, #2]
 80014da:	89fb      	ldrh	r3, [r7, #14]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	b29b      	uxth	r3, r3
 80014e0:	b219      	sxth	r1, r3
 80014e2:	88fa      	ldrh	r2, [r7, #6]
 80014e4:	89fb      	ldrh	r3, [r7, #14]
 80014e6:	4413      	add	r3, r2
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	b21c      	sxth	r4, r3
 80014ec:	88ba      	ldrh	r2, [r7, #4]
 80014ee:	89fb      	ldrh	r3, [r7, #14]
 80014f0:	4413      	add	r3, r2
 80014f2:	b29b      	uxth	r3, r3
 80014f4:	b21a      	sxth	r2, r3
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	9300      	str	r3, [sp, #0]
 80014fa:	4613      	mov	r3, r2
 80014fc:	4622      	mov	r2, r4
 80014fe:	f7ff ff1f 	bl	8001340 <lcdLine>
// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
	uint16_t pixels;
	uint16_t c = (B-A)/2;
	for(pixels = 0; pixels < c+1; pixels++){
 8001502:	89fb      	ldrh	r3, [r7, #14]
 8001504:	3301      	adds	r3, #1
 8001506:	81fb      	strh	r3, [r7, #14]
 8001508:	89fa      	ldrh	r2, [r7, #14]
 800150a:	89bb      	ldrh	r3, [r7, #12]
 800150c:	3301      	adds	r3, #1
 800150e:	429a      	cmp	r2, r3
 8001510:	dbdd      	blt.n	80014ce <lcdPlnyTrojuholnik+0x36>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
	}
	return A;
 8001512:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001516:	4618      	mov	r0, r3
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bd90      	pop	{r4, r7, pc}
 800151e:	bf00      	nop

08001520 <lcdCircle>:
// Draw a circle
// Note:	This is another version of Bresenham's line drawing algorithm.
//			There's plenty of documentation on the web if you are curious
//			how this works.
void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
 8001520:	b590      	push	{r4, r7, lr}
 8001522:	b085      	sub	sp, #20
 8001524:	af00      	add	r7, sp, #0
 8001526:	4604      	mov	r4, r0
 8001528:	4608      	mov	r0, r1
 800152a:	4611      	mov	r1, r2
 800152c:	461a      	mov	r2, r3
 800152e:	4623      	mov	r3, r4
 8001530:	80fb      	strh	r3, [r7, #6]
 8001532:	4603      	mov	r3, r0
 8001534:	80bb      	strh	r3, [r7, #4]
 8001536:	460b      	mov	r3, r1
 8001538:	807b      	strh	r3, [r7, #2]
 800153a:	4613      	mov	r3, r2
 800153c:	803b      	strh	r3, [r7, #0]
	int16_t x = 0, y = radius;
 800153e:	2300      	movs	r3, #0
 8001540:	81fb      	strh	r3, [r7, #14]
 8001542:	887b      	ldrh	r3, [r7, #2]
 8001544:	81bb      	strh	r3, [r7, #12]
	int16_t d = 3 - (2 * radius);
 8001546:	887b      	ldrh	r3, [r7, #2]
 8001548:	005b      	lsls	r3, r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	f1c3 0303 	rsb	r3, r3, #3
 8001550:	b29b      	uxth	r3, r3
 8001552:	817b      	strh	r3, [r7, #10]

    while(x <= y)
 8001554:	e0a5      	b.n	80016a2 <lcdCircle+0x182>
	{
		lcdPlot(xCentre + x, yCentre + y, colour);
 8001556:	88fb      	ldrh	r3, [r7, #6]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	89fb      	ldrh	r3, [r7, #14]
 800155c:	b2db      	uxtb	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b2d8      	uxtb	r0, r3
 8001562:	88bb      	ldrh	r3, [r7, #4]
 8001564:	b2da      	uxtb	r2, r3
 8001566:	89bb      	ldrh	r3, [r7, #12]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	4413      	add	r3, r2
 800156c:	b2db      	uxtb	r3, r3
 800156e:	883a      	ldrh	r2, [r7, #0]
 8001570:	4619      	mov	r1, r3
 8001572:	f7ff feab 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre + y, yCentre + x, colour);
 8001576:	88fb      	ldrh	r3, [r7, #6]
 8001578:	b2da      	uxtb	r2, r3
 800157a:	89bb      	ldrh	r3, [r7, #12]
 800157c:	b2db      	uxtb	r3, r3
 800157e:	4413      	add	r3, r2
 8001580:	b2d8      	uxtb	r0, r3
 8001582:	88bb      	ldrh	r3, [r7, #4]
 8001584:	b2da      	uxtb	r2, r3
 8001586:	89fb      	ldrh	r3, [r7, #14]
 8001588:	b2db      	uxtb	r3, r3
 800158a:	4413      	add	r3, r2
 800158c:	b2db      	uxtb	r3, r3
 800158e:	883a      	ldrh	r2, [r7, #0]
 8001590:	4619      	mov	r1, r3
 8001592:	f7ff fe9b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre - x, yCentre + y, colour);
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	b2da      	uxtb	r2, r3
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	b2d8      	uxtb	r0, r3
 80015a2:	88bb      	ldrh	r3, [r7, #4]
 80015a4:	b2da      	uxtb	r2, r3
 80015a6:	89bb      	ldrh	r3, [r7, #12]
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	4413      	add	r3, r2
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	883a      	ldrh	r2, [r7, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	f7ff fe8b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre + y, yCentre - x, colour);
 80015b6:	88fb      	ldrh	r3, [r7, #6]
 80015b8:	b2da      	uxtb	r2, r3
 80015ba:	89bb      	ldrh	r3, [r7, #12]
 80015bc:	b2db      	uxtb	r3, r3
 80015be:	4413      	add	r3, r2
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	88bb      	ldrh	r3, [r7, #4]
 80015c4:	b2da      	uxtb	r2, r3
 80015c6:	89fb      	ldrh	r3, [r7, #14]
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	883a      	ldrh	r2, [r7, #0]
 80015d0:	4619      	mov	r1, r3
 80015d2:	f7ff fe7b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre - x, yCentre - y, colour);
 80015d6:	88fb      	ldrh	r3, [r7, #6]
 80015d8:	b2da      	uxtb	r2, r3
 80015da:	89fb      	ldrh	r3, [r7, #14]
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	b2d8      	uxtb	r0, r3
 80015e2:	88bb      	ldrh	r3, [r7, #4]
 80015e4:	b2da      	uxtb	r2, r3
 80015e6:	89bb      	ldrh	r3, [r7, #12]
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	883a      	ldrh	r2, [r7, #0]
 80015f0:	4619      	mov	r1, r3
 80015f2:	f7ff fe6b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre - y, yCentre - x, colour);
 80015f6:	88fb      	ldrh	r3, [r7, #6]
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	89bb      	ldrh	r3, [r7, #12]
 80015fc:	b2db      	uxtb	r3, r3
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	b2d8      	uxtb	r0, r3
 8001602:	88bb      	ldrh	r3, [r7, #4]
 8001604:	b2da      	uxtb	r2, r3
 8001606:	89fb      	ldrh	r3, [r7, #14]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	b2db      	uxtb	r3, r3
 800160e:	883a      	ldrh	r2, [r7, #0]
 8001610:	4619      	mov	r1, r3
 8001612:	f7ff fe5b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre + x, yCentre - y, colour);
 8001616:	88fb      	ldrh	r3, [r7, #6]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	89fb      	ldrh	r3, [r7, #14]
 800161c:	b2db      	uxtb	r3, r3
 800161e:	4413      	add	r3, r2
 8001620:	b2d8      	uxtb	r0, r3
 8001622:	88bb      	ldrh	r3, [r7, #4]
 8001624:	b2da      	uxtb	r2, r3
 8001626:	89bb      	ldrh	r3, [r7, #12]
 8001628:	b2db      	uxtb	r3, r3
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	b2db      	uxtb	r3, r3
 800162e:	883a      	ldrh	r2, [r7, #0]
 8001630:	4619      	mov	r1, r3
 8001632:	f7ff fe4b 	bl	80012cc <lcdPlot>
		lcdPlot(xCentre - y, yCentre + x, colour);
 8001636:	88fb      	ldrh	r3, [r7, #6]
 8001638:	b2da      	uxtb	r2, r3
 800163a:	89bb      	ldrh	r3, [r7, #12]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	b2d8      	uxtb	r0, r3
 8001642:	88bb      	ldrh	r3, [r7, #4]
 8001644:	b2da      	uxtb	r2, r3
 8001646:	89fb      	ldrh	r3, [r7, #14]
 8001648:	b2db      	uxtb	r3, r3
 800164a:	4413      	add	r3, r2
 800164c:	b2db      	uxtb	r3, r3
 800164e:	883a      	ldrh	r2, [r7, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fe3b 	bl	80012cc <lcdPlot>

		if (d < 0) d += (4 * x) + 6;
 8001656:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800165a:	2b00      	cmp	r3, #0
 800165c:	da09      	bge.n	8001672 <lcdCircle+0x152>
 800165e:	89fb      	ldrh	r3, [r7, #14]
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	b29a      	uxth	r2, r3
 8001664:	897b      	ldrh	r3, [r7, #10]
 8001666:	4413      	add	r3, r2
 8001668:	b29b      	uxth	r3, r3
 800166a:	3306      	adds	r3, #6
 800166c:	b29b      	uxth	r3, r3
 800166e:	817b      	strh	r3, [r7, #10]
 8001670:	e011      	b.n	8001696 <lcdCircle+0x176>
		else
		{
			d += (4 * (x - y)) + 10;
 8001672:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8001676:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	b29b      	uxth	r3, r3
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	b29a      	uxth	r2, r3
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	4413      	add	r3, r2
 8001686:	b29b      	uxth	r3, r3
 8001688:	330a      	adds	r3, #10
 800168a:	b29b      	uxth	r3, r3
 800168c:	817b      	strh	r3, [r7, #10]
			y -= 1;
 800168e:	89bb      	ldrh	r3, [r7, #12]
 8001690:	3b01      	subs	r3, #1
 8001692:	b29b      	uxth	r3, r3
 8001694:	81bb      	strh	r3, [r7, #12]
		}

		x++;
 8001696:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800169a:	b29b      	uxth	r3, r3
 800169c:	3301      	adds	r3, #1
 800169e:	b29b      	uxth	r3, r3
 80016a0:	81fb      	strh	r3, [r7, #14]
void lcdCircle(int16_t xCentre, int16_t yCentre, int16_t radius, uint16_t colour)
{
	int16_t x = 0, y = radius;
	int16_t d = 3 - (2 * radius);

    while(x <= y)
 80016a2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80016a6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	f77f af53 	ble.w	8001556 <lcdCircle+0x36>
			y -= 1;
		}

		x++;
	}
}
 80016b0:	bf00      	nop
 80016b2:	3714      	adds	r7, #20
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd90      	pop	{r4, r7, pc}

080016b8 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	4603      	mov	r3, r0
 80016cc:	71bb      	strb	r3, [r7, #6]
 80016ce:	460b      	mov	r3, r1
 80016d0:	717b      	strb	r3, [r7, #5]
 80016d2:	4613      	mov	r3, r2
 80016d4:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 80016d6:	202a      	movs	r0, #42	; 0x2a
 80016d8:	f7ff fca8 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80016dc:	2000      	movs	r0, #0
 80016de:	f7ff fcb5 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(x);
 80016e2:	79bb      	ldrb	r3, [r7, #6]
 80016e4:	4618      	mov	r0, r3
 80016e6:	f7ff fcb1 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f7ff fcae 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(x+5);
 80016f0:	79bb      	ldrb	r3, [r7, #6]
 80016f2:	3305      	adds	r3, #5
 80016f4:	b2db      	uxtb	r3, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fca8 	bl	800104c <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 80016fc:	202b      	movs	r0, #43	; 0x2b
 80016fe:	f7ff fc95 	bl	800102c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001702:	2000      	movs	r0, #0
 8001704:	f7ff fca2 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(y);
 8001708:	797b      	ldrb	r3, [r7, #5]
 800170a:	4618      	mov	r0, r3
 800170c:	f7ff fc9e 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001710:	2000      	movs	r0, #0
 8001712:	f7ff fc9b 	bl	800104c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001716:	207f      	movs	r0, #127	; 0x7f
 8001718:	f7ff fc98 	bl	800104c <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 800171c:	202c      	movs	r0, #44	; 0x2c
 800171e:	f7ff fc85 	bl	800102c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001722:	2300      	movs	r3, #0
 8001724:	73fb      	strb	r3, [r7, #15]
 8001726:	e032      	b.n	800178e <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 8001728:	2300      	movs	r3, #0
 800172a:	73bb      	strb	r3, [r7, #14]
 800172c:	e029      	b.n	8001782 <lcdPutCh+0xca>
		{
			if ((font5x8[character][column]) & (1 << row))
 800172e:	79fa      	ldrb	r2, [r7, #7]
 8001730:	7bb9      	ldrb	r1, [r7, #14]
 8001732:	481a      	ldr	r0, [pc, #104]	; (800179c <lcdPutCh+0xe4>)
 8001734:	4613      	mov	r3, r2
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	4413      	add	r3, r2
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4403      	add	r3, r0
 800173e:	440b      	add	r3, r1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	7bfb      	ldrb	r3, [r7, #15]
 8001746:	fa42 f303 	asr.w	r3, r2, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00a      	beq.n	8001768 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	0a1b      	lsrs	r3, r3, #8
 8001756:	b29b      	uxth	r3, r3
 8001758:	b2db      	uxtb	r3, r3
 800175a:	887a      	ldrh	r2, [r7, #2]
 800175c:	b2d2      	uxtb	r2, r2
 800175e:	4611      	mov	r1, r2
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff fc83 	bl	800106c <lcdWriteData>
 8001766:	e009      	b.n	800177c <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 8001768:	8c3b      	ldrh	r3, [r7, #32]
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	b29b      	uxth	r3, r3
 800176e:	b2db      	uxtb	r3, r3
 8001770:	8c3a      	ldrh	r2, [r7, #32]
 8001772:	b2d2      	uxtb	r2, r2
 8001774:	4611      	mov	r1, r2
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc78 	bl	800106c <lcdWriteData>
	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
	{
		for (column = 0; column < 6; column++)
 800177c:	7bbb      	ldrb	r3, [r7, #14]
 800177e:	3301      	adds	r3, #1
 8001780:	73bb      	strb	r3, [r7, #14]
 8001782:	7bbb      	ldrb	r3, [r7, #14]
 8001784:	2b05      	cmp	r3, #5
 8001786:	d9d2      	bls.n	800172e <lcdPutCh+0x76>
	lcdWriteParameter(0x7f);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001788:	7bfb      	ldrb	r3, [r7, #15]
 800178a:	3301      	adds	r3, #1
 800178c:	73fb      	strb	r3, [r7, #15]
 800178e:	7bfb      	ldrb	r3, [r7, #15]
 8001790:	2b07      	cmp	r3, #7
 8001792:	d9c9      	bls.n	8001728 <lcdPutCh+0x70>
			if ((font5x8[character][column]) & (1 << row))
				lcdWriteData(fgColour>>8, fgColour);
			else lcdWriteData(bgColour >> 8, bgColour);
		}
	}
}
 8001794:	bf00      	nop
 8001796:	3714      	adds	r7, #20
 8001798:	46bd      	mov	sp, r7
 800179a:	bd90      	pop	{r4, r7, pc}
 800179c:	08002980 	.word	0x08002980

080017a0 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	460b      	mov	r3, r1
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	4613      	mov	r3, r2
 80017b0:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 80017b2:	797b      	ldrb	r3, [r7, #5]
 80017b4:	02db      	lsls	r3, r3, #11
 80017b6:	b21a      	sxth	r2, r3
 80017b8:	79bb      	ldrb	r3, [r7, #6]
 80017ba:	019b      	lsls	r3, r3, #6
 80017bc:	b21b      	sxth	r3, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	b21a      	sxth	r2, r3
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	b21b      	sxth	r3, r3
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b21b      	sxth	r3, r3
 80017ca:	b29b      	uxth	r3, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bc80      	pop	{r7}
 80017d4:	4770      	bx	lr
 80017d6:	bf00      	nop

080017d8 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 80017d8:	b590      	push	{r4, r7, lr}
 80017da:	b087      	sub	sp, #28
 80017dc:	af02      	add	r7, sp, #8
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	70fb      	strb	r3, [r7, #3]
 80017ea:	460b      	mov	r3, r1
 80017ec:	70bb      	strb	r3, [r7, #2]
 80017ee:	4613      	mov	r3, r2
 80017f0:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	e01c      	b.n	8001836 <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 80017fc:	78fb      	ldrb	r3, [r7, #3]
 80017fe:	2b79      	cmp	r3, #121	; 0x79
 8001800:	d904      	bls.n	800180c <lcdPutS+0x34>
		{
			x = origin;
 8001802:	7bbb      	ldrb	r3, [r7, #14]
 8001804:	70fb      	strb	r3, [r7, #3]
			y += 8;
 8001806:	78bb      	ldrb	r3, [r7, #2]
 8001808:	3308      	adds	r3, #8
 800180a:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 800180c:	78bb      	ldrb	r3, [r7, #2]
 800180e:	2b78      	cmp	r3, #120	; 0x78
 8001810:	d819      	bhi.n	8001846 <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 8001812:	7bfb      	ldrb	r3, [r7, #15]
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	4413      	add	r3, r2
 8001818:	7818      	ldrb	r0, [r3, #0]
 800181a:	883c      	ldrh	r4, [r7, #0]
 800181c:	78ba      	ldrb	r2, [r7, #2]
 800181e:	78f9      	ldrb	r1, [r7, #3]
 8001820:	8c3b      	ldrh	r3, [r7, #32]
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	4623      	mov	r3, r4
 8001826:	f7ff ff47 	bl	80016b8 <lcdPutCh>
		x += 6;
 800182a:	78fb      	ldrb	r3, [r7, #3]
 800182c:	3306      	adds	r3, #6
 800182e:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
	uint8_t origin = x;
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	3301      	adds	r3, #1
 8001834:	73fb      	strb	r3, [r7, #15]
 8001836:	7bfc      	ldrb	r4, [r7, #15]
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f7fe fc9f 	bl	800017c <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	429c      	cmp	r4, r3
 8001842:	d3db      	bcc.n	80017fc <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8001844:	e000      	b.n	8001848 <lcdPutS+0x70>
			x = origin;
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8001846:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 8001848:	bf00      	nop
 800184a:	3714      	adds	r7, #20
 800184c:	46bd      	mov	sp, r7
 800184e:	bd90      	pop	{r4, r7, pc}

08001850 <DMA1_Channel1_IRQHandler>:
		klavesnica = ADC1->DR;
		}
}*/

void DMA1_Channel1_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  if (DMA_GetITStatus(DMA1_IT_TC1))
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff f981 	bl	8000b5c <DMA_GetITStatus>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d01b      	beq.n	8001898 <DMA1_Channel1_IRQHandler+0x48>
  {
	  klavesnica = ADC1ConvertedValue[4];
 8001860:	4b0e      	ldr	r3, [pc, #56]	; (800189c <DMA1_Channel1_IRQHandler+0x4c>)
 8001862:	891b      	ldrh	r3, [r3, #8]
 8001864:	b29a      	uxth	r2, r3
 8001866:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <DMA1_Channel1_IRQHandler+0x50>)
 8001868:	801a      	strh	r2, [r3, #0]
	  hodnota1 = ADC1ConvertedValue[0];
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <DMA1_Channel1_IRQHandler+0x4c>)
 800186c:	881b      	ldrh	r3, [r3, #0]
 800186e:	b29a      	uxth	r2, r3
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <DMA1_Channel1_IRQHandler+0x54>)
 8001872:	801a      	strh	r2, [r3, #0]
	  hodnota2 = ADC1ConvertedValue[1];
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <DMA1_Channel1_IRQHandler+0x4c>)
 8001876:	885b      	ldrh	r3, [r3, #2]
 8001878:	b29a      	uxth	r2, r3
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <DMA1_Channel1_IRQHandler+0x58>)
 800187c:	801a      	strh	r2, [r3, #0]
	  hodnota3 = ADC1ConvertedValue[2];
 800187e:	4b07      	ldr	r3, [pc, #28]	; (800189c <DMA1_Channel1_IRQHandler+0x4c>)
 8001880:	889b      	ldrh	r3, [r3, #4]
 8001882:	b29a      	uxth	r2, r3
 8001884:	4b09      	ldr	r3, [pc, #36]	; (80018ac <DMA1_Channel1_IRQHandler+0x5c>)
 8001886:	801a      	strh	r2, [r3, #0]
	  hodnota4 = ADC1ConvertedValue[3];
 8001888:	4b04      	ldr	r3, [pc, #16]	; (800189c <DMA1_Channel1_IRQHandler+0x4c>)
 800188a:	88db      	ldrh	r3, [r3, #6]
 800188c:	b29a      	uxth	r2, r3
 800188e:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <DMA1_Channel1_IRQHandler+0x60>)
 8001890:	801a      	strh	r2, [r3, #0]

	  DMA_ClearITPendingBit(DMA1_IT_TC1);
 8001892:	2002      	movs	r0, #2
 8001894:	f7ff f98a 	bl	8000bac <DMA_ClearITPendingBit>
  }
}
 8001898:	bf00      	nop
 800189a:	bd80      	pop	{r7, pc}
 800189c:	20000044 	.word	0x20000044
 80018a0:	2000003c 	.word	0x2000003c
 80018a4:	20000034 	.word	0x20000034
 80018a8:	20000036 	.word	0x20000036
 80018ac:	20000050 	.word	0x20000050
 80018b0:	20000054 	.word	0x20000054

080018b4 <main>:

int main(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
	initSPI2();
 80018b8:	f000 f856 	bl	8001968 <initSPI2>
	dma_init();
 80018bc:	f000 fe4c 	bl	8002558 <dma_init>
	initGPIO();
 80018c0:	f000 fe00 	bl	80024c4 <initGPIO>
	initCD_Pin();
 80018c4:	f000 f8e2 	bl	8001a8c <initCD_Pin>
	initCS_Pin();
 80018c8:	f000 f8c2 	bl	8001a50 <initCS_Pin>
	initRES_Pin();
 80018cc:	f000 f914 	bl	8001af8 <initRES_Pin>
	initMenu();
 80018d0:	f000 fd84 	bl	80023dc <initMenu>
	adc_init();
 80018d4:	f000 fe72 	bl	80025bc <adc_init>
	nvic_init();
 80018d8:	f000 fed0 	bl	800267c <nvic_init>
	while (1)
	{
		pohybMenu(klavesnica);
 80018dc:	4b03      	ldr	r3, [pc, #12]	; (80018ec <main+0x38>)
 80018de:	881b      	ldrh	r3, [r3, #0]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fb76 	bl	8001fd4 <pohybMenu>
		//Delay(50);
	}
 80018e8:	e7f8      	b.n	80018dc <main+0x28>
 80018ea:	bf00      	nop
 80018ec:	2000003c 	.word	0x2000003c

080018f0 <TIM7_IRQHandler>:
static uint16_t backlitModulo = 0;
static uint16_t shimmerModulo = 0;
static uint16_t shimmerDutyCycle = SHIMMER_DUTY_CYCLE;

void TIM7_IRQHandler(void)
{
 80018f0:	b598      	push	{r3, r4, r7, lr}
 80018f2:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 80018f4:	2101      	movs	r1, #1
 80018f6:	4817      	ldr	r0, [pc, #92]	; (8001954 <TIM7_IRQHandler+0x64>)
 80018f8:	f7ff fb4e 	bl	8000f98 <TIM_GetITStatus>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b01      	cmp	r3, #1
 8001900:	d126      	bne.n	8001950 <TIM7_IRQHandler+0x60>
	{
		backlitTimer++;
 8001902:	4b15      	ldr	r3, [pc, #84]	; (8001958 <TIM7_IRQHandler+0x68>)
 8001904:	cb18      	ldmia	r3, {r3, r4}
 8001906:	3301      	adds	r3, #1
 8001908:	f144 0400 	adc.w	r4, r4, #0
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <TIM7_IRQHandler+0x68>)
 800190e:	e882 0018 	stmia.w	r2, {r3, r4}

		shimmerModulo = backlitTimer % SHIMMER_PERIOD;
 8001912:	4b11      	ldr	r3, [pc, #68]	; (8001958 <TIM7_IRQHandler+0x68>)
 8001914:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001918:	f242 7210 	movw	r2, #10000	; 0x2710
 800191c:	f04f 0300 	mov.w	r3, #0
 8001920:	f7fe fc34 	bl	800018c <__aeabi_uldivmod>
 8001924:	461c      	mov	r4, r3
 8001926:	4613      	mov	r3, r2
 8001928:	b29a      	uxth	r2, r3
 800192a:	4b0c      	ldr	r3, [pc, #48]	; (800195c <TIM7_IRQHandler+0x6c>)
 800192c:	801a      	strh	r2, [r3, #0]

		if(shimmerDutyCycle < shimmerModulo)
 800192e:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <TIM7_IRQHandler+0x70>)
 8001930:	881a      	ldrh	r2, [r3, #0]
 8001932:	4b0a      	ldr	r3, [pc, #40]	; (800195c <TIM7_IRQHandler+0x6c>)
 8001934:	881b      	ldrh	r3, [r3, #0]
 8001936:	429a      	cmp	r2, r3
 8001938:	d203      	bcs.n	8001942 <TIM7_IRQHandler+0x52>
		{
			gShimmerFlag = 0;
 800193a:	4b0a      	ldr	r3, [pc, #40]	; (8001964 <TIM7_IRQHandler+0x74>)
 800193c:	2200      	movs	r2, #0
 800193e:	701a      	strb	r2, [r3, #0]
 8001940:	e002      	b.n	8001948 <TIM7_IRQHandler+0x58>
		}
		else
		{
			gShimmerFlag = 1;
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <TIM7_IRQHandler+0x74>)
 8001944:	2201      	movs	r2, #1
 8001946:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRRH = GPIO_Pin_0;
				GPIOA->BSRRH = GPIO_Pin_7;
			}
		}*/

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8001948:	2101      	movs	r1, #1
 800194a:	4802      	ldr	r0, [pc, #8]	; (8001954 <TIM7_IRQHandler+0x64>)
 800194c:	f7ff fb4e 	bl	8000fec <TIM_ClearITPendingBit>
	}
}
 8001950:	bf00      	nop
 8001952:	bd98      	pop	{r3, r4, r7, pc}
 8001954:	40001400 	.word	0x40001400
 8001958:	20000028 	.word	0x20000028
 800195c:	20000030 	.word	0x20000030
 8001960:	20000000 	.word	0x20000000
 8001964:	20000024 	.word	0x20000024

08001968 <initSPI2>:
#include "mcu.h"

//TODO rework to STM32L mcu's

void initSPI2(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 800196e:	2101      	movs	r1, #1
 8001970:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8001974:	f7ff fa40 	bl	8000df8 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001978:	2101      	movs	r1, #1
 800197a:	2002      	movs	r0, #2
 800197c:	f7ff fa1e 	bl	8000dbc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 8001980:	2302      	movs	r3, #2
 8001982:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001984:	2300      	movs	r3, #0
 8001986:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001988:	2303      	movs	r3, #3
 800198a:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	77fb      	strb	r3, [r7, #31]

	//PB3 - SPI2_SCK
	//PB4 - SPI2_MISO
	//PB5 - SPI2_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 8001990:	2338      	movs	r3, #56	; 0x38
 8001992:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001994:	f107 0318 	add.w	r3, r7, #24
 8001998:	4619      	mov	r1, r3
 800199a:	4819      	ldr	r0, [pc, #100]	; (8001a00 <initSPI2+0x98>)
 800199c:	f7ff f920 	bl	8000be0 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 80019a0:	2205      	movs	r2, #5
 80019a2:	2103      	movs	r1, #3
 80019a4:	4816      	ldr	r0, [pc, #88]	; (8001a00 <initSPI2+0x98>)
 80019a6:	f7ff f9b1 	bl	8000d0c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 80019aa:	2205      	movs	r2, #5
 80019ac:	2104      	movs	r1, #4
 80019ae:	4814      	ldr	r0, [pc, #80]	; (8001a00 <initSPI2+0x98>)
 80019b0:	f7ff f9ac 	bl	8000d0c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 80019b4:	2205      	movs	r2, #5
 80019b6:	2105      	movs	r1, #5
 80019b8:	4811      	ldr	r0, [pc, #68]	; (8001a00 <initSPI2+0x98>)
 80019ba:	f7ff f9a7 	bl	8000d0c <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80019be:	2300      	movs	r3, #0
 80019c0:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80019c2:	2300      	movs	r3, #0
 80019c4:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 80019c6:	2300      	movs	r3, #0
 80019c8:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 80019ca:	2301      	movs	r3, #1
 80019cc:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 80019ce:	2300      	movs	r3, #0
 80019d0:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 80019d2:	2300      	movs	r3, #0
 80019d4:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 80019d6:	2300      	movs	r3, #0
 80019d8:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 80019da:	f44f 7382 	mov.w	r3, #260	; 0x104
 80019de:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 80019e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019e4:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 80019e6:	1d3b      	adds	r3, r7, #4
 80019e8:	4619      	mov	r1, r3
 80019ea:	4806      	ldr	r0, [pc, #24]	; (8001a04 <initSPI2+0x9c>)
 80019ec:	f7ff fa54 	bl	8000e98 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 80019f0:	2101      	movs	r1, #1
 80019f2:	4804      	ldr	r0, [pc, #16]	; (8001a04 <initSPI2+0x9c>)
 80019f4:	f7ff fa94 	bl	8000f20 <SPI_Cmd>
}
 80019f8:	bf00      	nop
 80019fa:	3720      	adds	r7, #32
 80019fc:	46bd      	mov	sp, r7
 80019fe:	bd80      	pop	{r7, pc}
 8001a00:	40020400 	.word	0x40020400
 8001a04:	40013000 	.word	0x40013000

08001a08 <readWriteSPI2>:

unsigned char readWriteSPI2(unsigned char txData)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 8001a12:	4b0e      	ldr	r3, [pc, #56]	; (8001a4c <readWriteSPI2+0x44>)
 8001a14:	79fa      	ldrb	r2, [r7, #7]
 8001a16:	b292      	uxth	r2, r2
 8001a18:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8001a1a:	bf00      	nop
 8001a1c:	2102      	movs	r1, #2
 8001a1e:	480b      	ldr	r0, [pc, #44]	; (8001a4c <readWriteSPI2+0x44>)
 8001a20:	f7ff fa9e 	bl	8000f60 <SPI_I2S_GetFlagStatus>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d1f8      	bne.n	8001a1c <readWriteSPI2+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8001a2a:	bf00      	nop
 8001a2c:	2101      	movs	r1, #1
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <readWriteSPI2+0x44>)
 8001a30:	f7ff fa96 	bl	8000f60 <SPI_I2S_GetFlagStatus>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d1f8      	bne.n	8001a2c <readWriteSPI2+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 8001a3a:	4b04      	ldr	r3, [pc, #16]	; (8001a4c <readWriteSPI2+0x44>)
 8001a3c:	899b      	ldrh	r3, [r3, #12]
 8001a3e:	b29b      	uxth	r3, r3
 8001a40:	73fb      	strb	r3, [r7, #15]

	return rxData;
 8001a42:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	40013000 	.word	0x40013000

08001a50 <initCS_Pin>:

void initCS_Pin(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2002      	movs	r0, #2
 8001a5a:	f7ff f9af 	bl	8000dbc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001a62:	2303      	movs	r3, #3
 8001a64:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001a66:	2300      	movs	r3, #0
 8001a68:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001a70:	2301      	movs	r3, #1
 8001a72:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 8001a74:	463b      	mov	r3, r7
 8001a76:	4619      	mov	r1, r3
 8001a78:	4803      	ldr	r0, [pc, #12]	; (8001a88 <initCS_Pin+0x38>)
 8001a7a:	f7ff f8b1 	bl	8000be0 <GPIO_Init>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	40020400 	.word	0x40020400

08001a8c <initCD_Pin>:

void initCD_Pin(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001a92:	2101      	movs	r1, #1
 8001a94:	2001      	movs	r0, #1
 8001a96:	f7ff f991 	bl	8000dbc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 8001aa6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001aaa:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001aac:	2301      	movs	r3, #1
 8001aae:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	4803      	ldr	r0, [pc, #12]	; (8001ac4 <initCD_Pin+0x38>)
 8001ab6:	f7ff f893 	bl	8000be0 <GPIO_Init>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	40020000 	.word	0x40020000

08001ac8 <cd_set>:

void cd_set(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <cd_set+0x14>)
 8001ace:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ad2:	831a      	strh	r2, [r3, #24]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40020000 	.word	0x40020000

08001ae0 <cd_reset>:

void cd_reset(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <cd_reset+0x14>)
 8001ae6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001aea:	835a      	strh	r2, [r3, #26]
}
 8001aec:	bf00      	nop
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	40020000 	.word	0x40020000

08001af8 <initRES_Pin>:

void initRES_Pin(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 8001afe:	2101      	movs	r1, #1
 8001b00:	2001      	movs	r0, #1
 8001b02:	f7ff f95b 	bl	8000dbc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001b06:	2300      	movs	r3, #0
 8001b08:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8001b0e:	2300      	movs	r3, #0
 8001b10:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 8001b12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001b16:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001b1c:	463b      	mov	r3, r7
 8001b1e:	4619      	mov	r1, r3
 8001b20:	4803      	ldr	r0, [pc, #12]	; (8001b30 <initRES_Pin+0x38>)
 8001b22:	f7ff f85d 	bl	8000be0 <GPIO_Init>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40020000 	.word	0x40020000

08001b34 <res_set>:

void res_set(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8001b38:	4b03      	ldr	r3, [pc, #12]	; (8001b48 <res_set+0x14>)
 8001b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b3e:	831a      	strh	r2, [r3, #24]
}
 8001b40:	bf00      	nop
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bc80      	pop	{r7}
 8001b46:	4770      	bx	lr
 8001b48:	40020000 	.word	0x40020000

08001b4c <res_reset>:

void res_reset(void)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 8001b50:	4b03      	ldr	r3, [pc, #12]	; (8001b60 <res_reset+0x14>)
 8001b52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b56:	835a      	strh	r2, [r3, #26]
}
 8001b58:	bf00      	nop
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr
 8001b60:	40020000 	.word	0x40020000

08001b64 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b9c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001b68:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001b6a:	e003      	b.n	8001b74 <LoopCopyDataInit>

08001b6c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 8001b6e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001b70:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001b72:	3104      	adds	r1, #4

08001b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 8001b76:	4b0c      	ldr	r3, [pc, #48]	; (8001ba8 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 8001b78:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001b7a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001b7c:	d3f6      	bcc.n	8001b6c <CopyDataInit>
  ldr r2, =_sbss
 8001b7e:	4a0b      	ldr	r2, [pc, #44]	; (8001bac <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 8001b80:	e002      	b.n	8001b88 <LoopFillZerobss>

08001b82 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001b84:	f842 3b04 	str.w	r3, [r2], #4

08001b88 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001b88:	4b09      	ldr	r3, [pc, #36]	; (8001bb0 <LoopFillZerobss+0x28>)
  cmp r2, r3
 8001b8a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001b8c:	d3f9      	bcc.n	8001b82 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b8e:	f000 f949 	bl	8001e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b92:	f000 fe8d 	bl	80028b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b96:	f7ff fe8d 	bl	80018b4 <main>
  bx lr
 8001b9a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b9c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 8001ba0:	08002f90 	.word	0x08002f90
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 8001ba4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001ba8:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 8001bac:	20000008 	.word	0x20000008
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 8001bb0:	20000058 	.word	0x20000058

08001bb4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC1_IRQHandler>
	...

08001bb8 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
}
 8001bbc:	bf00      	nop
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001bc8:	e7fe      	b.n	8001bc8 <HardFault_Handler+0x4>
 8001bca:	bf00      	nop

08001bcc <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8001bd0:	e7fe      	b.n	8001bd0 <MemManage_Handler+0x4>
 8001bd2:	bf00      	nop

08001bd4 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001bd8:	e7fe      	b.n	8001bd8 <BusFault_Handler+0x4>
 8001bda:	bf00      	nop

08001bdc <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8001be0:	e7fe      	b.n	8001be0 <UsageFault_Handler+0x4>
 8001be2:	bf00      	nop

08001be4 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
}
 8001be8:	bf00      	nop
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
}
 8001bf4:	bf00      	nop
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bc80      	pop	{r7}
 8001bfa:	4770      	bx	lr

08001bfc <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <otvorInfo>:
#include "stm32l1xx.h"
#include <stdio.h>
#include <stdlib.h>


void otvorInfo(){
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b084      	sub	sp, #16
 8001c18:	af02      	add	r7, sp, #8
	subMenu = 1;
 8001c1a:	4b2c      	ldr	r3, [pc, #176]	; (8001ccc <otvorInfo+0xb8>)
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
	char str[4];
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001c20:	22ff      	movs	r2, #255	; 0xff
 8001c22:	21ff      	movs	r1, #255	; 0xff
 8001c24:	20ff      	movs	r0, #255	; 0xff
 8001c26:	f7ff fdbb 	bl	80017a0 <decodeRgbValue>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fb0f 	bl	8001250 <lcdClearDisplay>
	//while(1){

	/*if ((klavesnica >= 3440) && (klavesnica <= 3480)){
		break;
	}*/
	sprintf(str,"%d", hodnota1);
 8001c32:	4b27      	ldr	r3, [pc, #156]	; (8001cd0 <otvorInfo+0xbc>)
 8001c34:	881b      	ldrh	r3, [r3, #0]
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	461a      	mov	r2, r3
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	4925      	ldr	r1, [pc, #148]	; (8001cd4 <otvorInfo+0xc0>)
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f000 fe20 	bl	8002884 <siprintf>
	lcdPutS(str, 23, 17, 0x0000, 0xFFFF);
 8001c44:	1d38      	adds	r0, r7, #4
 8001c46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c4a:	9300      	str	r3, [sp, #0]
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	2211      	movs	r2, #17
 8001c50:	2117      	movs	r1, #23
 8001c52:	f7ff fdc1 	bl	80017d8 <lcdPutS>
	sprintf(str,"%d", hodnota2);
 8001c56:	4b20      	ldr	r3, [pc, #128]	; (8001cd8 <otvorInfo+0xc4>)
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	b29b      	uxth	r3, r3
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	1d3b      	adds	r3, r7, #4
 8001c60:	491c      	ldr	r1, [pc, #112]	; (8001cd4 <otvorInfo+0xc0>)
 8001c62:	4618      	mov	r0, r3
 8001c64:	f000 fe0e 	bl	8002884 <siprintf>
	lcdPutS(str, 23, 27, 0x0000, 0xFFFF);
 8001c68:	1d38      	adds	r0, r7, #4
 8001c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c6e:	9300      	str	r3, [sp, #0]
 8001c70:	2300      	movs	r3, #0
 8001c72:	221b      	movs	r2, #27
 8001c74:	2117      	movs	r1, #23
 8001c76:	f7ff fdaf 	bl	80017d8 <lcdPutS>
	sprintf(str,"%d", hodnota3);
 8001c7a:	4b18      	ldr	r3, [pc, #96]	; (8001cdc <otvorInfo+0xc8>)
 8001c7c:	881b      	ldrh	r3, [r3, #0]
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	461a      	mov	r2, r3
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	4913      	ldr	r1, [pc, #76]	; (8001cd4 <otvorInfo+0xc0>)
 8001c86:	4618      	mov	r0, r3
 8001c88:	f000 fdfc 	bl	8002884 <siprintf>
	lcdPutS(str, 23, 37, 0x0000, 0xFFFF);
 8001c8c:	1d38      	adds	r0, r7, #4
 8001c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	2300      	movs	r3, #0
 8001c96:	2225      	movs	r2, #37	; 0x25
 8001c98:	2117      	movs	r1, #23
 8001c9a:	f7ff fd9d 	bl	80017d8 <lcdPutS>
	sprintf(str,"%d", hodnota4);
 8001c9e:	4b10      	ldr	r3, [pc, #64]	; (8001ce0 <otvorInfo+0xcc>)
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	b29b      	uxth	r3, r3
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	1d3b      	adds	r3, r7, #4
 8001ca8:	490a      	ldr	r1, [pc, #40]	; (8001cd4 <otvorInfo+0xc0>)
 8001caa:	4618      	mov	r0, r3
 8001cac:	f000 fdea 	bl	8002884 <siprintf>
	lcdPutS(str, 23, 47, 0x0000, 0xFFFF);
 8001cb0:	1d38      	adds	r0, r7, #4
 8001cb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	2300      	movs	r3, #0
 8001cba:	222f      	movs	r2, #47	; 0x2f
 8001cbc:	2117      	movs	r1, #23
 8001cbe:	f7ff fd8b 	bl	80017d8 <lcdPutS>
	//lcdFilledRectangle(20, 15, 20, 40, decodeRgbValue(31, 31, 31));
	//}
}
 8001cc2:	bf00      	nop
 8001cc4:	3708      	adds	r7, #8
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
 8001cca:	bf00      	nop
 8001ccc:	20000040 	.word	0x20000040
 8001cd0:	20000034 	.word	0x20000034
 8001cd4:	08002914 	.word	0x08002914
 8001cd8:	20000036 	.word	0x20000036
 8001cdc:	20000050 	.word	0x20000050
 8001ce0:	20000054 	.word	0x20000054

08001ce4 <otvorRevers>:

void otvorRevers(){
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af02      	add	r7, sp, #8
	subMenu = 1;
 8001cea:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <otvorRevers+0x78>)
 8001cec:	2201      	movs	r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001cf0:	22ff      	movs	r2, #255	; 0xff
 8001cf2:	21ff      	movs	r1, #255	; 0xff
 8001cf4:	20ff      	movs	r0, #255	; 0xff
 8001cf6:	f7ff fd53 	bl	80017a0 <decodeRgbValue>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff faa7 	bl	8001250 <lcdClearDisplay>
	lcdPutS("Otvoril som Revers",23, 17, 0x0000, 0xFFFF);
 8001d02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2211      	movs	r2, #17
 8001d0c:	2117      	movs	r1, #23
 8001d0e:	4814      	ldr	r0, [pc, #80]	; (8001d60 <otvorRevers+0x7c>)
 8001d10:	f7ff fd62 	bl	80017d8 <lcdPutS>

	lcdCircle(64, 84, 22, decodeRgbValue(31, 0, 0));
 8001d14:	2200      	movs	r2, #0
 8001d16:	2100      	movs	r1, #0
 8001d18:	201f      	movs	r0, #31
 8001d1a:	f7ff fd41 	bl	80017a0 <decodeRgbValue>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2216      	movs	r2, #22
 8001d22:	2154      	movs	r1, #84	; 0x54
 8001d24:	2040      	movs	r0, #64	; 0x40
 8001d26:	f7ff fbfb 	bl	8001520 <lcdCircle>
	lcdCircle(64, 84, 30, decodeRgbValue(0, 31, 0));
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	211f      	movs	r1, #31
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fd36 	bl	80017a0 <decodeRgbValue>
 8001d34:	4603      	mov	r3, r0
 8001d36:	221e      	movs	r2, #30
 8001d38:	2154      	movs	r1, #84	; 0x54
 8001d3a:	2040      	movs	r0, #64	; 0x40
 8001d3c:	f7ff fbf0 	bl	8001520 <lcdCircle>
	lcdCircle(64, 84, 38, decodeRgbValue(0, 0, 31));
 8001d40:	221f      	movs	r2, #31
 8001d42:	2100      	movs	r1, #0
 8001d44:	2000      	movs	r0, #0
 8001d46:	f7ff fd2b 	bl	80017a0 <decodeRgbValue>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2226      	movs	r2, #38	; 0x26
 8001d4e:	2154      	movs	r1, #84	; 0x54
 8001d50:	2040      	movs	r0, #64	; 0x40
 8001d52:	f7ff fbe5 	bl	8001520 <lcdCircle>
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000040 	.word	0x20000040
 8001d60:	08002918 	.word	0x08002918

08001d64 <otvorExpo>:

void otvorExpo(){
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b082      	sub	sp, #8
 8001d68:	af02      	add	r7, sp, #8
	subMenu = 1;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <otvorExpo+0x38>)
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001d70:	22ff      	movs	r2, #255	; 0xff
 8001d72:	21ff      	movs	r1, #255	; 0xff
 8001d74:	20ff      	movs	r0, #255	; 0xff
 8001d76:	f7ff fd13 	bl	80017a0 <decodeRgbValue>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f7ff fa67 	bl	8001250 <lcdClearDisplay>
	lcdPutS("Otvoril som Expo",23, 17, 0x0000, 0xFFFF);
 8001d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2211      	movs	r2, #17
 8001d8c:	2117      	movs	r1, #23
 8001d8e:	4804      	ldr	r0, [pc, #16]	; (8001da0 <otvorExpo+0x3c>)
 8001d90:	f7ff fd22 	bl	80017d8 <lcdPutS>
}
 8001d94:	bf00      	nop
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000040 	.word	0x20000040
 8001da0:	0800292c 	.word	0x0800292c

08001da4 <otvorMix>:

void otvorMix(){
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af02      	add	r7, sp, #8
	subMenu = 1;
 8001daa:	4b0c      	ldr	r3, [pc, #48]	; (8001ddc <otvorMix+0x38>)
 8001dac:	2201      	movs	r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001db0:	22ff      	movs	r2, #255	; 0xff
 8001db2:	21ff      	movs	r1, #255	; 0xff
 8001db4:	20ff      	movs	r0, #255	; 0xff
 8001db6:	f7ff fcf3 	bl	80017a0 <decodeRgbValue>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fa47 	bl	8001250 <lcdClearDisplay>
	lcdPutS("Otvoril som Mix",23, 17, 0x0000, 0xFFFF);
 8001dc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc6:	9300      	str	r3, [sp, #0]
 8001dc8:	2300      	movs	r3, #0
 8001dca:	2211      	movs	r2, #17
 8001dcc:	2117      	movs	r1, #23
 8001dce:	4804      	ldr	r0, [pc, #16]	; (8001de0 <otvorMix+0x3c>)
 8001dd0:	f7ff fd02 	bl	80017d8 <lcdPutS>
}
 8001dd4:	bf00      	nop
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	20000040 	.word	0x20000040
 8001de0:	08002940 	.word	0x08002940

08001de4 <otvorEPA>:

void otvorEPA(){
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b082      	sub	sp, #8
 8001de8:	af02      	add	r7, sp, #8
	subMenu = 1;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <otvorEPA+0x38>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	601a      	str	r2, [r3, #0]
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001df0:	22ff      	movs	r2, #255	; 0xff
 8001df2:	21ff      	movs	r1, #255	; 0xff
 8001df4:	20ff      	movs	r0, #255	; 0xff
 8001df6:	f7ff fcd3 	bl	80017a0 <decodeRgbValue>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fa27 	bl	8001250 <lcdClearDisplay>
	lcdPutS("Otvoril som EPA",23, 17, 0x0000, 0xFFFF);
 8001e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	2300      	movs	r3, #0
 8001e0a:	2211      	movs	r2, #17
 8001e0c:	2117      	movs	r1, #23
 8001e0e:	4804      	ldr	r0, [pc, #16]	; (8001e20 <otvorEPA+0x3c>)
 8001e10:	f7ff fce2 	bl	80017d8 <lcdPutS>
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
 8001e1a:	bf00      	nop
 8001e1c:	20000040 	.word	0x20000040
 8001e20:	08002950 	.word	0x08002950

08001e24 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001e28:	4a15      	ldr	r2, [pc, #84]	; (8001e80 <SystemInit+0x5c>)
 8001e2a:	4b15      	ldr	r3, [pc, #84]	; (8001e80 <SystemInit+0x5c>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e32:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001e34:	4912      	ldr	r1, [pc, #72]	; (8001e80 <SystemInit+0x5c>)
 8001e36:	4b12      	ldr	r3, [pc, #72]	; (8001e80 <SystemInit+0x5c>)
 8001e38:	689a      	ldr	r2, [r3, #8]
 8001e3a:	4b12      	ldr	r3, [pc, #72]	; (8001e84 <SystemInit+0x60>)
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001e40:	4a0f      	ldr	r2, [pc, #60]	; (8001e80 <SystemInit+0x5c>)
 8001e42:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <SystemInit+0x5c>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001e4a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001e4e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e50:	4a0b      	ldr	r2, [pc, #44]	; (8001e80 <SystemInit+0x5c>)
 8001e52:	4b0b      	ldr	r3, [pc, #44]	; (8001e80 <SystemInit+0x5c>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001e5c:	4a08      	ldr	r2, [pc, #32]	; (8001e80 <SystemInit+0x5c>)
 8001e5e:	4b08      	ldr	r3, [pc, #32]	; (8001e80 <SystemInit+0x5c>)
 8001e60:	689b      	ldr	r3, [r3, #8]
 8001e62:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001e66:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e68:	4b05      	ldr	r3, [pc, #20]	; (8001e80 <SystemInit+0x5c>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001e6e:	f000 f80d 	bl	8001e8c <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SystemInit+0x64>)
 8001e74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e78:	609a      	str	r2, [r3, #8]
#endif
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023800 	.word	0x40023800
 8001e84:	88ffc00c 	.word	0x88ffc00c
 8001e88:	e000ed00 	.word	0xe000ed00

08001e8c <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
 8001e96:	2300      	movs	r3, #0
 8001e98:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001e9a:	4a41      	ldr	r2, [pc, #260]	; (8001fa0 <SetSysClock+0x114>)
 8001e9c:	4b40      	ldr	r3, [pc, #256]	; (8001fa0 <SetSysClock+0x114>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ea4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ea6:	4b3e      	ldr	r3, [pc, #248]	; (8001fa0 <SetSysClock+0x114>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eae:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d103      	bne.n	8001ec4 <SetSysClock+0x38>
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001ec2:	d1f0      	bne.n	8001ea6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <SetSysClock+0x114>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d002      	beq.n	8001ed6 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	603b      	str	r3, [r7, #0]
 8001ed4:	e001      	b.n	8001eda <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d15a      	bne.n	8001f96 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001ee0:	4a30      	ldr	r2, [pc, #192]	; (8001fa4 <SetSysClock+0x118>)
 8001ee2:	4b30      	ldr	r3, [pc, #192]	; (8001fa4 <SetSysClock+0x118>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f043 0304 	orr.w	r3, r3, #4
 8001eea:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001eec:	4a2d      	ldr	r2, [pc, #180]	; (8001fa4 <SetSysClock+0x118>)
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <SetSysClock+0x118>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f043 0302 	orr.w	r3, r3, #2
 8001ef6:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001ef8:	4a2a      	ldr	r2, [pc, #168]	; (8001fa4 <SetSysClock+0x118>)
 8001efa:	4b2a      	ldr	r3, [pc, #168]	; (8001fa4 <SetSysClock+0x118>)
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f043 0301 	orr.w	r3, r3, #1
 8001f02:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <SetSysClock+0x114>)
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <SetSysClock+0x114>)
 8001f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f0e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001f10:	4b25      	ldr	r3, [pc, #148]	; (8001fa8 <SetSysClock+0x11c>)
 8001f12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f16:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001f18:	bf00      	nop
 8001f1a:	4b23      	ldr	r3, [pc, #140]	; (8001fa8 <SetSysClock+0x11c>)
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0310 	and.w	r3, r3, #16
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f9      	bne.n	8001f1a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001f26:	4a1e      	ldr	r2, [pc, #120]	; (8001fa0 <SetSysClock+0x114>)
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <SetSysClock+0x114>)
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001f2e:	4a1c      	ldr	r2, [pc, #112]	; (8001fa0 <SetSysClock+0x114>)
 8001f30:	4b1b      	ldr	r3, [pc, #108]	; (8001fa0 <SetSysClock+0x114>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001f36:	4a1a      	ldr	r2, [pc, #104]	; (8001fa0 <SetSysClock+0x114>)
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <SetSysClock+0x114>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001f3e:	4a18      	ldr	r2, [pc, #96]	; (8001fa0 <SetSysClock+0x114>)
 8001f40:	4b17      	ldr	r3, [pc, #92]	; (8001fa0 <SetSysClock+0x114>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001f48:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001f4a:	4a15      	ldr	r2, [pc, #84]	; (8001fa0 <SetSysClock+0x114>)
 8001f4c:	4b14      	ldr	r3, [pc, #80]	; (8001fa0 <SetSysClock+0x114>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001f54:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <SetSysClock+0x114>)
 8001f58:	4b11      	ldr	r3, [pc, #68]	; (8001fa0 <SetSysClock+0x114>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f60:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001f62:	bf00      	nop
 8001f64:	4b0e      	ldr	r3, [pc, #56]	; (8001fa0 <SetSysClock+0x114>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d0f9      	beq.n	8001f64 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <SetSysClock+0x114>)
 8001f72:	4b0b      	ldr	r3, [pc, #44]	; (8001fa0 <SetSysClock+0x114>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	f023 0303 	bic.w	r3, r3, #3
 8001f7a:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001f7c:	4a08      	ldr	r2, [pc, #32]	; (8001fa0 <SetSysClock+0x114>)
 8001f7e:	4b08      	ldr	r3, [pc, #32]	; (8001fa0 <SetSysClock+0x114>)
 8001f80:	689b      	ldr	r3, [r3, #8]
 8001f82:	f043 0303 	orr.w	r3, r3, #3
 8001f86:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001f88:	bf00      	nop
 8001f8a:	4b05      	ldr	r3, [pc, #20]	; (8001fa0 <SetSysClock+0x114>)
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	f003 030c 	and.w	r3, r3, #12
 8001f92:	2b0c      	cmp	r3, #12
 8001f94:	d1f9      	bne.n	8001f8a <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001f96:	bf00      	nop
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bc80      	pop	{r7}
 8001f9e:	4770      	bx	lr
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40023c00 	.word	0x40023c00
 8001fa8:	40007000 	.word	0x40007000

08001fac <Delay>:
#include "ili9163.h"
#include <stddef.h>
#include "stm32l1xx.h"

void Delay(uint16_t n)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b085      	sub	sp, #20
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n*2;
 8001fb6:	88fb      	ldrh	r3, [r7, #6]
 8001fb8:	005b      	lsls	r3, r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
	while(nl--);
 8001fbc:	bf00      	nop
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	1e5a      	subs	r2, r3, #1
 8001fc2:	60fa      	str	r2, [r7, #12]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d1fa      	bne.n	8001fbe <Delay+0x12>
	return;
 8001fc8:	bf00      	nop
}
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc80      	pop	{r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop

08001fd4 <pohybMenu>:

void pohybMenu(uint16_t klavesnica){
 8001fd4:	b5b0      	push	{r4, r5, r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af02      	add	r7, sp, #8
 8001fda:	4603      	mov	r3, r0
 8001fdc:	80fb      	strh	r3, [r7, #6]
	if (subMenu == 0){
 8001fde:	4b53      	ldr	r3, [pc, #332]	; (800212c <pohybMenu+0x158>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d14a      	bne.n	800207c <pohybMenu+0xa8>
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
 8001fe6:	88fb      	ldrh	r3, [r7, #6]
 8001fe8:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 8001fec:	d307      	bcc.n	8001ffe <pohybMenu+0x2a>
 8001fee:	88fb      	ldrh	r3, [r7, #6]
 8001ff0:	f640 0234 	movw	r2, #2100	; 0x834
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d802      	bhi.n	8001ffe <pohybMenu+0x2a>
			posunSipkyHore();
 8001ff8:	f000 f954 	bl	80022a4 <posunSipkyHore>
 8001ffc:	e03e      	b.n	800207c <pohybMenu+0xa8>
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
 8001ffe:	88fb      	ldrh	r3, [r7, #6]
 8002000:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8002004:	d32c      	bcc.n	8002060 <pohybMenu+0x8c>
 8002006:	88fb      	ldrh	r3, [r7, #6]
 8002008:	f640 327c 	movw	r2, #2940	; 0xb7c
 800200c:	4293      	cmp	r3, r2
 800200e:	d827      	bhi.n	8002060 <pohybMenu+0x8c>
			if (aktualneA == 12){
 8002010:	4b47      	ldr	r3, [pc, #284]	; (8002130 <pohybMenu+0x15c>)
 8002012:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002016:	2b0c      	cmp	r3, #12
 8002018:	d102      	bne.n	8002020 <pohybMenu+0x4c>
				otvorInfo();
 800201a:	f7ff fdfb 	bl	8001c14 <otvorInfo>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800201e:	e02c      	b.n	800207a <pohybMenu+0xa6>
				otvorInfo();
			}
			else if (aktualneA == 32){
 8002020:	4b43      	ldr	r3, [pc, #268]	; (8002130 <pohybMenu+0x15c>)
 8002022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002026:	2b20      	cmp	r3, #32
 8002028:	d102      	bne.n	8002030 <pohybMenu+0x5c>
				otvorRevers();
 800202a:	f7ff fe5b 	bl	8001ce4 <otvorRevers>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800202e:	e024      	b.n	800207a <pohybMenu+0xa6>
				otvorInfo();
			}
			else if (aktualneA == 32){
				otvorRevers();
			}
			else if (aktualneA == 52){
 8002030:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <pohybMenu+0x15c>)
 8002032:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002036:	2b34      	cmp	r3, #52	; 0x34
 8002038:	d102      	bne.n	8002040 <pohybMenu+0x6c>
				otvorExpo();
 800203a:	f7ff fe93 	bl	8001d64 <otvorExpo>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800203e:	e01c      	b.n	800207a <pohybMenu+0xa6>
				otvorRevers();
			}
			else if (aktualneA == 52){
				otvorExpo();
			}
			else if (aktualneA == 72){
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <pohybMenu+0x15c>)
 8002042:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002046:	2b48      	cmp	r3, #72	; 0x48
 8002048:	d102      	bne.n	8002050 <pohybMenu+0x7c>
				otvorMix();
 800204a:	f7ff feab 	bl	8001da4 <otvorMix>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800204e:	e014      	b.n	800207a <pohybMenu+0xa6>
				otvorExpo();
			}
			else if (aktualneA == 72){
				otvorMix();
			}
			else if (aktualneA == 92){
 8002050:	4b37      	ldr	r3, [pc, #220]	; (8002130 <pohybMenu+0x15c>)
 8002052:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002056:	2b5c      	cmp	r3, #92	; 0x5c
 8002058:	d10f      	bne.n	800207a <pohybMenu+0xa6>
				otvorEPA();
 800205a:	f7ff fec3 	bl	8001de4 <otvorEPA>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800205e:	e00c      	b.n	800207a <pohybMenu+0xa6>
			}
			else if (aktualneA == 92){
				otvorEPA();
			}
		}
		else if ((klavesnica >= 3630) && (klavesnica <= 3690)){
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	f640 622d 	movw	r2, #3629	; 0xe2d
 8002066:	4293      	cmp	r3, r2
 8002068:	d908      	bls.n	800207c <pohybMenu+0xa8>
 800206a:	88fb      	ldrh	r3, [r7, #6]
 800206c:	f640 626a 	movw	r2, #3690	; 0xe6a
 8002070:	4293      	cmp	r3, r2
 8002072:	d803      	bhi.n	800207c <pohybMenu+0xa8>
			posunSipkyDole();
 8002074:	f000 f86a 	bl	800214c <posunSipkyDole>
 8002078:	e000      	b.n	800207c <pohybMenu+0xa8>
	if (subMenu == 0){
		if ((klavesnica >= 1952) && (klavesnica <= 2100)){
			posunSipkyHore();
		}
		else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
			if (aktualneA == 12){
 800207a:	bf00      	nop
		}
		else if ((klavesnica >= 3630) && (klavesnica <= 3690)){
			posunSipkyDole();
		}
	}
	if ((klavesnica >= 3440) && (klavesnica <= 3480)){
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8002082:	d34e      	bcc.n	8002122 <pohybMenu+0x14e>
 8002084:	88fb      	ldrh	r3, [r7, #6]
 8002086:	f640 5298 	movw	r2, #3480	; 0xd98
 800208a:	4293      	cmp	r3, r2
 800208c:	d849      	bhi.n	8002122 <pohybMenu+0x14e>
		lcdClearDisplay(decodeRgbValue(255, 255, 255));
 800208e:	22ff      	movs	r2, #255	; 0xff
 8002090:	21ff      	movs	r1, #255	; 0xff
 8002092:	20ff      	movs	r0, #255	; 0xff
 8002094:	f7ff fb84 	bl	80017a0 <decodeRgbValue>
 8002098:	4603      	mov	r3, r0
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff f8d8 	bl	8001250 <lcdClearDisplay>
		lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 80020a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	2211      	movs	r2, #17
 80020aa:	2114      	movs	r1, #20
 80020ac:	4821      	ldr	r0, [pc, #132]	; (8002134 <pohybMenu+0x160>)
 80020ae:	f7ff fb93 	bl	80017d8 <lcdPutS>
		lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 80020b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b6:	9300      	str	r3, [sp, #0]
 80020b8:	2300      	movs	r3, #0
 80020ba:	2225      	movs	r2, #37	; 0x25
 80020bc:	2114      	movs	r1, #20
 80020be:	481e      	ldr	r0, [pc, #120]	; (8002138 <pohybMenu+0x164>)
 80020c0:	f7ff fb8a 	bl	80017d8 <lcdPutS>
		lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9300      	str	r3, [sp, #0]
 80020ca:	2300      	movs	r3, #0
 80020cc:	2239      	movs	r2, #57	; 0x39
 80020ce:	2114      	movs	r1, #20
 80020d0:	481a      	ldr	r0, [pc, #104]	; (800213c <pohybMenu+0x168>)
 80020d2:	f7ff fb81 	bl	80017d8 <lcdPutS>
		lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 80020d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020da:	9300      	str	r3, [sp, #0]
 80020dc:	2300      	movs	r3, #0
 80020de:	224d      	movs	r2, #77	; 0x4d
 80020e0:	2114      	movs	r1, #20
 80020e2:	4817      	ldr	r0, [pc, #92]	; (8002140 <pohybMenu+0x16c>)
 80020e4:	f7ff fb78 	bl	80017d8 <lcdPutS>
		lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 80020e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	2261      	movs	r2, #97	; 0x61
 80020f2:	2114      	movs	r1, #20
 80020f4:	4813      	ldr	r0, [pc, #76]	; (8002144 <pohybMenu+0x170>)
 80020f6:	f7ff fb6f 	bl	80017d8 <lcdPutS>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 80020fa:	4b0d      	ldr	r3, [pc, #52]	; (8002130 <pohybMenu+0x15c>)
 80020fc:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002100:	4b11      	ldr	r3, [pc, #68]	; (8002148 <pohybMenu+0x174>)
 8002102:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002106:	2200      	movs	r2, #0
 8002108:	2100      	movs	r1, #0
 800210a:	2000      	movs	r0, #0
 800210c:	f7ff fb48 	bl	80017a0 <decodeRgbValue>
 8002110:	4603      	mov	r3, r0
 8002112:	462a      	mov	r2, r5
 8002114:	4621      	mov	r1, r4
 8002116:	2005      	movs	r0, #5
 8002118:	f7ff f9be 	bl	8001498 <lcdPlnyTrojuholnik>
		subMenu = 0;
 800211c:	4b03      	ldr	r3, [pc, #12]	; (800212c <pohybMenu+0x158>)
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
	 }
}
 8002122:	bf00      	nop
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bdb0      	pop	{r4, r5, r7, pc}
 800212a:	bf00      	nop
 800212c:	20000040 	.word	0x20000040
 8002130:	2000004e 	.word	0x2000004e
 8002134:	08002960 	.word	0x08002960
 8002138:	08002968 	.word	0x08002968
 800213c:	08002970 	.word	0x08002970
 8002140:	08002978 	.word	0x08002978
 8002144:	0800297c 	.word	0x0800297c
 8002148:	2000003a 	.word	0x2000003a

0800214c <posunSipkyDole>:

void posunSipkyDole(){
 800214c:	b5b0      	push	{r4, r5, r7, lr}
 800214e:	af00      	add	r7, sp, #0
	if (aktualneA == 0){
 8002150:	4b50      	ldr	r3, [pc, #320]	; (8002294 <posunSipkyDole+0x148>)
 8002152:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d134      	bne.n	80021c4 <posunSipkyDole+0x78>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
 800215a:	4b4f      	ldr	r3, [pc, #316]	; (8002298 <posunSipkyDole+0x14c>)
 800215c:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002160:	4b4e      	ldr	r3, [pc, #312]	; (800229c <posunSipkyDole+0x150>)
 8002162:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002166:	221f      	movs	r2, #31
 8002168:	211f      	movs	r1, #31
 800216a:	201f      	movs	r0, #31
 800216c:	f7ff fb18 	bl	80017a0 <decodeRgbValue>
 8002170:	4603      	mov	r3, r0
 8002172:	462a      	mov	r2, r5
 8002174:	4621      	mov	r1, r4
 8002176:	2005      	movs	r0, #5
 8002178:	f7ff f98e 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = defaultA + 20;
 800217c:	4b46      	ldr	r3, [pc, #280]	; (8002298 <posunSipkyDole+0x14c>)
 800217e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002182:	b29b      	uxth	r3, r3
 8002184:	3314      	adds	r3, #20
 8002186:	b29b      	uxth	r3, r3
 8002188:	b21a      	sxth	r2, r3
 800218a:	4b42      	ldr	r3, [pc, #264]	; (8002294 <posunSipkyDole+0x148>)
 800218c:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB + 20;
 800218e:	4b43      	ldr	r3, [pc, #268]	; (800229c <posunSipkyDole+0x150>)
 8002190:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002194:	b29b      	uxth	r3, r3
 8002196:	3314      	adds	r3, #20
 8002198:	b29b      	uxth	r3, r3
 800219a:	b21a      	sxth	r2, r3
 800219c:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <posunSipkyDole+0x154>)
 800219e:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <posunSipkyDole+0x148>)
 80021a2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021a6:	4b3e      	ldr	r3, [pc, #248]	; (80022a0 <posunSipkyDole+0x154>)
 80021a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2100      	movs	r1, #0
 80021b0:	2000      	movs	r0, #0
 80021b2:	f7ff faf5 	bl	80017a0 <decodeRgbValue>
 80021b6:	4603      	mov	r3, r0
 80021b8:	462a      	mov	r2, r5
 80021ba:	4621      	mov	r1, r4
 80021bc:	2005      	movs	r0, #5
 80021be:	f7ff f96b 	bl	8001498 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
}
 80021c2:	e065      	b.n	8002290 <posunSipkyDole+0x144>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
		aktualneA = defaultA + 20;
		aktualneB = defaultB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
	else if (aktualneB >= 100){
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <posunSipkyDole+0x154>)
 80021c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ca:	2b63      	cmp	r3, #99	; 0x63
 80021cc:	dd2c      	ble.n	8002228 <posunSipkyDole+0xdc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 80021ce:	4b31      	ldr	r3, [pc, #196]	; (8002294 <posunSipkyDole+0x148>)
 80021d0:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021d4:	4b32      	ldr	r3, [pc, #200]	; (80022a0 <posunSipkyDole+0x154>)
 80021d6:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021da:	221f      	movs	r2, #31
 80021dc:	211f      	movs	r1, #31
 80021de:	201f      	movs	r0, #31
 80021e0:	f7ff fade 	bl	80017a0 <decodeRgbValue>
 80021e4:	4603      	mov	r3, r0
 80021e6:	462a      	mov	r2, r5
 80021e8:	4621      	mov	r1, r4
 80021ea:	2005      	movs	r0, #5
 80021ec:	f7ff f954 	bl	8001498 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
 80021f0:	4b29      	ldr	r3, [pc, #164]	; (8002298 <posunSipkyDole+0x14c>)
 80021f2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80021f6:	4b29      	ldr	r3, [pc, #164]	; (800229c <posunSipkyDole+0x150>)
 80021f8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80021fc:	2200      	movs	r2, #0
 80021fe:	2100      	movs	r1, #0
 8002200:	2000      	movs	r0, #0
 8002202:	f7ff facd 	bl	80017a0 <decodeRgbValue>
 8002206:	4603      	mov	r3, r0
 8002208:	462a      	mov	r2, r5
 800220a:	4621      	mov	r1, r4
 800220c:	2005      	movs	r0, #5
 800220e:	f7ff f943 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = defaultA;
 8002212:	4b21      	ldr	r3, [pc, #132]	; (8002298 <posunSipkyDole+0x14c>)
 8002214:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002218:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <posunSipkyDole+0x148>)
 800221a:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB;
 800221c:	4b1f      	ldr	r3, [pc, #124]	; (800229c <posunSipkyDole+0x150>)
 800221e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002222:	4b1f      	ldr	r3, [pc, #124]	; (80022a0 <posunSipkyDole+0x154>)
 8002224:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
}
 8002226:	e033      	b.n	8002290 <posunSipkyDole+0x144>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
		aktualneA = defaultA;
		aktualneB = defaultB;
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8002228:	4b1a      	ldr	r3, [pc, #104]	; (8002294 <posunSipkyDole+0x148>)
 800222a:	f9b3 4000 	ldrsh.w	r4, [r3]
 800222e:	4b1c      	ldr	r3, [pc, #112]	; (80022a0 <posunSipkyDole+0x154>)
 8002230:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002234:	221f      	movs	r2, #31
 8002236:	211f      	movs	r1, #31
 8002238:	201f      	movs	r0, #31
 800223a:	f7ff fab1 	bl	80017a0 <decodeRgbValue>
 800223e:	4603      	mov	r3, r0
 8002240:	462a      	mov	r2, r5
 8002242:	4621      	mov	r1, r4
 8002244:	2005      	movs	r0, #5
 8002246:	f7ff f927 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA + 20;
 800224a:	4b12      	ldr	r3, [pc, #72]	; (8002294 <posunSipkyDole+0x148>)
 800224c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002250:	b29b      	uxth	r3, r3
 8002252:	3314      	adds	r3, #20
 8002254:	b29b      	uxth	r3, r3
 8002256:	b21a      	sxth	r2, r3
 8002258:	4b0e      	ldr	r3, [pc, #56]	; (8002294 <posunSipkyDole+0x148>)
 800225a:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB + 20;
 800225c:	4b10      	ldr	r3, [pc, #64]	; (80022a0 <posunSipkyDole+0x154>)
 800225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002262:	b29b      	uxth	r3, r3
 8002264:	3314      	adds	r3, #20
 8002266:	b29b      	uxth	r3, r3
 8002268:	b21a      	sxth	r2, r3
 800226a:	4b0d      	ldr	r3, [pc, #52]	; (80022a0 <posunSipkyDole+0x154>)
 800226c:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 800226e:	4b09      	ldr	r3, [pc, #36]	; (8002294 <posunSipkyDole+0x148>)
 8002270:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <posunSipkyDole+0x154>)
 8002276:	f9b3 5000 	ldrsh.w	r5, [r3]
 800227a:	2200      	movs	r2, #0
 800227c:	2100      	movs	r1, #0
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fa8e 	bl	80017a0 <decodeRgbValue>
 8002284:	4603      	mov	r3, r0
 8002286:	462a      	mov	r2, r5
 8002288:	4621      	mov	r1, r4
 800228a:	2005      	movs	r0, #5
 800228c:	f7ff f904 	bl	8001498 <lcdPlnyTrojuholnik>
	}
}
 8002290:	bf00      	nop
 8002292:	bdb0      	pop	{r4, r5, r7, pc}
 8002294:	2000004e 	.word	0x2000004e
 8002298:	20000052 	.word	0x20000052
 800229c:	20000038 	.word	0x20000038
 80022a0:	2000003a 	.word	0x2000003a

080022a4 <posunSipkyHore>:

void posunSipkyHore(){
 80022a4:	b5b0      	push	{r4, r5, r7, lr}
 80022a6:	af00      	add	r7, sp, #0
	if (aktualneA == 0){
 80022a8:	4b48      	ldr	r3, [pc, #288]	; (80023cc <posunSipkyHore+0x128>)
 80022aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d128      	bne.n	8002304 <posunSipkyHore+0x60>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
 80022b2:	4b47      	ldr	r3, [pc, #284]	; (80023d0 <posunSipkyHore+0x12c>)
 80022b4:	f9b3 4000 	ldrsh.w	r4, [r3]
 80022b8:	4b46      	ldr	r3, [pc, #280]	; (80023d4 <posunSipkyHore+0x130>)
 80022ba:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022be:	221f      	movs	r2, #31
 80022c0:	211f      	movs	r1, #31
 80022c2:	201f      	movs	r0, #31
 80022c4:	f7ff fa6c 	bl	80017a0 <decodeRgbValue>
 80022c8:	4603      	mov	r3, r0
 80022ca:	462a      	mov	r2, r5
 80022cc:	4621      	mov	r1, r4
 80022ce:	2005      	movs	r0, #5
 80022d0:	f7ff f8e2 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 80022d4:	4b3d      	ldr	r3, [pc, #244]	; (80023cc <posunSipkyHore+0x128>)
 80022d6:	225c      	movs	r2, #92	; 0x5c
 80022d8:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 80022da:	4b3f      	ldr	r3, [pc, #252]	; (80023d8 <posunSipkyHore+0x134>)
 80022dc:	226b      	movs	r2, #107	; 0x6b
 80022de:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 80022e0:	4b3a      	ldr	r3, [pc, #232]	; (80023cc <posunSipkyHore+0x128>)
 80022e2:	f9b3 4000 	ldrsh.w	r4, [r3]
 80022e6:	4b3c      	ldr	r3, [pc, #240]	; (80023d8 <posunSipkyHore+0x134>)
 80022e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80022ec:	2200      	movs	r2, #0
 80022ee:	2100      	movs	r1, #0
 80022f0:	2000      	movs	r0, #0
 80022f2:	f7ff fa55 	bl	80017a0 <decodeRgbValue>
 80022f6:	4603      	mov	r3, r0
 80022f8:	462a      	mov	r2, r5
 80022fa:	4621      	mov	r1, r4
 80022fc:	2005      	movs	r0, #5
 80022fe:	f7ff f8cb 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 8002302:	e061      	b.n	80023c8 <posunSipkyHore+0x124>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
	else if (aktualneB <= 30){
 8002304:	4b34      	ldr	r3, [pc, #208]	; (80023d8 <posunSipkyHore+0x134>)
 8002306:	f9b3 3000 	ldrsh.w	r3, [r3]
 800230a:	2b1e      	cmp	r3, #30
 800230c:	dc28      	bgt.n	8002360 <posunSipkyHore+0xbc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 800230e:	4b2f      	ldr	r3, [pc, #188]	; (80023cc <posunSipkyHore+0x128>)
 8002310:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002314:	4b30      	ldr	r3, [pc, #192]	; (80023d8 <posunSipkyHore+0x134>)
 8002316:	f9b3 5000 	ldrsh.w	r5, [r3]
 800231a:	221f      	movs	r2, #31
 800231c:	211f      	movs	r1, #31
 800231e:	201f      	movs	r0, #31
 8002320:	f7ff fa3e 	bl	80017a0 <decodeRgbValue>
 8002324:	4603      	mov	r3, r0
 8002326:	462a      	mov	r2, r5
 8002328:	4621      	mov	r1, r4
 800232a:	2005      	movs	r0, #5
 800232c:	f7ff f8b4 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 8002330:	4b26      	ldr	r3, [pc, #152]	; (80023cc <posunSipkyHore+0x128>)
 8002332:	225c      	movs	r2, #92	; 0x5c
 8002334:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 8002336:	4b28      	ldr	r3, [pc, #160]	; (80023d8 <posunSipkyHore+0x134>)
 8002338:	226b      	movs	r2, #107	; 0x6b
 800233a:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 800233c:	4b23      	ldr	r3, [pc, #140]	; (80023cc <posunSipkyHore+0x128>)
 800233e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <posunSipkyHore+0x134>)
 8002344:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002348:	2200      	movs	r2, #0
 800234a:	2100      	movs	r1, #0
 800234c:	2000      	movs	r0, #0
 800234e:	f7ff fa27 	bl	80017a0 <decodeRgbValue>
 8002352:	4603      	mov	r3, r0
 8002354:	462a      	mov	r2, r5
 8002356:	4621      	mov	r1, r4
 8002358:	2005      	movs	r0, #5
 800235a:	f7ff f89d 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 800235e:	e033      	b.n	80023c8 <posunSipkyHore+0x124>
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8002360:	4b1a      	ldr	r3, [pc, #104]	; (80023cc <posunSipkyHore+0x128>)
 8002362:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002366:	4b1c      	ldr	r3, [pc, #112]	; (80023d8 <posunSipkyHore+0x134>)
 8002368:	f9b3 5000 	ldrsh.w	r5, [r3]
 800236c:	221f      	movs	r2, #31
 800236e:	211f      	movs	r1, #31
 8002370:	201f      	movs	r0, #31
 8002372:	f7ff fa15 	bl	80017a0 <decodeRgbValue>
 8002376:	4603      	mov	r3, r0
 8002378:	462a      	mov	r2, r5
 800237a:	4621      	mov	r1, r4
 800237c:	2005      	movs	r0, #5
 800237e:	f7ff f88b 	bl	8001498 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <posunSipkyHore+0x128>)
 8002384:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002388:	b29b      	uxth	r3, r3
 800238a:	3b14      	subs	r3, #20
 800238c:	b29b      	uxth	r3, r3
 800238e:	b21a      	sxth	r2, r3
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <posunSipkyHore+0x128>)
 8002392:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB - 20;
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <posunSipkyHore+0x134>)
 8002396:	f9b3 3000 	ldrsh.w	r3, [r3]
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b14      	subs	r3, #20
 800239e:	b29b      	uxth	r3, r3
 80023a0:	b21a      	sxth	r2, r3
 80023a2:	4b0d      	ldr	r3, [pc, #52]	; (80023d8 <posunSipkyHore+0x134>)
 80023a4:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <posunSipkyHore+0x128>)
 80023a8:	f9b3 4000 	ldrsh.w	r4, [r3]
 80023ac:	4b0a      	ldr	r3, [pc, #40]	; (80023d8 <posunSipkyHore+0x134>)
 80023ae:	f9b3 5000 	ldrsh.w	r5, [r3]
 80023b2:	2200      	movs	r2, #0
 80023b4:	2100      	movs	r1, #0
 80023b6:	2000      	movs	r0, #0
 80023b8:	f7ff f9f2 	bl	80017a0 <decodeRgbValue>
 80023bc:	4603      	mov	r3, r0
 80023be:	462a      	mov	r2, r5
 80023c0:	4621      	mov	r1, r4
 80023c2:	2005      	movs	r0, #5
 80023c4:	f7ff f868 	bl	8001498 <lcdPlnyTrojuholnik>
	}

}
 80023c8:	bf00      	nop
 80023ca:	bdb0      	pop	{r4, r5, r7, pc}
 80023cc:	2000004e 	.word	0x2000004e
 80023d0:	20000052 	.word	0x20000052
 80023d4:	20000038 	.word	0x20000038
 80023d8:	2000003a 	.word	0x2000003a

080023dc <initMenu>:
void initMenu(){
 80023dc:	b5b0      	push	{r4, r5, r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af02      	add	r7, sp, #8
	defaultA = 12;
 80023e2:	4b2e      	ldr	r3, [pc, #184]	; (800249c <initMenu+0xc0>)
 80023e4:	220c      	movs	r2, #12
 80023e6:	801a      	strh	r2, [r3, #0]
	defaultB = 27;
 80023e8:	4b2d      	ldr	r3, [pc, #180]	; (80024a0 <initMenu+0xc4>)
 80023ea:	221b      	movs	r2, #27
 80023ec:	801a      	strh	r2, [r3, #0]
	aktualneA = 0;
 80023ee:	4b2d      	ldr	r3, [pc, #180]	; (80024a4 <initMenu+0xc8>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	801a      	strh	r2, [r3, #0]
	aktualneB = 0;
 80023f4:	4b2c      	ldr	r3, [pc, #176]	; (80024a8 <initMenu+0xcc>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
	subMenu = 0;
 80023fa:	4b2c      	ldr	r3, [pc, #176]	; (80024ac <initMenu+0xd0>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
	lcdInitialise(LCD_ORIENTATION2);
 8002400:	20a0      	movs	r0, #160	; 0xa0
 8002402:	f7fe fe49 	bl	8001098 <lcdInitialise>
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8002406:	22ff      	movs	r2, #255	; 0xff
 8002408:	21ff      	movs	r1, #255	; 0xff
 800240a:	20ff      	movs	r0, #255	; 0xff
 800240c:	f7ff f9c8 	bl	80017a0 <decodeRgbValue>
 8002410:	4603      	mov	r3, r0
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe ff1c 	bl	8001250 <lcdClearDisplay>
	  lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 8002418:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800241c:	9300      	str	r3, [sp, #0]
 800241e:	2300      	movs	r3, #0
 8002420:	2211      	movs	r2, #17
 8002422:	2114      	movs	r1, #20
 8002424:	4822      	ldr	r0, [pc, #136]	; (80024b0 <initMenu+0xd4>)
 8002426:	f7ff f9d7 	bl	80017d8 <lcdPutS>
	  lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 800242a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800242e:	9300      	str	r3, [sp, #0]
 8002430:	2300      	movs	r3, #0
 8002432:	2225      	movs	r2, #37	; 0x25
 8002434:	2114      	movs	r1, #20
 8002436:	481f      	ldr	r0, [pc, #124]	; (80024b4 <initMenu+0xd8>)
 8002438:	f7ff f9ce 	bl	80017d8 <lcdPutS>
	  lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	2300      	movs	r3, #0
 8002444:	2239      	movs	r2, #57	; 0x39
 8002446:	2114      	movs	r1, #20
 8002448:	481b      	ldr	r0, [pc, #108]	; (80024b8 <initMenu+0xdc>)
 800244a:	f7ff f9c5 	bl	80017d8 <lcdPutS>
	  lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2300      	movs	r3, #0
 8002456:	224d      	movs	r2, #77	; 0x4d
 8002458:	2114      	movs	r1, #20
 800245a:	4818      	ldr	r0, [pc, #96]	; (80024bc <initMenu+0xe0>)
 800245c:	f7ff f9bc 	bl	80017d8 <lcdPutS>
	  lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 8002460:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002464:	9300      	str	r3, [sp, #0]
 8002466:	2300      	movs	r3, #0
 8002468:	2261      	movs	r2, #97	; 0x61
 800246a:	2114      	movs	r1, #20
 800246c:	4814      	ldr	r0, [pc, #80]	; (80024c0 <initMenu+0xe4>)
 800246e:	f7ff f9b3 	bl	80017d8 <lcdPutS>
	lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
 8002472:	4b0a      	ldr	r3, [pc, #40]	; (800249c <initMenu+0xc0>)
 8002474:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002478:	4b09      	ldr	r3, [pc, #36]	; (80024a0 <initMenu+0xc4>)
 800247a:	f9b3 5000 	ldrsh.w	r5, [r3]
 800247e:	2200      	movs	r2, #0
 8002480:	2100      	movs	r1, #0
 8002482:	2000      	movs	r0, #0
 8002484:	f7ff f98c 	bl	80017a0 <decodeRgbValue>
 8002488:	4603      	mov	r3, r0
 800248a:	462a      	mov	r2, r5
 800248c:	4621      	mov	r1, r4
 800248e:	2005      	movs	r0, #5
 8002490:	f7ff f802 	bl	8001498 <lcdPlnyTrojuholnik>
}
 8002494:	bf00      	nop
 8002496:	46bd      	mov	sp, r7
 8002498:	bdb0      	pop	{r4, r5, r7, pc}
 800249a:	bf00      	nop
 800249c:	20000052 	.word	0x20000052
 80024a0:	20000038 	.word	0x20000038
 80024a4:	2000004e 	.word	0x2000004e
 80024a8:	2000003a 	.word	0x2000003a
 80024ac:	20000040 	.word	0x20000040
 80024b0:	08002960 	.word	0x08002960
 80024b4:	08002968 	.word	0x08002968
 80024b8:	08002970 	.word	0x08002970
 80024bc:	08002978 	.word	0x08002978
 80024c0:	0800297c 	.word	0x0800297c

080024c4 <initGPIO>:

void initGPIO(){			// inicalizujem GPIO piny
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b082      	sub	sp, #8
 80024c8:	af00      	add	r7, sp, #0

  	GPIO_InitTypeDef GPIO_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80024ca:	2101      	movs	r1, #1
 80024cc:	2001      	movs	r0, #1
 80024ce:	f7fe fc75 	bl	8000dbc <RCC_AHBPeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80024d2:	2101      	movs	r1, #1
 80024d4:	2002      	movs	r0, #2
 80024d6:	f7fe fc71 	bl	8000dbc <RCC_AHBPeriphClockCmd>
  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80024da:	2101      	movs	r1, #1
 80024dc:	2004      	movs	r0, #4
 80024de:	f7fe fc6d 	bl	8000dbc <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 80024e2:	2302      	movs	r3, #2
 80024e4:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80024e6:	2303      	movs	r3, #3
 80024e8:	713b      	strb	r3, [r7, #4]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80024ea:	2300      	movs	r3, #0
 80024ec:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024ee:	463b      	mov	r3, r7
 80024f0:	4619      	mov	r1, r3
 80024f2:	4816      	ldr	r0, [pc, #88]	; (800254c <initGPIO+0x88>)
 80024f4:	f7fe fb74 	bl	8000be0 <GPIO_Init>
  		/////
  	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80024f8:	463b      	mov	r3, r7
 80024fa:	4619      	mov	r1, r3
 80024fc:	4813      	ldr	r0, [pc, #76]	; (800254c <initGPIO+0x88>)
 80024fe:	f7fe fb6f 	bl	8000be0 <GPIO_Init>

	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_4;// PA0, PA1, PA2
 8002502:	2313      	movs	r3, #19
 8002504:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;//The pins are configured in analog mode
 8002506:	2303      	movs	r3, #3
 8002508:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;//We don't need any pull up or pull down
 800250a:	2300      	movs	r3, #0
 800250c:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &GPIO_InitStructure);//Initialize GPIOC pins with the configuration
 800250e:	463b      	mov	r3, r7
 8002510:	4619      	mov	r1, r3
 8002512:	480f      	ldr	r0, [pc, #60]	; (8002550 <initGPIO+0x8c>)
 8002514:	f7fe fb64 	bl	8000be0 <GPIO_Init>
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0;//PB1
 8002518:	2301      	movs	r3, #1
 800251a:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;//The pins are configured in analog mode
 800251c:	2303      	movs	r3, #3
 800251e:	713b      	strb	r3, [r7, #4]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;//We don't need any pull up or pull down
 8002520:	2300      	movs	r3, #0
 8002522:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOB, &GPIO_InitStructure);//Initialize GPIOA pins with the configuration
 8002524:	463b      	mov	r3, r7
 8002526:	4619      	mov	r1, r3
 8002528:	480a      	ldr	r0, [pc, #40]	; (8002554 <initGPIO+0x90>)
 800252a:	f7fe fb59 	bl	8000be0 <GPIO_Init>

  	RCC_HSICmd(ENABLE);
 800252e:	2001      	movs	r0, #1
 8002530:	f7fe fc34 	bl	8000d9c <RCC_HSICmd>
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8002534:	bf00      	nop
 8002536:	2021      	movs	r0, #33	; 0x21
 8002538:	f7fe fc7c 	bl	8000e34 <RCC_GetFlagStatus>
 800253c:	4603      	mov	r3, r0
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f9      	beq.n	8002536 <initGPIO+0x72>

}
 8002542:	bf00      	nop
 8002544:	3708      	adds	r7, #8
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	40020800 	.word	0x40020800
 8002550:	40020000 	.word	0x40020000
 8002554:	40020400 	.word	0x40020400

08002558 <dma_init>:

void dma_init(){
 8002558:	b580      	push	{r7, lr}
 800255a:	b08c      	sub	sp, #48	; 0x30
 800255c:	af00      	add	r7, sp, #0
	DMA_InitTypeDef       DMA_InitStruct;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_DMA1, ENABLE);
 800255e:	2101      	movs	r1, #1
 8002560:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8002564:	f7fe fc2a 	bl	8000dbc <RCC_AHBPeriphClockCmd>
	/* DMA1 Stream0 channel0 configuration **************************************/
	DMA_InitStruct.DMA_PeripheralBaseAddr = (uint32_t)&ADC1->DR;//ADC1's data register
 8002568:	4b11      	ldr	r3, [pc, #68]	; (80025b0 <dma_init+0x58>)
 800256a:	607b      	str	r3, [r7, #4]
	DMA_InitStruct.DMA_MemoryBaseAddr = (uint32_t)&ADC1ConvertedValue[0];
 800256c:	4b11      	ldr	r3, [pc, #68]	; (80025b4 <dma_init+0x5c>)
 800256e:	60bb      	str	r3, [r7, #8]
	DMA_InitStruct.DMA_DIR = DMA_DIR_PeripheralSRC;
 8002570:	2300      	movs	r3, #0
 8002572:	60fb      	str	r3, [r7, #12]
	DMA_InitStruct.DMA_BufferSize = 5;
 8002574:	2305      	movs	r3, #5
 8002576:	613b      	str	r3, [r7, #16]
	DMA_InitStruct.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
 8002578:	2300      	movs	r3, #0
 800257a:	617b      	str	r3, [r7, #20]
	DMA_InitStruct.DMA_MemoryInc = DMA_MemoryInc_Enable;
 800257c:	2380      	movs	r3, #128	; 0x80
 800257e:	61bb      	str	r3, [r7, #24]
	DMA_InitStruct.DMA_PeripheralDataSize = DMA_PeripheralDataSize_HalfWord;//Reads 16 bit values
 8002580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002584:	61fb      	str	r3, [r7, #28]
	DMA_InitStruct.DMA_MemoryDataSize = DMA_MemoryDataSize_HalfWord;//Stores 16 bit values
 8002586:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800258a:	623b      	str	r3, [r7, #32]
	DMA_InitStruct.DMA_Mode = DMA_Mode_Circular;
 800258c:	2320      	movs	r3, #32
 800258e:	627b      	str	r3, [r7, #36]	; 0x24
	DMA_InitStruct.DMA_Priority = DMA_Priority_High;
 8002590:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002594:	62bb      	str	r3, [r7, #40]	; 0x28
	DMA_Init(DMA1_Channel1, &DMA_InitStruct);
 8002596:	1d3b      	adds	r3, r7, #4
 8002598:	4619      	mov	r1, r3
 800259a:	4807      	ldr	r0, [pc, #28]	; (80025b8 <dma_init+0x60>)
 800259c:	f7fe fa66 	bl	8000a6c <DMA_Init>
	DMA_Cmd(DMA1_Channel1, ENABLE); //Enable the DMA1 - Channel1
 80025a0:	2101      	movs	r1, #1
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <dma_init+0x60>)
 80025a4:	f7fe faa0 	bl	8000ae8 <DMA_Cmd>
}
 80025a8:	bf00      	nop
 80025aa:	3730      	adds	r7, #48	; 0x30
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40012458 	.word	0x40012458
 80025b4:	20000044 	.word	0x20000044
 80025b8:	40026008 	.word	0x40026008

080025bc <adc_init>:

void adc_init(void)			// inicalizujem ADC
  {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  	//RCC_HSICmd(ENABLE);
  	ADC_InitTypeDef ADC_InitStructure;
  	//while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 80025c2:	2101      	movs	r1, #1
 80025c4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80025c8:	f7fe fc16 	bl	8000df8 <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 80025cc:	463b      	mov	r3, r7
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe f820 	bl	8000614 <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 80025d4:	2300      	movs	r3, #0
 80025d6:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ScanConvMode = ENABLE;//The scan is configured in multiple channels
 80025d8:	2301      	movs	r3, #1
 80025da:	713b      	strb	r3, [r7, #4]
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 80025dc:	2301      	movs	r3, #1
 80025de:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 5;
 80025e8:	2305      	movs	r3, #5
 80025ea:	753b      	strb	r3, [r7, #20]
  	ADC_InitStructure.ADC_ExternalTrigConv = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]
  	ADC_Init(ADC1, &ADC_InitStructure);
 80025f0:	463b      	mov	r3, r7
 80025f2:	4619      	mov	r1, r3
 80025f4:	4820      	ldr	r0, [pc, #128]	; (8002678 <adc_init+0xbc>)
 80025f6:	f7fd ffb9 	bl	800056c <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_9Cycles);//PC0
 80025fa:	2301      	movs	r3, #1
 80025fc:	2201      	movs	r2, #1
 80025fe:	2100      	movs	r1, #0
 8002600:	481d      	ldr	r0, [pc, #116]	; (8002678 <adc_init+0xbc>)
 8002602:	f7fe f843 	bl	800068c <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 2, ADC_SampleTime_9Cycles);
 8002606:	2301      	movs	r3, #1
 8002608:	2202      	movs	r2, #2
 800260a:	2101      	movs	r1, #1
 800260c:	481a      	ldr	r0, [pc, #104]	; (8002678 <adc_init+0xbc>)
 800260e:	f7fe f83d 	bl	800068c <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_4, 3, ADC_SampleTime_9Cycles);
 8002612:	2301      	movs	r3, #1
 8002614:	2203      	movs	r2, #3
 8002616:	2104      	movs	r1, #4
 8002618:	4817      	ldr	r0, [pc, #92]	; (8002678 <adc_init+0xbc>)
 800261a:	f7fe f837 	bl	800068c <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_8, 4, ADC_SampleTime_9Cycles);
 800261e:	2301      	movs	r3, #1
 8002620:	2204      	movs	r2, #4
 8002622:	2108      	movs	r1, #8
 8002624:	4814      	ldr	r0, [pc, #80]	; (8002678 <adc_init+0xbc>)
 8002626:	f7fe f831 	bl	800068c <ADC_RegularChannelConfig>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 5, ADC_SampleTime_9Cycles);
 800262a:	2301      	movs	r3, #1
 800262c:	2205      	movs	r2, #5
 800262e:	210b      	movs	r1, #11
 8002630:	4811      	ldr	r0, [pc, #68]	; (8002678 <adc_init+0xbc>)
 8002632:	f7fe f82b 	bl	800068c <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 8002636:	2101      	movs	r1, #1
 8002638:	480f      	ldr	r0, [pc, #60]	; (8002678 <adc_init+0xbc>)
 800263a:	f7fe f80b 	bl	8000654 <ADC_Cmd>
  	ADC_ITConfig(ADC1,ADC_IT_EOC,ENABLE);
 800263e:	2201      	movs	r2, #1
 8002640:	f240 2105 	movw	r1, #517	; 0x205
 8002644:	480c      	ldr	r0, [pc, #48]	; (8002678 <adc_init+0xbc>)
 8002646:	f7fe f9cf 	bl	80009e8 <ADC_ITConfig>
  	/* Enable DMA request after last transfer (Single-ADC mode) */
  	ADC_DMARequestAfterLastTransferCmd(ADC1, ENABLE);
 800264a:	2101      	movs	r1, #1
 800264c:	480a      	ldr	r0, [pc, #40]	; (8002678 <adc_init+0xbc>)
 800264e:	f7fe f9af 	bl	80009b0 <ADC_DMARequestAfterLastTransferCmd>
  	/* Enable ADC1 DMA */
	ADC_DMACmd(ADC1, ENABLE);
 8002652:	2101      	movs	r1, #1
 8002654:	4808      	ldr	r0, [pc, #32]	; (8002678 <adc_init+0xbc>)
 8002656:	f7fe f98f 	bl	8000978 <ADC_DMACmd>
  	/*ADC_ITConfig(ADC1,ADC_IT_OVR,ENABLE);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_OVR);*/
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 800265a:	bf00      	nop
 800265c:	2140      	movs	r1, #64	; 0x40
 800265e:	4806      	ldr	r0, [pc, #24]	; (8002678 <adc_init+0xbc>)
 8002660:	f7fe f9ea 	bl	8000a38 <ADC_GetFlagStatus>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d0f8      	beq.n	800265c <adc_init+0xa0>
  	ADC_SoftwareStartConv(ADC1);
 800266a:	4803      	ldr	r0, [pc, #12]	; (8002678 <adc_init+0xbc>)
 800266c:	f7fe f974 	bl	8000958 <ADC_SoftwareStartConv>
  }
 8002670:	bf00      	nop
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	40012400 	.word	0x40012400

0800267c <nvic_init>:

void nvic_init(){			// inicializacia prerusenia pre ADC
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
	//NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
	NVIC_InitTypeDef NVIC_InitStructure;
	//NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
	NVIC_InitStructure.NVIC_IRQChannel = DMA1_Channel1_IRQn;
 8002682:	230b      	movs	r3, #11
 8002684:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
 8002686:	2300      	movs	r3, #0
 8002688:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800268e:	2301      	movs	r3, #1
 8002690:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	4618      	mov	r0, r3
 8002696:	f7fd ff09 	bl	80004ac <NVIC_Init>
    DMA_ITConfig(DMA1_Channel1, DMA_IT_TC, ENABLE);
 800269a:	2201      	movs	r2, #1
 800269c:	2102      	movs	r1, #2
 800269e:	4807      	ldr	r0, [pc, #28]	; (80026bc <nvic_init+0x40>)
 80026a0:	f7fe fa3e 	bl	8000b20 <DMA_ITConfig>
    DMA_Cmd(DMA1_Channel1, ENABLE);
 80026a4:	2101      	movs	r1, #1
 80026a6:	4805      	ldr	r0, [pc, #20]	; (80026bc <nvic_init+0x40>)
 80026a8:	f7fe fa1e 	bl	8000ae8 <DMA_Cmd>
    ADC_DMACmd(ADC1, ENABLE);
 80026ac:	2101      	movs	r1, #1
 80026ae:	4804      	ldr	r0, [pc, #16]	; (80026c0 <nvic_init+0x44>)
 80026b0:	f7fe f962 	bl	8000978 <ADC_DMACmd>

}
 80026b4:	bf00      	nop
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	40026008 	.word	0x40026008
 80026c0:	40012400 	.word	0x40012400

080026c4 <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b087      	sub	sp, #28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
	int div = 1;
 80026d0:	2301      	movs	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 80026d4:	e004      	b.n	80026e0 <ts_itoa+0x1c>
		div *= base;
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	fb02 f303 	mul.w	r3, r2, r3
 80026de:	617b      	str	r3, [r7, #20]
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
	int div = 1;
	while (d/div >= base)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	68ba      	ldr	r2, [r7, #8]
 80026e4:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d2f3      	bcs.n	80026d6 <ts_itoa+0x12>
		div *= base;

	while (div != 0)
 80026ee:	e029      	b.n	8002744 <ts_itoa+0x80>
	{
		int num = d/div;
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	68ba      	ldr	r2, [r7, #8]
 80026f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f8:	613b      	str	r3, [r7, #16]
		d = d%div;
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8002702:	fb02 f201 	mul.w	r2, r2, r1
 8002706:	1a9b      	subs	r3, r3, r2
 8002708:	60bb      	str	r3, [r7, #8]
		div /= base;
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	fb92 f3f3 	sdiv	r3, r2, r3
 8002712:	617b      	str	r3, [r7, #20]
		if (num > 9)
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	2b09      	cmp	r3, #9
 8002718:	dd0a      	ble.n	8002730 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	1c59      	adds	r1, r3, #1
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	6011      	str	r1, [r2, #0]
 8002724:	693a      	ldr	r2, [r7, #16]
 8002726:	b2d2      	uxtb	r2, r2
 8002728:	3237      	adds	r2, #55	; 0x37
 800272a:	b2d2      	uxtb	r2, r2
 800272c:	701a      	strb	r2, [r3, #0]
 800272e:	e009      	b.n	8002744 <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	1c59      	adds	r1, r3, #1
 8002736:	68fa      	ldr	r2, [r7, #12]
 8002738:	6011      	str	r1, [r2, #0]
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	b2d2      	uxtb	r2, r2
 800273e:	3230      	adds	r2, #48	; 0x30
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	701a      	strb	r2, [r3, #0]
{
	int div = 1;
	while (d/div >= base)
		div *= base;

	while (div != 0)
 8002744:	697b      	ldr	r3, [r7, #20]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1d2      	bne.n	80026f0 <ts_itoa+0x2c>
		if (num > 9)
			*((*buf)++) = (num-10) + 'A';
		else
			*((*buf)++) = num + '0';
	}
}
 800274a:	bf00      	nop
 800274c:	371c      	adds	r7, #28
 800274e:	46bd      	mov	sp, r7
 8002750:	bc80      	pop	{r7}
 8002752:	4770      	bx	lr

08002754 <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	60f8      	str	r0, [r7, #12]
 800275c:	60b9      	str	r1, [r7, #8]
 800275e:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	617b      	str	r3, [r7, #20]
	while(*fmt)
 8002764:	e07d      	b.n	8002862 <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b25      	cmp	r3, #37	; 0x25
 800276c:	d171      	bne.n	8002852 <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	3301      	adds	r3, #1
 8002772:	60bb      	str	r3, [r7, #8]
 8002774:	68bb      	ldr	r3, [r7, #8]
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b64      	cmp	r3, #100	; 0x64
 800277a:	d01e      	beq.n	80027ba <ts_formatstring+0x66>
 800277c:	2b64      	cmp	r3, #100	; 0x64
 800277e:	dc06      	bgt.n	800278e <ts_formatstring+0x3a>
 8002780:	2b58      	cmp	r3, #88	; 0x58
 8002782:	d050      	beq.n	8002826 <ts_formatstring+0xd2>
 8002784:	2b63      	cmp	r3, #99	; 0x63
 8002786:	d00e      	beq.n	80027a6 <ts_formatstring+0x52>
 8002788:	2b25      	cmp	r3, #37	; 0x25
 800278a:	d058      	beq.n	800283e <ts_formatstring+0xea>
 800278c:	e05d      	b.n	800284a <ts_formatstring+0xf6>
 800278e:	2b73      	cmp	r3, #115	; 0x73
 8002790:	d02b      	beq.n	80027ea <ts_formatstring+0x96>
 8002792:	2b73      	cmp	r3, #115	; 0x73
 8002794:	dc02      	bgt.n	800279c <ts_formatstring+0x48>
 8002796:	2b69      	cmp	r3, #105	; 0x69
 8002798:	d00f      	beq.n	80027ba <ts_formatstring+0x66>
 800279a:	e056      	b.n	800284a <ts_formatstring+0xf6>
 800279c:	2b75      	cmp	r3, #117	; 0x75
 800279e:	d037      	beq.n	8002810 <ts_formatstring+0xbc>
 80027a0:	2b78      	cmp	r3, #120	; 0x78
 80027a2:	d040      	beq.n	8002826 <ts_formatstring+0xd2>
 80027a4:	e051      	b.n	800284a <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	1c5a      	adds	r2, r3, #1
 80027aa:	60fa      	str	r2, [r7, #12]
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	1d11      	adds	r1, r2, #4
 80027b0:	6079      	str	r1, [r7, #4]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	b2d2      	uxtb	r2, r2
 80027b6:	701a      	strb	r2, [r3, #0]
				break;
 80027b8:	e047      	b.n	800284a <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	1d1a      	adds	r2, r3, #4
 80027be:	607a      	str	r2, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	da07      	bge.n	80027da <ts_formatstring+0x86>
					{
						val *= -1;
 80027ca:	69fb      	ldr	r3, [r7, #28]
 80027cc:	425b      	negs	r3, r3
 80027ce:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	1c5a      	adds	r2, r3, #1
 80027d4:	60fa      	str	r2, [r7, #12]
 80027d6:	222d      	movs	r2, #45	; 0x2d
 80027d8:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 80027da:	69f9      	ldr	r1, [r7, #28]
 80027dc:	f107 030c 	add.w	r3, r7, #12
 80027e0:	220a      	movs	r2, #10
 80027e2:	4618      	mov	r0, r3
 80027e4:	f7ff ff6e 	bl	80026c4 <ts_itoa>
				}
				break;
 80027e8:	e02f      	b.n	800284a <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	1d1a      	adds	r2, r3, #4
 80027ee:	607a      	str	r2, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80027f4:	e007      	b.n	8002806 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	60fa      	str	r2, [r7, #12]
 80027fc:	69ba      	ldr	r2, [r7, #24]
 80027fe:	1c51      	adds	r1, r2, #1
 8002800:	61b9      	str	r1, [r7, #24]
 8002802:	7812      	ldrb	r2, [r2, #0]
 8002804:	701a      	strb	r2, [r3, #0]
				}
				break;
			  case 's':
				{
					char * arg = va_arg(va, char *);
					while (*arg)
 8002806:	69bb      	ldr	r3, [r7, #24]
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f3      	bne.n	80027f6 <ts_formatstring+0xa2>
					{
						*buf++ = *arg++;
					}
				}
				break;
 800280e:	e01c      	b.n	800284a <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	1d1a      	adds	r2, r3, #4
 8002814:	607a      	str	r2, [r7, #4]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	f107 030c 	add.w	r3, r7, #12
 800281c:	220a      	movs	r2, #10
 800281e:	4618      	mov	r0, r3
 8002820:	f7ff ff50 	bl	80026c4 <ts_itoa>
				break;
 8002824:	e011      	b.n	800284a <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	1d1a      	adds	r2, r3, #4
 800282a:	607a      	str	r2, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4619      	mov	r1, r3
 8002830:	f107 030c 	add.w	r3, r7, #12
 8002834:	2210      	movs	r2, #16
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff44 	bl	80026c4 <ts_itoa>
				break;
 800283c:	e005      	b.n	800284a <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	60fa      	str	r2, [r7, #12]
 8002844:	2225      	movs	r2, #37	; 0x25
 8002846:	701a      	strb	r2, [r3, #0]
				  break;
 8002848:	bf00      	nop
			}
			fmt++;
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	3301      	adds	r3, #1
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	e007      	b.n	8002862 <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	1c5a      	adds	r2, r3, #1
 8002856:	60fa      	str	r2, [r7, #12]
 8002858:	68ba      	ldr	r2, [r7, #8]
 800285a:	1c51      	adds	r1, r2, #1
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	7812      	ldrb	r2, [r2, #0]
 8002860:	701a      	strb	r2, [r3, #0]
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
	char *start_buf = buf;
	while(*fmt)
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b00      	cmp	r3, #0
 8002868:	f47f af7d 	bne.w	8002766 <ts_formatstring+0x12>
		else
		{
			*buf++ = *fmt++;
		}
	}
	*buf = 0;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	461a      	mov	r2, r3
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
}
 800287a:	4618      	mov	r0, r3
 800287c:	3720      	adds	r7, #32
 800287e:	46bd      	mov	sp, r7
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop

08002884 <siprintf>:
**            given character string according to the format parameter.
**  Returns:  Number of bytes written
**===========================================================================
*/
int siprintf(char *buf, const char *fmt, ...)
{
 8002884:	b40e      	push	{r1, r2, r3}
 8002886:	b580      	push	{r7, lr}
 8002888:	b085      	sub	sp, #20
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
	int length;
	va_list va;
	va_start(va, fmt);
 800288e:	f107 0320 	add.w	r3, r7, #32
 8002892:	60bb      	str	r3, [r7, #8]
	length = ts_formatstring(buf, fmt, va);
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	69f9      	ldr	r1, [r7, #28]
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	f7ff ff5b 	bl	8002754 <ts_formatstring>
 800289e:	60f8      	str	r0, [r7, #12]
	va_end(va);
	return length;
 80028a0:	68fb      	ldr	r3, [r7, #12]
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80028ac:	b003      	add	sp, #12
 80028ae:	4770      	bx	lr

080028b0 <__libc_init_array>:
 80028b0:	4b0e      	ldr	r3, [pc, #56]	; (80028ec <__libc_init_array+0x3c>)
 80028b2:	b570      	push	{r4, r5, r6, lr}
 80028b4:	461e      	mov	r6, r3
 80028b6:	4c0e      	ldr	r4, [pc, #56]	; (80028f0 <__libc_init_array+0x40>)
 80028b8:	2500      	movs	r5, #0
 80028ba:	1ae4      	subs	r4, r4, r3
 80028bc:	10a4      	asrs	r4, r4, #2
 80028be:	42a5      	cmp	r5, r4
 80028c0:	d004      	beq.n	80028cc <__libc_init_array+0x1c>
 80028c2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c6:	4798      	blx	r3
 80028c8:	3501      	adds	r5, #1
 80028ca:	e7f8      	b.n	80028be <__libc_init_array+0xe>
 80028cc:	f000 f816 	bl	80028fc <_init>
 80028d0:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <__libc_init_array+0x44>)
 80028d2:	4c09      	ldr	r4, [pc, #36]	; (80028f8 <__libc_init_array+0x48>)
 80028d4:	461e      	mov	r6, r3
 80028d6:	1ae4      	subs	r4, r4, r3
 80028d8:	10a4      	asrs	r4, r4, #2
 80028da:	2500      	movs	r5, #0
 80028dc:	42a5      	cmp	r5, r4
 80028de:	d004      	beq.n	80028ea <__libc_init_array+0x3a>
 80028e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028e4:	4798      	blx	r3
 80028e6:	3501      	adds	r5, #1
 80028e8:	e7f8      	b.n	80028dc <__libc_init_array+0x2c>
 80028ea:	bd70      	pop	{r4, r5, r6, pc}
 80028ec:	08002f88 	.word	0x08002f88
 80028f0:	08002f88 	.word	0x08002f88
 80028f4:	08002f88 	.word	0x08002f88
 80028f8:	08002f8c 	.word	0x08002f8c

080028fc <_init>:
 80028fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fe:	bf00      	nop
 8002900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002902:	bc08      	pop	{r3}
 8002904:	469e      	mov	lr, r3
 8002906:	4770      	bx	lr

08002908 <_fini>:
 8002908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800290a:	bf00      	nop
 800290c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290e:	bc08      	pop	{r3}
 8002910:	469e      	mov	lr, r3
 8002912:	4770      	bx	lr
