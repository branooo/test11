
C:\Users\tomas\Documents\Atollic7Workspace\projekt\test1\Debug\test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000020f4  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000067c  08002230  08002230  00012230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080028ac  080028ac  000128ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080028b4  080028b4  000128b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  080028b8  080028b8  000128b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000004  20000000  080028bc  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000034  20000008  080028c0  00020008  2**3
                  ALLOC
  8 ._user_heap_stack 00000400  2000003c  080028c0  0002003c  2**0
                  ALLOC
  9 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007974  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000014ad  00000000  00000000  000279a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000ae0  00000000  00000000  00028e50  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000009e8  00000000  00000000  00029930  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00003728  00000000  00000000  0002a318  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00002ebf  00000000  00000000  0002da40  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007e  00000000  00000000  000308ff  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002e64  00000000  00000000  00030980  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .stabstr      0000003f  00000000  00000000  000337e4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000008 	.word	0x20000008
 8000158:	00000000 	.word	0x00000000
 800015c:	08002218 	.word	0x08002218

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	2000000c 	.word	0x2000000c
 8000178:	08002218 	.word	0x08002218

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_uldivmod>:
 800018c:	b953      	cbnz	r3, 80001a4 <__aeabi_uldivmod+0x18>
 800018e:	b94a      	cbnz	r2, 80001a4 <__aeabi_uldivmod+0x18>
 8000190:	2900      	cmp	r1, #0
 8000192:	bf08      	it	eq
 8000194:	2800      	cmpeq	r0, #0
 8000196:	bf1c      	itt	ne
 8000198:	f04f 31ff 	movne.w	r1, #4294967295
 800019c:	f04f 30ff 	movne.w	r0, #4294967295
 80001a0:	f000 b982 	b.w	80004a8 <__aeabi_idiv0>
 80001a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ac:	f000 f806 	bl	80001bc <__udivmoddi4>
 80001b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001b8:	b004      	add	sp, #16
 80001ba:	4770      	bx	lr

080001bc <__udivmoddi4>:
 80001bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001c0:	468c      	mov	ip, r1
 80001c2:	460c      	mov	r4, r1
 80001c4:	4605      	mov	r5, r0
 80001c6:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80001c8:	2b00      	cmp	r3, #0
 80001ca:	d14f      	bne.n	800026c <__udivmoddi4+0xb0>
 80001cc:	428a      	cmp	r2, r1
 80001ce:	4617      	mov	r7, r2
 80001d0:	d96b      	bls.n	80002aa <__udivmoddi4+0xee>
 80001d2:	fab2 fe82 	clz	lr, r2
 80001d6:	f1be 0f00 	cmp.w	lr, #0
 80001da:	d00b      	beq.n	80001f4 <__udivmoddi4+0x38>
 80001dc:	f1ce 0520 	rsb	r5, lr, #32
 80001e0:	fa20 f505 	lsr.w	r5, r0, r5
 80001e4:	fa01 f30e 	lsl.w	r3, r1, lr
 80001e8:	ea45 0c03 	orr.w	ip, r5, r3
 80001ec:	fa02 f70e 	lsl.w	r7, r2, lr
 80001f0:	fa00 f50e 	lsl.w	r5, r0, lr
 80001f4:	0c39      	lsrs	r1, r7, #16
 80001f6:	fbbc f0f1 	udiv	r0, ip, r1
 80001fa:	b2ba      	uxth	r2, r7
 80001fc:	fb01 c310 	mls	r3, r1, r0, ip
 8000200:	fb00 f802 	mul.w	r8, r0, r2
 8000204:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 8000208:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 800020c:	45a0      	cmp	r8, r4
 800020e:	d909      	bls.n	8000224 <__udivmoddi4+0x68>
 8000210:	19e4      	adds	r4, r4, r7
 8000212:	f100 33ff 	add.w	r3, r0, #4294967295
 8000216:	f080 8128 	bcs.w	800046a <__udivmoddi4+0x2ae>
 800021a:	45a0      	cmp	r8, r4
 800021c:	f240 8125 	bls.w	800046a <__udivmoddi4+0x2ae>
 8000220:	3802      	subs	r0, #2
 8000222:	443c      	add	r4, r7
 8000224:	ebc8 0404 	rsb	r4, r8, r4
 8000228:	fbb4 f3f1 	udiv	r3, r4, r1
 800022c:	fb01 4c13 	mls	ip, r1, r3, r4
 8000230:	fb03 f202 	mul.w	r2, r3, r2
 8000234:	b2ac      	uxth	r4, r5
 8000236:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 800023a:	428a      	cmp	r2, r1
 800023c:	d909      	bls.n	8000252 <__udivmoddi4+0x96>
 800023e:	19c9      	adds	r1, r1, r7
 8000240:	f103 34ff 	add.w	r4, r3, #4294967295
 8000244:	f080 810f 	bcs.w	8000466 <__udivmoddi4+0x2aa>
 8000248:	428a      	cmp	r2, r1
 800024a:	f240 810c 	bls.w	8000466 <__udivmoddi4+0x2aa>
 800024e:	3b02      	subs	r3, #2
 8000250:	4439      	add	r1, r7
 8000252:	1a8a      	subs	r2, r1, r2
 8000254:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000258:	2100      	movs	r1, #0
 800025a:	2e00      	cmp	r6, #0
 800025c:	d063      	beq.n	8000326 <__udivmoddi4+0x16a>
 800025e:	fa22 f20e 	lsr.w	r2, r2, lr
 8000262:	2300      	movs	r3, #0
 8000264:	e886 000c 	stmia.w	r6, {r2, r3}
 8000268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800026c:	428b      	cmp	r3, r1
 800026e:	d907      	bls.n	8000280 <__udivmoddi4+0xc4>
 8000270:	2e00      	cmp	r6, #0
 8000272:	d056      	beq.n	8000322 <__udivmoddi4+0x166>
 8000274:	2100      	movs	r1, #0
 8000276:	e886 0011 	stmia.w	r6, {r0, r4}
 800027a:	4608      	mov	r0, r1
 800027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000280:	fab3 f183 	clz	r1, r3
 8000284:	2900      	cmp	r1, #0
 8000286:	f040 8093 	bne.w	80003b0 <__udivmoddi4+0x1f4>
 800028a:	42a3      	cmp	r3, r4
 800028c:	d302      	bcc.n	8000294 <__udivmoddi4+0xd8>
 800028e:	4282      	cmp	r2, r0
 8000290:	f200 80fe 	bhi.w	8000490 <__udivmoddi4+0x2d4>
 8000294:	1a85      	subs	r5, r0, r2
 8000296:	eb64 0303 	sbc.w	r3, r4, r3
 800029a:	469c      	mov	ip, r3
 800029c:	2001      	movs	r0, #1
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d041      	beq.n	8000326 <__udivmoddi4+0x16a>
 80002a2:	e886 1020 	stmia.w	r6, {r5, ip}
 80002a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80002aa:	b912      	cbnz	r2, 80002b2 <__udivmoddi4+0xf6>
 80002ac:	2701      	movs	r7, #1
 80002ae:	fbb7 f7f2 	udiv	r7, r7, r2
 80002b2:	fab7 fe87 	clz	lr, r7
 80002b6:	f1be 0f00 	cmp.w	lr, #0
 80002ba:	d136      	bne.n	800032a <__udivmoddi4+0x16e>
 80002bc:	1be4      	subs	r4, r4, r7
 80002be:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002c2:	fa1f f987 	uxth.w	r9, r7
 80002c6:	2101      	movs	r1, #1
 80002c8:	fbb4 f3f8 	udiv	r3, r4, r8
 80002cc:	fb08 4413 	mls	r4, r8, r3, r4
 80002d0:	fb09 f203 	mul.w	r2, r9, r3
 80002d4:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80002d8:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80002dc:	42a2      	cmp	r2, r4
 80002de:	d907      	bls.n	80002f0 <__udivmoddi4+0x134>
 80002e0:	19e4      	adds	r4, r4, r7
 80002e2:	f103 30ff 	add.w	r0, r3, #4294967295
 80002e6:	d202      	bcs.n	80002ee <__udivmoddi4+0x132>
 80002e8:	42a2      	cmp	r2, r4
 80002ea:	f200 80d3 	bhi.w	8000494 <__udivmoddi4+0x2d8>
 80002ee:	4603      	mov	r3, r0
 80002f0:	1aa4      	subs	r4, r4, r2
 80002f2:	fbb4 f0f8 	udiv	r0, r4, r8
 80002f6:	fb08 4810 	mls	r8, r8, r0, r4
 80002fa:	fb09 f900 	mul.w	r9, r9, r0
 80002fe:	b2ac      	uxth	r4, r5
 8000300:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8000304:	4591      	cmp	r9, r2
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0x15c>
 8000308:	19d2      	adds	r2, r2, r7
 800030a:	f100 34ff 	add.w	r4, r0, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0x15a>
 8000310:	4591      	cmp	r9, r2
 8000312:	f200 80ba 	bhi.w	800048a <__udivmoddi4+0x2ce>
 8000316:	4620      	mov	r0, r4
 8000318:	ebc9 0202 	rsb	r2, r9, r2
 800031c:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000320:	e79b      	b.n	800025a <__udivmoddi4+0x9e>
 8000322:	4631      	mov	r1, r6
 8000324:	4630      	mov	r0, r6
 8000326:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800032a:	fa07 f70e 	lsl.w	r7, r7, lr
 800032e:	f1ce 0c20 	rsb	ip, lr, #32
 8000332:	fa24 f30c 	lsr.w	r3, r4, ip
 8000336:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800033a:	fbb3 faf8 	udiv	sl, r3, r8
 800033e:	fa1f f987 	uxth.w	r9, r7
 8000342:	fb08 351a 	mls	r5, r8, sl, r3
 8000346:	fa20 fc0c 	lsr.w	ip, r0, ip
 800034a:	fa04 f40e 	lsl.w	r4, r4, lr
 800034e:	fb0a fb09 	mul.w	fp, sl, r9
 8000352:	ea4c 0c04 	orr.w	ip, ip, r4
 8000356:	ea4f 421c 	mov.w	r2, ip, lsr #16
 800035a:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 800035e:	459b      	cmp	fp, r3
 8000360:	fa00 f50e 	lsl.w	r5, r0, lr
 8000364:	d90a      	bls.n	800037c <__udivmoddi4+0x1c0>
 8000366:	19db      	adds	r3, r3, r7
 8000368:	f10a 32ff 	add.w	r2, sl, #4294967295
 800036c:	f080 808b 	bcs.w	8000486 <__udivmoddi4+0x2ca>
 8000370:	459b      	cmp	fp, r3
 8000372:	f240 8088 	bls.w	8000486 <__udivmoddi4+0x2ca>
 8000376:	f1aa 0a02 	sub.w	sl, sl, #2
 800037a:	443b      	add	r3, r7
 800037c:	ebcb 0303 	rsb	r3, fp, r3
 8000380:	fbb3 f0f8 	udiv	r0, r3, r8
 8000384:	fb08 3310 	mls	r3, r8, r0, r3
 8000388:	fb00 f409 	mul.w	r4, r0, r9
 800038c:	fa1f fc8c 	uxth.w	ip, ip
 8000390:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 8000394:	429c      	cmp	r4, r3
 8000396:	d907      	bls.n	80003a8 <__udivmoddi4+0x1ec>
 8000398:	19db      	adds	r3, r3, r7
 800039a:	f100 32ff 	add.w	r2, r0, #4294967295
 800039e:	d26e      	bcs.n	800047e <__udivmoddi4+0x2c2>
 80003a0:	429c      	cmp	r4, r3
 80003a2:	d96c      	bls.n	800047e <__udivmoddi4+0x2c2>
 80003a4:	3802      	subs	r0, #2
 80003a6:	443b      	add	r3, r7
 80003a8:	1b1c      	subs	r4, r3, r4
 80003aa:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80003ae:	e78b      	b.n	80002c8 <__udivmoddi4+0x10c>
 80003b0:	f1c1 0e20 	rsb	lr, r1, #32
 80003b4:	408b      	lsls	r3, r1
 80003b6:	fa22 fc0e 	lsr.w	ip, r2, lr
 80003ba:	ea4c 0c03 	orr.w	ip, ip, r3
 80003be:	fa24 f70e 	lsr.w	r7, r4, lr
 80003c2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003c6:	fbb7 faf9 	udiv	sl, r7, r9
 80003ca:	fa1f f38c 	uxth.w	r3, ip
 80003ce:	fb09 771a 	mls	r7, r9, sl, r7
 80003d2:	fa20 f80e 	lsr.w	r8, r0, lr
 80003d6:	408c      	lsls	r4, r1
 80003d8:	fb0a f503 	mul.w	r5, sl, r3
 80003dc:	ea48 0404 	orr.w	r4, r8, r4
 80003e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80003e4:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80003e8:	42bd      	cmp	r5, r7
 80003ea:	fa02 f201 	lsl.w	r2, r2, r1
 80003ee:	fa00 fb01 	lsl.w	fp, r0, r1
 80003f2:	d909      	bls.n	8000408 <__udivmoddi4+0x24c>
 80003f4:	eb17 070c 	adds.w	r7, r7, ip
 80003f8:	f10a 30ff 	add.w	r0, sl, #4294967295
 80003fc:	d241      	bcs.n	8000482 <__udivmoddi4+0x2c6>
 80003fe:	42bd      	cmp	r5, r7
 8000400:	d93f      	bls.n	8000482 <__udivmoddi4+0x2c6>
 8000402:	f1aa 0a02 	sub.w	sl, sl, #2
 8000406:	4467      	add	r7, ip
 8000408:	1b7f      	subs	r7, r7, r5
 800040a:	fbb7 f5f9 	udiv	r5, r7, r9
 800040e:	fb09 7715 	mls	r7, r9, r5, r7
 8000412:	fb05 f303 	mul.w	r3, r5, r3
 8000416:	b2a4      	uxth	r4, r4
 8000418:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 800041c:	42bb      	cmp	r3, r7
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x276>
 8000420:	eb17 070c 	adds.w	r7, r7, ip
 8000424:	f105 30ff 	add.w	r0, r5, #4294967295
 8000428:	d227      	bcs.n	800047a <__udivmoddi4+0x2be>
 800042a:	42bb      	cmp	r3, r7
 800042c:	d925      	bls.n	800047a <__udivmoddi4+0x2be>
 800042e:	3d02      	subs	r5, #2
 8000430:	4467      	add	r7, ip
 8000432:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 8000436:	fba0 8902 	umull	r8, r9, r0, r2
 800043a:	1aff      	subs	r7, r7, r3
 800043c:	454f      	cmp	r7, r9
 800043e:	4645      	mov	r5, r8
 8000440:	464c      	mov	r4, r9
 8000442:	d314      	bcc.n	800046e <__udivmoddi4+0x2b2>
 8000444:	d029      	beq.n	800049a <__udivmoddi4+0x2de>
 8000446:	b366      	cbz	r6, 80004a2 <__udivmoddi4+0x2e6>
 8000448:	ebbb 0305 	subs.w	r3, fp, r5
 800044c:	eb67 0704 	sbc.w	r7, r7, r4
 8000450:	fa07 fe0e 	lsl.w	lr, r7, lr
 8000454:	40cb      	lsrs	r3, r1
 8000456:	40cf      	lsrs	r7, r1
 8000458:	ea4e 0303 	orr.w	r3, lr, r3
 800045c:	e886 0088 	stmia.w	r6, {r3, r7}
 8000460:	2100      	movs	r1, #0
 8000462:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000466:	4623      	mov	r3, r4
 8000468:	e6f3      	b.n	8000252 <__udivmoddi4+0x96>
 800046a:	4618      	mov	r0, r3
 800046c:	e6da      	b.n	8000224 <__udivmoddi4+0x68>
 800046e:	ebb8 0502 	subs.w	r5, r8, r2
 8000472:	eb69 040c 	sbc.w	r4, r9, ip
 8000476:	3801      	subs	r0, #1
 8000478:	e7e5      	b.n	8000446 <__udivmoddi4+0x28a>
 800047a:	4605      	mov	r5, r0
 800047c:	e7d9      	b.n	8000432 <__udivmoddi4+0x276>
 800047e:	4610      	mov	r0, r2
 8000480:	e792      	b.n	80003a8 <__udivmoddi4+0x1ec>
 8000482:	4682      	mov	sl, r0
 8000484:	e7c0      	b.n	8000408 <__udivmoddi4+0x24c>
 8000486:	4692      	mov	sl, r2
 8000488:	e778      	b.n	800037c <__udivmoddi4+0x1c0>
 800048a:	3802      	subs	r0, #2
 800048c:	443a      	add	r2, r7
 800048e:	e743      	b.n	8000318 <__udivmoddi4+0x15c>
 8000490:	4608      	mov	r0, r1
 8000492:	e704      	b.n	800029e <__udivmoddi4+0xe2>
 8000494:	3b02      	subs	r3, #2
 8000496:	443c      	add	r4, r7
 8000498:	e72a      	b.n	80002f0 <__udivmoddi4+0x134>
 800049a:	45c3      	cmp	fp, r8
 800049c:	d3e7      	bcc.n	800046e <__udivmoddi4+0x2b2>
 800049e:	463c      	mov	r4, r7
 80004a0:	e7d1      	b.n	8000446 <__udivmoddi4+0x28a>
 80004a2:	4631      	mov	r1, r6
 80004a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080004a8 <__aeabi_idiv0>:
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop

080004ac <NVIC_PriorityGroupConfig>:
  *     @arg NVIC_PriorityGroup_4: 4 bits for preemption priority.
  *                                0 bits for subpriority.
  * @retval None
  */
void NVIC_PriorityGroupConfig(uint32_t NVIC_PriorityGroup)
{
 80004ac:	b480      	push	{r7}
 80004ae:	b083      	sub	sp, #12
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(NVIC_PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to NVIC_PriorityGroup value */
  SCB->AIRCR = AIRCR_VECTKEY_MASK | NVIC_PriorityGroup;
 80004b4:	4a05      	ldr	r2, [pc, #20]	; (80004cc <NVIC_PriorityGroupConfig+0x20>)
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80004bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c0:	60d3      	str	r3, [r2, #12]
}
 80004c2:	bf00      	nop
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	bc80      	pop	{r7}
 80004ca:	4770      	bx	lr
 80004cc:	e000ed00 	.word	0xe000ed00

080004d0 <NVIC_Init>:
  * @param  NVIC_InitStruct: pointer to a NVIC_InitTypeDef structure that contains
  *         the configuration information for the specified NVIC peripheral.
  * @retval None
  */
void NVIC_Init(NVIC_InitTypeDef* NVIC_InitStruct)
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
  uint8_t tmppriority = 0x00, tmppre = 0x00, tmpsub = 0x0F;
 80004d8:	2300      	movs	r3, #0
 80004da:	73fb      	strb	r3, [r7, #15]
 80004dc:	2300      	movs	r3, #0
 80004de:	73bb      	strb	r3, [r7, #14]
 80004e0:	230f      	movs	r3, #15
 80004e2:	737b      	strb	r3, [r7, #13]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NVIC_InitStruct->NVIC_IRQChannelCmd));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority));  
  assert_param(IS_NVIC_SUB_PRIORITY(NVIC_InitStruct->NVIC_IRQChannelSubPriority));
    
  if (NVIC_InitStruct->NVIC_IRQChannelCmd != DISABLE)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	78db      	ldrb	r3, [r3, #3]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d038      	beq.n	800055e <NVIC_Init+0x8e>
  {
    /* Compute the Corresponding IRQ Priority --------------------------------*/    
    tmppriority = (0x700 - ((SCB->AIRCR) & (uint32_t)0x700))>> 0x08;
 80004ec:	4b26      	ldr	r3, [pc, #152]	; (8000588 <NVIC_Init+0xb8>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	43db      	mvns	r3, r3
 80004f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80004f6:	0a1b      	lsrs	r3, r3, #8
 80004f8:	73fb      	strb	r3, [r7, #15]
    tmppre = (0x4 - tmppriority);
 80004fa:	7bfb      	ldrb	r3, [r7, #15]
 80004fc:	f1c3 0304 	rsb	r3, r3, #4
 8000500:	73bb      	strb	r3, [r7, #14]
    tmpsub = tmpsub >> tmppriority;
 8000502:	7b7a      	ldrb	r2, [r7, #13]
 8000504:	7bfb      	ldrb	r3, [r7, #15]
 8000506:	fa42 f303 	asr.w	r3, r2, r3
 800050a:	737b      	strb	r3, [r7, #13]

    tmppriority = (uint32_t)NVIC_InitStruct->NVIC_IRQChannelPreemptionPriority << tmppre;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	785b      	ldrb	r3, [r3, #1]
 8000510:	461a      	mov	r2, r3
 8000512:	7bbb      	ldrb	r3, [r7, #14]
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	73fb      	strb	r3, [r7, #15]
    tmppriority |=  (uint8_t)(NVIC_InitStruct->NVIC_IRQChannelSubPriority & tmpsub);
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	789a      	ldrb	r2, [r3, #2]
 800051e:	7b7b      	ldrb	r3, [r7, #13]
 8000520:	4013      	ands	r3, r2
 8000522:	b2da      	uxtb	r2, r3
 8000524:	7bfb      	ldrb	r3, [r7, #15]
 8000526:	4313      	orrs	r3, r2
 8000528:	73fb      	strb	r3, [r7, #15]
    tmppriority = tmppriority << 0x04;
 800052a:	7bfb      	ldrb	r3, [r7, #15]
 800052c:	011b      	lsls	r3, r3, #4
 800052e:	73fb      	strb	r3, [r7, #15]
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
 8000530:	4a16      	ldr	r2, [pc, #88]	; (800058c <NVIC_Init+0xbc>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	781b      	ldrb	r3, [r3, #0]
 8000536:	4413      	add	r3, r2
 8000538:	7bfa      	ldrb	r2, [r7, #15]
 800053a:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800053e:	4a13      	ldr	r2, [pc, #76]	; (800058c <NVIC_Init+0xbc>)
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	095b      	lsrs	r3, r3, #5
 8000546:	b2db      	uxtb	r3, r3
 8000548:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	f003 031f 	and.w	r3, r3, #31
 8000552:	2101      	movs	r1, #1
 8000554:	fa01 f303 	lsl.w	r3, r1, r3
    tmppriority = tmppriority << 0x04;
        
    NVIC->IP[NVIC_InitStruct->NVIC_IRQChannel] = tmppriority;
    
    /* Enable the Selected IRQ Channels --------------------------------------*/
    NVIC->ISER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000558:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800055c:	e00f      	b.n	800057e <NVIC_Init+0xae>
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 800055e:	490b      	ldr	r1, [pc, #44]	; (800058c <NVIC_Init+0xbc>)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	781b      	ldrb	r3, [r3, #0]
 8000564:	095b      	lsrs	r3, r3, #5
 8000566:	b2db      	uxtb	r3, r3
 8000568:	4618      	mov	r0, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	f003 031f 	and.w	r3, r3, #31
 8000572:	2201      	movs	r2, #1
 8000574:	409a      	lsls	r2, r3
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
  else
  {
    /* Disable the Selected IRQ Channels -------------------------------------*/
    NVIC->ICER[NVIC_InitStruct->NVIC_IRQChannel >> 0x05] =
 8000576:	f100 0320 	add.w	r3, r0, #32
 800057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      (uint32_t)0x01 << (NVIC_InitStruct->NVIC_IRQChannel & (uint8_t)0x1F);
  }
}
 800057e:	bf00      	nop
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	bc80      	pop	{r7}
 8000586:	4770      	bx	lr
 8000588:	e000ed00 	.word	0xe000ed00
 800058c:	e000e100 	.word	0xe000e100

08000590 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 800059a:	2300      	movs	r3, #0
 800059c:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800059e:	2300      	movs	r3, #0
 80005a0:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	685b      	ldr	r3, [r3, #4]
 80005a6:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 80005ae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80005b2:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 80005b4:	683b      	ldr	r3, [r7, #0]
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	021a      	lsls	r2, r3, #8
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	4313      	orrs	r3, r2
 80005c0:	68fa      	ldr	r2, [r7, #12]
 80005c2:	4313      	orrs	r3, r2
 80005c4:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	68fa      	ldr	r2, [r7, #12]
 80005ca:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 80005d2:	68fa      	ldr	r2, [r7, #12]
 80005d4:	4b17      	ldr	r3, [pc, #92]	; (8000634 <ADC_Init+0xa4>)
 80005d6:	4013      	ands	r3, r2
 80005d8:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005da:	683b      	ldr	r3, [r7, #0]
 80005dc:	691a      	ldr	r2, [r3, #16]
 80005de:	683b      	ldr	r3, [r7, #0]
 80005e0:	68db      	ldr	r3, [r3, #12]
 80005e2:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005e4:	683b      	ldr	r3, [r7, #0]
 80005e6:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005e8:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	795b      	ldrb	r3, [r3, #5]
 80005ee:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 80005f0:	4313      	orrs	r3, r2
 80005f2:	68fa      	ldr	r2, [r7, #12]
 80005f4:	4313      	orrs	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	68fa      	ldr	r2, [r7, #12]
 80005fc:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000604:	68fb      	ldr	r3, [r7, #12]
 8000606:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 800060a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 800060c:	683b      	ldr	r3, [r7, #0]
 800060e:	7d1b      	ldrb	r3, [r3, #20]
 8000610:	3b01      	subs	r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	7afb      	ldrb	r3, [r7, #11]
 8000616:	4313      	orrs	r3, r2
 8000618:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 800061a:	7afb      	ldrb	r3, [r7, #11]
 800061c:	051b      	lsls	r3, r3, #20
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	4313      	orrs	r3, r2
 8000622:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	68fa      	ldr	r2, [r7, #12]
 8000628:	631a      	str	r2, [r3, #48]	; 0x30
}
 800062a:	bf00      	nop
 800062c:	3714      	adds	r7, #20
 800062e:	46bd      	mov	sp, r7
 8000630:	bc80      	pop	{r7}
 8000632:	4770      	bx	lr
 8000634:	c0fff7fd 	.word	0xc0fff7fd

08000638 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000638:	b480      	push	{r7}
 800063a:	b083      	sub	sp, #12
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800065e:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2200      	movs	r2, #0
 8000664:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	2201      	movs	r2, #1
 800066a:	751a      	strb	r2, [r3, #20]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bc80      	pop	{r7}
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop

08000678 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
 8000680:	460b      	mov	r3, r1
 8000682:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000684:	78fb      	ldrb	r3, [r7, #3]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d006      	beq.n	8000698 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	689b      	ldr	r3, [r3, #8]
 800068e:	f043 0201 	orr.w	r2, r3, #1
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000696:	e005      	b.n	80006a4 <ADC_Cmd+0x2c>
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f023 0201 	bic.w	r2, r3, #1
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	609a      	str	r2, [r3, #8]
  }
}
 80006a4:	bf00      	nop
 80006a6:	370c      	adds	r7, #12
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bc80      	pop	{r7}
 80006ac:	4770      	bx	lr
 80006ae:	bf00      	nop

080006b0 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b085      	sub	sp, #20
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	4608      	mov	r0, r1
 80006ba:	4611      	mov	r1, r2
 80006bc:	461a      	mov	r2, r3
 80006be:	4603      	mov	r3, r0
 80006c0:	70fb      	strb	r3, [r7, #3]
 80006c2:	460b      	mov	r3, r1
 80006c4:	70bb      	strb	r3, [r7, #2]
 80006c6:	4613      	mov	r3, r2
 80006c8:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
 80006ce:	2300      	movs	r3, #0
 80006d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 80006d2:	78fb      	ldrb	r3, [r7, #3]
 80006d4:	2b1d      	cmp	r3, #29
 80006d6:	d923      	bls.n	8000720 <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80006dc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 80006de:	78fb      	ldrb	r3, [r7, #3]
 80006e0:	f1a3 021e 	sub.w	r2, r3, #30
 80006e4:	4613      	mov	r3, r2
 80006e6:	005b      	lsls	r3, r3, #1
 80006e8:	4413      	add	r3, r2
 80006ea:	2207      	movs	r2, #7
 80006ec:	fa02 f303 	lsl.w	r3, r2, r3
 80006f0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80006f2:	68bb      	ldr	r3, [r7, #8]
 80006f4:	43db      	mvns	r3, r3
 80006f6:	68fa      	ldr	r2, [r7, #12]
 80006f8:	4013      	ands	r3, r2
 80006fa:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 80006fc:	7879      	ldrb	r1, [r7, #1]
 80006fe:	78fb      	ldrb	r3, [r7, #3]
 8000700:	f1a3 021e 	sub.w	r2, r3, #30
 8000704:	4613      	mov	r3, r2
 8000706:	005b      	lsls	r3, r3, #1
 8000708:	4413      	add	r3, r2
 800070a:	fa01 f303 	lsl.w	r3, r1, r3
 800070e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000710:	68fa      	ldr	r2, [r7, #12]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	4313      	orrs	r3, r2
 8000716:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	68fa      	ldr	r2, [r7, #12]
 800071c:	65da      	str	r2, [r3, #92]	; 0x5c
 800071e:	e06c      	b.n	80007fa <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000720:	78fb      	ldrb	r3, [r7, #3]
 8000722:	2b13      	cmp	r3, #19
 8000724:	d923      	bls.n	800076e <ADC_RegularChannelConfig+0xbe>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	68db      	ldr	r3, [r3, #12]
 800072a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	f1a3 0214 	sub.w	r2, r3, #20
 8000732:	4613      	mov	r3, r2
 8000734:	005b      	lsls	r3, r3, #1
 8000736:	4413      	add	r3, r2
 8000738:	2207      	movs	r2, #7
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000740:	68bb      	ldr	r3, [r7, #8]
 8000742:	43db      	mvns	r3, r3
 8000744:	68fa      	ldr	r2, [r7, #12]
 8000746:	4013      	ands	r3, r2
 8000748:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800074a:	7879      	ldrb	r1, [r7, #1]
 800074c:	78fb      	ldrb	r3, [r7, #3]
 800074e:	f1a3 0214 	sub.w	r2, r3, #20
 8000752:	4613      	mov	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	4413      	add	r3, r2
 8000758:	fa01 f303 	lsl.w	r3, r1, r3
 800075c:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800075e:	68fa      	ldr	r2, [r7, #12]
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	4313      	orrs	r3, r2
 8000764:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	68fa      	ldr	r2, [r7, #12]
 800076a:	60da      	str	r2, [r3, #12]
 800076c:	e045      	b.n	80007fa <ADC_RegularChannelConfig+0x14a>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 800076e:	78fb      	ldrb	r3, [r7, #3]
 8000770:	2b09      	cmp	r3, #9
 8000772:	d923      	bls.n	80007bc <ADC_RegularChannelConfig+0x10c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 800077a:	78fb      	ldrb	r3, [r7, #3]
 800077c:	f1a3 020a 	sub.w	r2, r3, #10
 8000780:	4613      	mov	r3, r2
 8000782:	005b      	lsls	r3, r3, #1
 8000784:	4413      	add	r3, r2
 8000786:	2207      	movs	r2, #7
 8000788:	fa02 f303 	lsl.w	r3, r2, r3
 800078c:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	43db      	mvns	r3, r3
 8000792:	68fa      	ldr	r2, [r7, #12]
 8000794:	4013      	ands	r3, r2
 8000796:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000798:	7879      	ldrb	r1, [r7, #1]
 800079a:	78fb      	ldrb	r3, [r7, #3]
 800079c:	f1a3 020a 	sub.w	r2, r3, #10
 80007a0:	4613      	mov	r3, r2
 80007a2:	005b      	lsls	r3, r3, #1
 80007a4:	4413      	add	r3, r2
 80007a6:	fa01 f303 	lsl.w	r3, r1, r3
 80007aa:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007ac:	68fa      	ldr	r2, [r7, #12]
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	4313      	orrs	r3, r2
 80007b2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	68fa      	ldr	r2, [r7, #12]
 80007b8:	611a      	str	r2, [r3, #16]
 80007ba:	e01e      	b.n	80007fa <ADC_RegularChannelConfig+0x14a>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	695b      	ldr	r3, [r3, #20]
 80007c0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 80007c2:	78fa      	ldrb	r2, [r7, #3]
 80007c4:	4613      	mov	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	4413      	add	r3, r2
 80007ca:	2207      	movs	r2, #7
 80007cc:	fa02 f303 	lsl.w	r3, r2, r3
 80007d0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	43db      	mvns	r3, r3
 80007d6:	68fa      	ldr	r2, [r7, #12]
 80007d8:	4013      	ands	r3, r2
 80007da:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80007dc:	7879      	ldrb	r1, [r7, #1]
 80007de:	78fa      	ldrb	r2, [r7, #3]
 80007e0:	4613      	mov	r3, r2
 80007e2:	005b      	lsls	r3, r3, #1
 80007e4:	4413      	add	r3, r2
 80007e6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ea:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007ec:	68fa      	ldr	r2, [r7, #12]
 80007ee:	68bb      	ldr	r3, [r7, #8]
 80007f0:	4313      	orrs	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	68fa      	ldr	r2, [r7, #12]
 80007f8:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80007fa:	78bb      	ldrb	r3, [r7, #2]
 80007fc:	2b06      	cmp	r3, #6
 80007fe:	d821      	bhi.n	8000844 <ADC_RegularChannelConfig+0x194>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000806:	78bb      	ldrb	r3, [r7, #2]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	221f      	movs	r2, #31
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	43db      	mvns	r3, r3
 800081c:	68fa      	ldr	r2, [r7, #12]
 800081e:	4013      	ands	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000822:	78f9      	ldrb	r1, [r7, #3]
 8000824:	78bb      	ldrb	r3, [r7, #2]
 8000826:	1e5a      	subs	r2, r3, #1
 8000828:	4613      	mov	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	4413      	add	r3, r2
 800082e:	fa01 f303 	lsl.w	r3, r1, r3
 8000832:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	68bb      	ldr	r3, [r7, #8]
 8000838:	4313      	orrs	r3, r2
 800083a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68fa      	ldr	r2, [r7, #12]
 8000840:	641a      	str	r2, [r3, #64]	; 0x40
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000842:	e095      	b.n	8000970 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000844:	78bb      	ldrb	r3, [r7, #2]
 8000846:	2b0c      	cmp	r3, #12
 8000848:	d821      	bhi.n	800088e <ADC_RegularChannelConfig+0x1de>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800084e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000850:	78bb      	ldrb	r3, [r7, #2]
 8000852:	1fda      	subs	r2, r3, #7
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	221f      	movs	r2, #31
 800085c:	fa02 f303 	lsl.w	r3, r2, r3
 8000860:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	43db      	mvns	r3, r3
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	4013      	ands	r3, r2
 800086a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800086c:	78f9      	ldrb	r1, [r7, #3]
 800086e:	78bb      	ldrb	r3, [r7, #2]
 8000870:	1fda      	subs	r2, r3, #7
 8000872:	4613      	mov	r3, r2
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	4413      	add	r3, r2
 8000878:	fa01 f303 	lsl.w	r3, r1, r3
 800087c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800087e:	68fa      	ldr	r2, [r7, #12]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	4313      	orrs	r3, r2
 8000884:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 800088c:	e070      	b.n	8000970 <ADC_RegularChannelConfig+0x2c0>
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 800088e:	78bb      	ldrb	r3, [r7, #2]
 8000890:	2b12      	cmp	r3, #18
 8000892:	d823      	bhi.n	80008dc <ADC_RegularChannelConfig+0x22c>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000898:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 800089a:	78bb      	ldrb	r3, [r7, #2]
 800089c:	f1a3 020d 	sub.w	r2, r3, #13
 80008a0:	4613      	mov	r3, r2
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	4413      	add	r3, r2
 80008a6:	221f      	movs	r2, #31
 80008a8:	fa02 f303 	lsl.w	r3, r2, r3
 80008ac:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008ae:	68bb      	ldr	r3, [r7, #8]
 80008b0:	43db      	mvns	r3, r3
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	4013      	ands	r3, r2
 80008b6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 80008b8:	78f9      	ldrb	r1, [r7, #3]
 80008ba:	78bb      	ldrb	r3, [r7, #2]
 80008bc:	f1a3 020d 	sub.w	r2, r3, #13
 80008c0:	4613      	mov	r3, r2
 80008c2:	009b      	lsls	r3, r3, #2
 80008c4:	4413      	add	r3, r2
 80008c6:	fa01 f303 	lsl.w	r3, r1, r3
 80008ca:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80008cc:	68fa      	ldr	r2, [r7, #12]
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	68fa      	ldr	r2, [r7, #12]
 80008d8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 80008da:	e049      	b.n	8000970 <ADC_RegularChannelConfig+0x2c0>
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 80008dc:	78bb      	ldrb	r3, [r7, #2]
 80008de:	2b18      	cmp	r3, #24
 80008e0:	d823      	bhi.n	800092a <ADC_RegularChannelConfig+0x27a>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 80008e8:	78bb      	ldrb	r3, [r7, #2]
 80008ea:	f1a3 0213 	sub.w	r2, r3, #19
 80008ee:	4613      	mov	r3, r2
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	4413      	add	r3, r2
 80008f4:	221f      	movs	r2, #31
 80008f6:	fa02 f303 	lsl.w	r3, r2, r3
 80008fa:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	43db      	mvns	r3, r3
 8000900:	68fa      	ldr	r2, [r7, #12]
 8000902:	4013      	ands	r3, r2
 8000904:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000906:	78f9      	ldrb	r1, [r7, #3]
 8000908:	78bb      	ldrb	r3, [r7, #2]
 800090a:	f1a3 0213 	sub.w	r2, r3, #19
 800090e:	4613      	mov	r3, r2
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	4413      	add	r3, r2
 8000914:	fa01 f303 	lsl.w	r3, r1, r3
 8000918:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 800091a:	68fa      	ldr	r2, [r7, #12]
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	68fa      	ldr	r2, [r7, #12]
 8000926:	635a      	str	r2, [r3, #52]	; 0x34
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000928:	e022      	b.n	8000970 <ADC_RegularChannelConfig+0x2c0>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000930:	78bb      	ldrb	r3, [r7, #2]
 8000932:	f1a3 0219 	sub.w	r2, r3, #25
 8000936:	4613      	mov	r3, r2
 8000938:	009b      	lsls	r3, r3, #2
 800093a:	4413      	add	r3, r2
 800093c:	221f      	movs	r2, #31
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000944:	68bb      	ldr	r3, [r7, #8]
 8000946:	43db      	mvns	r3, r3
 8000948:	68fa      	ldr	r2, [r7, #12]
 800094a:	4013      	ands	r3, r2
 800094c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 800094e:	78f9      	ldrb	r1, [r7, #3]
 8000950:	78bb      	ldrb	r3, [r7, #2]
 8000952:	f1a3 0219 	sub.w	r2, r3, #25
 8000956:	4613      	mov	r3, r2
 8000958:	009b      	lsls	r3, r3, #2
 800095a:	4413      	add	r3, r2
 800095c:	fa01 f303 	lsl.w	r3, r1, r3
 8000960:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000962:	68fa      	ldr	r2, [r7, #12]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	4313      	orrs	r3, r2
 8000968:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000970:	bf00      	nop
 8000972:	3714      	adds	r7, #20
 8000974:	46bd      	mov	sp, r7
 8000976:	bc80      	pop	{r7}
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	609a      	str	r2, [r3, #8]
}
 8000990:	bf00      	nop
 8000992:	370c      	adds	r7, #12
 8000994:	46bd      	mov	sp, r7
 8000996:	bc80      	pop	{r7}
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <ADC_ITConfig>:
  * @param  NewState: new state of the specified ADC interrupts.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_ITConfig(ADC_TypeDef* ADCx, uint16_t ADC_IT, FunctionalState NewState)  
{
 800099c:	b480      	push	{r7}
 800099e:	b085      	sub	sp, #20
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
 80009a4:	460b      	mov	r3, r1
 80009a6:	807b      	strh	r3, [r7, #2]
 80009a8:	4613      	mov	r3, r2
 80009aa:	707b      	strb	r3, [r7, #1]
  uint32_t itmask = 0;
 80009ac:	2300      	movs	r3, #0
 80009ae:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  assert_param(IS_ADC_IT(ADC_IT)); 

  /* Get the ADC IT index */
  itmask = (uint8_t)ADC_IT;
 80009b0:	887b      	ldrh	r3, [r7, #2]
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	60fb      	str	r3, [r7, #12]
  itmask = (uint32_t)0x01 << itmask;    
 80009b6:	2201      	movs	r2, #1
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	fa02 f303 	lsl.w	r3, r2, r3
 80009be:	60fb      	str	r3, [r7, #12]

  if (NewState != DISABLE)
 80009c0:	787b      	ldrb	r3, [r7, #1]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <ADC_ITConfig+0x38>
  {
    /* Enable the selected ADC interrupts */
    ADCx->CR1 |= itmask;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	685a      	ldr	r2, [r3, #4]
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	431a      	orrs	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	605a      	str	r2, [r3, #4]
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
  }
}
 80009d2:	e006      	b.n	80009e2 <ADC_ITConfig+0x46>
    ADCx->CR1 |= itmask;
  }
  else
  {
    /* Disable the selected ADC interrupts */
    ADCx->CR1 &= (~(uint32_t)itmask);
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685a      	ldr	r2, [r3, #4]
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	43db      	mvns	r3, r3
 80009dc:	401a      	ands	r2, r3
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	605a      	str	r2, [r3, #4]
  }
}
 80009e2:	bf00      	nop
 80009e4:	3714      	adds	r7, #20
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bc80      	pop	{r7}
 80009ea:	4770      	bx	lr

080009ec <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 80009f8:	2300      	movs	r3, #0
 80009fa:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681a      	ldr	r2, [r3, #0]
 8000a00:	887b      	ldrh	r3, [r7, #2]
 8000a02:	4013      	ands	r3, r2
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d002      	beq.n	8000a0e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	73fb      	strb	r3, [r7, #15]
 8000a0c:	e001      	b.n	8000a12 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000a12:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a14:	4618      	mov	r0, r3
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bc80      	pop	{r7}
 8000a1c:	4770      	bx	lr
 8000a1e:	bf00      	nop

08000a20 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b087      	sub	sp, #28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
 8000a2e:	2300      	movs	r3, #0
 8000a30:	613b      	str	r3, [r7, #16]
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
 8000a3a:	e07e      	b.n	8000b3a <GPIO_Init+0x11a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	697b      	ldr	r3, [r7, #20]
 8000a40:	fa02 f303 	lsl.w	r3, r2, r3
 8000a44:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	693b      	ldr	r3, [r7, #16]
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	429a      	cmp	r2, r3
 8000a56:	d16d      	bne.n	8000b34 <GPIO_Init+0x114>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681a      	ldr	r2, [r3, #0]
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	2103      	movs	r1, #3
 8000a62:	fa01 f303 	lsl.w	r3, r1, r3
 8000a66:	43db      	mvns	r3, r3
 8000a68:	401a      	ands	r2, r3
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	791b      	ldrb	r3, [r3, #4]
 8000a76:	4619      	mov	r1, r3
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	005b      	lsls	r3, r3, #1
 8000a7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a80:	431a      	orrs	r2, r3
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	791b      	ldrb	r3, [r3, #4]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d003      	beq.n	8000a96 <GPIO_Init+0x76>
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	791b      	ldrb	r3, [r3, #4]
 8000a92:	2b02      	cmp	r3, #2
 8000a94:	d136      	bne.n	8000b04 <GPIO_Init+0xe4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	689a      	ldr	r2, [r3, #8]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	005b      	lsls	r3, r3, #1
 8000a9e:	2103      	movs	r1, #3
 8000aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8000aa4:	43db      	mvns	r3, r3
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	689a      	ldr	r2, [r3, #8]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	795b      	ldrb	r3, [r3, #5]
 8000ab4:	4619      	mov	r1, r3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa01 f303 	lsl.w	r3, r1, r3
 8000abe:	431a      	orrs	r2, r3
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	889b      	ldrh	r3, [r3, #4]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	2101      	movs	r1, #1
 8000ad0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad4:	b29b      	uxth	r3, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	4013      	ands	r3, r2
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	889b      	ldrh	r3, [r3, #4]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	b21a      	sxth	r2, r3
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	799b      	ldrb	r3, [r3, #6]
 8000aee:	4619      	mov	r1, r3
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	b29b      	uxth	r3, r3
 8000af4:	fa01 f303 	lsl.w	r3, r1, r3
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	4313      	orrs	r3, r2
 8000afc:	b21b      	sxth	r3, r3
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	68da      	ldr	r2, [r3, #12]
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	b29b      	uxth	r3, r3
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2103      	movs	r1, #3
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	401a      	ands	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	79db      	ldrb	r3, [r3, #7]
 8000b24:	4619      	mov	r1, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000b34:	697b      	ldr	r3, [r7, #20]
 8000b36:	3301      	adds	r3, #1
 8000b38:	617b      	str	r3, [r7, #20]
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	2b0f      	cmp	r3, #15
 8000b3e:	f67f af7d 	bls.w	8000a3c <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000b42:	bf00      	nop
 8000b44:	371c      	adds	r7, #28
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bc80      	pop	{r7}
 8000b4a:	4770      	bx	lr

08000b4c <GPIO_PinAFConfig>:
  *        alternate function I/O pins.  
  * @note EVENTOUT is not mapped on PH0, PH1 and PH2.  
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
 8000b54:	460b      	mov	r3, r1
 8000b56:	807b      	strh	r3, [r7, #2]
 8000b58:	4613      	mov	r3, r2
 8000b5a:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b64:	787a      	ldrb	r2, [r7, #1]
 8000b66:	887b      	ldrh	r3, [r7, #2]
 8000b68:	f003 0307 	and.w	r3, r3, #7
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b72:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	08db      	lsrs	r3, r3, #3
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	08db      	lsrs	r3, r3, #3
 8000b80:	b29b      	uxth	r3, r3
 8000b82:	461a      	mov	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3208      	adds	r2, #8
 8000b88:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000b8c:	887b      	ldrh	r3, [r7, #2]
 8000b8e:	f003 0307 	and.w	r3, r3, #7
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	210f      	movs	r1, #15
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	43db      	mvns	r3, r3
 8000b9c:	ea02 0103 	and.w	r1, r2, r3
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	f100 0208 	add.w	r2, r0, #8
 8000ba6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 8000baa:	887b      	ldrh	r3, [r7, #2]
 8000bac:	08db      	lsrs	r3, r3, #3
 8000bae:	b29b      	uxth	r3, r3
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	3208      	adds	r2, #8
 8000bb6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000bc0:	887b      	ldrh	r3, [r7, #2]
 8000bc2:	08db      	lsrs	r3, r3, #3
 8000bc4:	b29b      	uxth	r3, r3
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3208      	adds	r2, #8
 8000bcc:	68b9      	ldr	r1, [r7, #8]
 8000bce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000bd2:	bf00      	nop
 8000bd4:	3714      	adds	r7, #20
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bc80      	pop	{r7}
 8000bda:	4770      	bx	lr

08000bdc <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <RCC_HSICmd+0x1c>)
 8000be8:	79fb      	ldrb	r3, [r7, #7]
 8000bea:	6013      	str	r3, [r2, #0]
}
 8000bec:	bf00      	nop
 8000bee:	370c      	adds	r7, #12
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bc80      	pop	{r7}
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	42470000 	.word	0x42470000

08000bfc <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	460b      	mov	r3, r1
 8000c06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000c08:	78fb      	ldrb	r3, [r7, #3]
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d006      	beq.n	8000c1c <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 8000c0e:	4909      	ldr	r1, [pc, #36]	; (8000c34 <RCC_AHBPeriphClockCmd+0x38>)
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <RCC_AHBPeriphClockCmd+0x38>)
 8000c12:	69da      	ldr	r2, [r3, #28]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	61cb      	str	r3, [r1, #28]
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
  }
}
 8000c1a:	e006      	b.n	8000c2a <RCC_AHBPeriphClockCmd+0x2e>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000c1c:	4905      	ldr	r1, [pc, #20]	; (8000c34 <RCC_AHBPeriphClockCmd+0x38>)
 8000c1e:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <RCC_AHBPeriphClockCmd+0x38>)
 8000c20:	69da      	ldr	r2, [r3, #28]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	4013      	ands	r3, r2
 8000c28:	61cb      	str	r3, [r1, #28]
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	370c      	adds	r7, #12
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bc80      	pop	{r7}
 8000c32:	4770      	bx	lr
 8000c34:	40023800 	.word	0x40023800

08000c38 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	460b      	mov	r3, r1
 8000c42:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000c44:	78fb      	ldrb	r3, [r7, #3]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d006      	beq.n	8000c58 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000c4a:	4909      	ldr	r1, [pc, #36]	; (8000c70 <RCC_APB2PeriphClockCmd+0x38>)
 8000c4c:	4b08      	ldr	r3, [pc, #32]	; (8000c70 <RCC_APB2PeriphClockCmd+0x38>)
 8000c4e:	6a1a      	ldr	r2, [r3, #32]
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4313      	orrs	r3, r2
 8000c54:	620b      	str	r3, [r1, #32]
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000c56:	e006      	b.n	8000c66 <RCC_APB2PeriphClockCmd+0x2e>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000c58:	4905      	ldr	r1, [pc, #20]	; (8000c70 <RCC_APB2PeriphClockCmd+0x38>)
 8000c5a:	4b05      	ldr	r3, [pc, #20]	; (8000c70 <RCC_APB2PeriphClockCmd+0x38>)
 8000c5c:	6a1a      	ldr	r2, [r3, #32]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	4013      	ands	r3, r2
 8000c64:	620b      	str	r3, [r1, #32]
  }
}
 8000c66:	bf00      	nop
 8000c68:	370c      	adds	r7, #12
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bc80      	pop	{r7}
 8000c6e:	4770      	bx	lr
 8000c70:	40023800 	.word	0x40023800

08000c74 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b087      	sub	sp, #28
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000c7e:	2300      	movs	r3, #0
 8000c80:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000c86:	2300      	movs	r3, #0
 8000c88:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	095b      	lsrs	r3, r3, #5
 8000c8e:	b2db      	uxtb	r3, r3
 8000c90:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d103      	bne.n	8000ca0 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000c98:	4b0e      	ldr	r3, [pc, #56]	; (8000cd4 <RCC_GetFlagStatus+0x60>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e002      	b.n	8000ca6 <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000ca0:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <RCC_GetFlagStatus+0x60>)
 8000ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ca4:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 031f 	and.w	r3, r3, #31
 8000cac:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000cae:	697a      	ldr	r2, [r7, #20]
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	fa22 f303 	lsr.w	r3, r2, r3
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d002      	beq.n	8000cc4 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000cbe:	2301      	movs	r3, #1
 8000cc0:	74fb      	strb	r3, [r7, #19]
 8000cc2:	e001      	b.n	8000cc8 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000cc8:	7cfb      	ldrb	r3, [r7, #19]
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	371c      	adds	r7, #28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <SPI_Init>:
  * @param  SPI_InitStruct: pointer to a SPI_InitTypeDef structure that
  *         contains the configuration information for the specified SPI peripheral.
  * @retval None
  */
void SPI_Init(SPI_TypeDef* SPIx, SPI_InitTypeDef* SPI_InitStruct)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b085      	sub	sp, #20
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	81fb      	strh	r3, [r7, #14]
  assert_param(IS_SPI_FIRST_BIT(SPI_InitStruct->SPI_FirstBit));
  assert_param(IS_SPI_CRC_POLYNOMIAL(SPI_InitStruct->SPI_CRCPolynomial));

/*---------------------------- SPIx CR1 Configuration ------------------------*/
  /* Get the SPIx CR1 value */
  tmpreg = SPIx->CR1;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	881b      	ldrh	r3, [r3, #0]
 8000cea:	81fb      	strh	r3, [r7, #14]
  /* Clear BIDIMode, BIDIOE, RxONLY, SSM, SSI, LSBFirst, BR, MSTR, CPOL and CPHA bits */
  tmpreg &= CR1_CLEAR_MASK;
 8000cec:	89fb      	ldrh	r3, [r7, #14]
 8000cee:	f403 5341 	and.w	r3, r3, #12352	; 0x3040
 8000cf2:	81fb      	strh	r3, [r7, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	881a      	ldrh	r2, [r3, #0]
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	885b      	ldrh	r3, [r3, #2]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	889b      	ldrh	r3, [r3, #4]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d04:	4313      	orrs	r3, r2
 8000d06:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	88db      	ldrh	r3, [r3, #6]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	891b      	ldrh	r3, [r3, #8]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	895b      	ldrh	r3, [r3, #10]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	899b      	ldrh	r3, [r3, #12]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d24:	4313      	orrs	r3, r2
 8000d26:	b29a      	uxth	r2, r3
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	89db      	ldrh	r3, [r3, #14]
  /* Set SSM, SSI and MSTR bits according to SPI_Mode and SPI_NSS values */
  /* Set LSBFirst bit according to SPI_FirstBit value */
  /* Set BR bits according to SPI_BaudRatePrescaler value */
  /* Set CPOL bit according to SPI_CPOL value */
  /* Set CPHA bit according to SPI_CPHA value */
  tmpreg |= (uint16_t)((uint32_t)SPI_InitStruct->SPI_Direction | SPI_InitStruct->SPI_Mode |
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	b29a      	uxth	r2, r3
 8000d30:	89fb      	ldrh	r3, [r7, #14]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	81fb      	strh	r3, [r7, #14]
                  SPI_InitStruct->SPI_DataSize | SPI_InitStruct->SPI_CPOL |  
                  SPI_InitStruct->SPI_CPHA | SPI_InitStruct->SPI_NSS |  
                  SPI_InitStruct->SPI_BaudRatePrescaler | SPI_InitStruct->SPI_FirstBit);
  /* Write to SPIx CR1 */
  SPIx->CR1 = tmpreg;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	89fa      	ldrh	r2, [r7, #14]
 8000d3a:	801a      	strh	r2, [r3, #0]

  /* Activate the SPI mode (Reset I2SMOD bit in I2SCFGR register) */
  SPIx->I2SCFGR &= (uint16_t)~((uint16_t)SPI_I2SCFGR_I2SMOD);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	8b9b      	ldrh	r3, [r3, #28]
 8000d40:	b29b      	uxth	r3, r3
 8000d42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	839a      	strh	r2, [r3, #28]
/*---------------------------- SPIx CRCPOLY Configuration --------------------*/
  /* Write to SPIx CRCPOLY */
  SPIx->CRCPR = SPI_InitStruct->SPI_CRCPolynomial;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	8a1a      	ldrh	r2, [r3, #16]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	821a      	strh	r2, [r3, #16]
}
 8000d54:	bf00      	nop
 8000d56:	3714      	adds	r7, #20
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bc80      	pop	{r7}
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop

08000d60 <SPI_Cmd>:
  * @param  NewState: new state of the SPIx peripheral. 
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void SPI_Cmd(SPI_TypeDef* SPIx, FunctionalState NewState)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b083      	sub	sp, #12
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	460b      	mov	r3, r1
 8000d6a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000d6c:	78fb      	ldrb	r3, [r7, #3]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <SPI_Cmd+0x24>
  {
    /* Enable the selected SPI peripheral */
    SPIx->CR1 |= SPI_CR1_SPE;
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d7c:	b29a      	uxth	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	801a      	strh	r2, [r3, #0]
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
  }
}
 8000d82:	e007      	b.n	8000d94 <SPI_Cmd+0x34>
    SPIx->CR1 |= SPI_CR1_SPE;
  }
  else
  {
    /* Disable the selected SPI peripheral */
    SPIx->CR1 &= (uint16_t)~((uint16_t)SPI_CR1_SPE);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	881b      	ldrh	r3, [r3, #0]
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000d8e:	b29a      	uxth	r2, r3
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	801a      	strh	r2, [r3, #0]
  }
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bc80      	pop	{r7}
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop

08000da0 <SPI_I2S_GetFlagStatus>:
  *     @arg I2S_FLAG_UDR: Underrun Error flag.
  *     @arg I2S_FLAG_CHSIDE: Channel Side flag.
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b085      	sub	sp, #20
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	460b      	mov	r3, r1
 8000daa:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	891b      	ldrh	r3, [r3, #8]
 8000db4:	b29a      	uxth	r2, r3
 8000db6:	887b      	ldrh	r3, [r7, #2]
 8000db8:	4013      	ands	r3, r2
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d002      	beq.n	8000dc6 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	73fb      	strb	r3, [r7, #15]
 8000dc4:	e001      	b.n	8000dca <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000dca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bc80      	pop	{r7}
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <TIM_GetITStatus>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_FLAG_CC1
  *     interrupt      
  * @retval The new state of the TIM_IT(SET or RESET).
  */
ITStatus TIM_GetITStatus(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b085      	sub	sp, #20
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	460b      	mov	r3, r1
 8000de2:	807b      	strh	r3, [r7, #2]
  ITStatus bitstatus = RESET;  
 8000de4:	2300      	movs	r3, #0
 8000de6:	73fb      	strb	r3, [r7, #15]
  uint16_t itstatus = 0x0, itenable = 0x0;
 8000de8:	2300      	movs	r3, #0
 8000dea:	81bb      	strh	r3, [r7, #12]
 8000dec:	2300      	movs	r3, #0
 8000dee:	817b      	strh	r3, [r7, #10]
  
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_GET_IT(TIM_IT));
   
  itstatus = TIMx->SR & TIM_IT;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	8a1b      	ldrh	r3, [r3, #16]
 8000df4:	b29a      	uxth	r2, r3
 8000df6:	887b      	ldrh	r3, [r7, #2]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	81bb      	strh	r3, [r7, #12]
  
  itenable = TIMx->DIER & TIM_IT;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	899b      	ldrh	r3, [r3, #12]
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	887b      	ldrh	r3, [r7, #2]
 8000e04:	4013      	ands	r3, r2
 8000e06:	817b      	strh	r3, [r7, #10]
  if ((itstatus != (uint16_t)RESET) && (itenable != (uint16_t)RESET))
 8000e08:	89bb      	ldrh	r3, [r7, #12]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d005      	beq.n	8000e1a <TIM_GetITStatus+0x42>
 8000e0e:	897b      	ldrh	r3, [r7, #10]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d002      	beq.n	8000e1a <TIM_GetITStatus+0x42>
  {
    bitstatus = SET;
 8000e14:	2301      	movs	r3, #1
 8000e16:	73fb      	strb	r3, [r7, #15]
 8000e18:	e001      	b.n	8000e1e <TIM_GetITStatus+0x46>
  }
  else
  {
    bitstatus = RESET;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3714      	adds	r7, #20
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bc80      	pop	{r7}
 8000e28:	4770      	bx	lr
 8000e2a:	bf00      	nop

08000e2c <TIM_ClearITPendingBit>:
  * @note TIM10 and TIM11 can have only update interrupt or TIM_IT_CC1
  *     interrupt        
  * @retval None
  */
void TIM_ClearITPendingBit(TIM_TypeDef* TIMx, uint16_t TIM_IT)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	b083      	sub	sp, #12
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
 8000e34:	460b      	mov	r3, r1
 8000e36:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_TIM_ALL_PERIPH(TIMx));
  assert_param(IS_TIM_IT(TIM_IT));
   
  /* Clear the IT pending Bit */
  TIMx->SR = (uint16_t)~TIM_IT;
 8000e38:	887b      	ldrh	r3, [r7, #2]
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	b29a      	uxth	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	821a      	strh	r2, [r3, #16]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000e58:	78fb      	ldrb	r3, [r7, #3]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d008      	beq.n	8000e70 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	899b      	ldrh	r3, [r3, #12]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000e68:	b29a      	uxth	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000e6e:	e007      	b.n	8000e80 <USART_Cmd+0x34>
    USARTx->CR1 |= USART_CR1_UE;
  }
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	899b      	ldrh	r3, [r3, #12]
 8000e74:	b29b      	uxth	r3, r3
 8000e76:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	819a      	strh	r2, [r3, #12]
  }
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop

08000e8c <USART_ITConfig>:
  * @param  NewState: new state of the specified USARTx interrupts.
  *   This parameter can be: ENABLE or DISABLE.
  * @retval None.
  */
void USART_ITConfig(USART_TypeDef* USARTx, uint16_t USART_IT, FunctionalState NewState)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b087      	sub	sp, #28
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	460b      	mov	r3, r1
 8000e96:	807b      	strh	r3, [r7, #2]
 8000e98:	4613      	mov	r3, r2
 8000e9a:	707b      	strb	r3, [r7, #1]
  uint32_t usartreg = 0x00, itpos = 0x00, itmask = 0x00;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  uint32_t usartxbase = 0x00;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  if (USART_IT == USART_IT_CTS)
  {
    assert_param(IS_USART_123_PERIPH(USARTx));
  } 
    
  usartxbase = (uint32_t)USARTx;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	617b      	str	r3, [r7, #20]

  /* Get the USART register index */
  usartreg = (((uint8_t)USART_IT) >> 0x05);
 8000eb0:	887b      	ldrh	r3, [r7, #2]
 8000eb2:	b2db      	uxtb	r3, r3
 8000eb4:	095b      	lsrs	r3, r3, #5
 8000eb6:	b2db      	uxtb	r3, r3
 8000eb8:	613b      	str	r3, [r7, #16]

  /* Get the interrupt position */
  itpos = USART_IT & IT_MASK;
 8000eba:	887b      	ldrh	r3, [r7, #2]
 8000ebc:	f003 031f 	and.w	r3, r3, #31
 8000ec0:	60fb      	str	r3, [r7, #12]
  itmask = (((uint32_t)0x01) << itpos);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	60bb      	str	r3, [r7, #8]
    
  if (usartreg == 0x01) /* The IT is in CR1 register */
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	2b01      	cmp	r3, #1
 8000ed0:	d103      	bne.n	8000eda <USART_ITConfig+0x4e>
  {
    usartxbase += 0x0C;
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	330c      	adds	r3, #12
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	e009      	b.n	8000eee <USART_ITConfig+0x62>
  }
  else if (usartreg == 0x02) /* The IT is in CR2 register */
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	2b02      	cmp	r3, #2
 8000ede:	d103      	bne.n	8000ee8 <USART_ITConfig+0x5c>
  {
    usartxbase += 0x10;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	3310      	adds	r3, #16
 8000ee4:	617b      	str	r3, [r7, #20]
 8000ee6:	e002      	b.n	8000eee <USART_ITConfig+0x62>
  }
  else /* The IT is in CR3 register */
  {
    usartxbase += 0x14; 
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3314      	adds	r3, #20
 8000eec:	617b      	str	r3, [r7, #20]
  }
  if (NewState != DISABLE)
 8000eee:	787b      	ldrb	r3, [r7, #1]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d006      	beq.n	8000f02 <USART_ITConfig+0x76>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	697a      	ldr	r2, [r7, #20]
 8000ef8:	6811      	ldr	r1, [r2, #0]
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	430a      	orrs	r2, r1
 8000efe:	601a      	str	r2, [r3, #0]
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
  }
}
 8000f00:	e006      	b.n	8000f10 <USART_ITConfig+0x84>
  {
    *(__IO uint32_t*)usartxbase  |= itmask;
  }
  else
  {
    *(__IO uint32_t*)usartxbase &= ~itmask;
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	697a      	ldr	r2, [r7, #20]
 8000f06:	6811      	ldr	r1, [r2, #0]
 8000f08:	68ba      	ldr	r2, [r7, #8]
 8000f0a:	43d2      	mvns	r2, r2
 8000f0c:	400a      	ands	r2, r1
 8000f0e:	601a      	str	r2, [r3, #0]
  }
}
 8000f10:	bf00      	nop
 8000f12:	371c      	adds	r7, #28
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop

08000f1c <lcdReset>:

// Low-level LCD driving functions --------------------------------------------------------------------------

// Reset the LCD hardware
void lcdReset(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
	// Reset pin is active low (0 = reset, 1 = ready)
	res_reset();
 8000f20:	f000 fcb2 	bl	8001888 <res_reset>
	Delay(10000);
 8000f24:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f28:	f000 fe58 	bl	8001bdc <Delay>

	res_set();
 8000f2c:	f000 fca0 	bl	8001870 <res_set>
	Delay(10000);
 8000f30:	f242 7010 	movw	r0, #10000	; 0x2710
 8000f34:	f000 fe52 	bl	8001bdc <Delay>
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <lcdWriteCommand>:

void lcdWriteCommand(uint8_t address)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	71fb      	strb	r3, [r7, #7]
	cd_reset();
 8000f46:	f000 fc69 	bl	800181c <cd_reset>

	readWriteSPI2(address);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f000 fbf9 	bl	8001744 <readWriteSPI2>
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop

08000f5c <lcdWriteParameter>:

void lcdWriteParameter(uint8_t parameter)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
	cd_set();
 8000f66:	f000 fc4d 	bl	8001804 <cd_set>

	readWriteSPI2(parameter);
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 fbe9 	bl	8001744 <readWriteSPI2>
}
 8000f72:	bf00      	nop
 8000f74:	3708      	adds	r7, #8
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}
 8000f7a:	bf00      	nop

08000f7c <lcdWriteData>:

void lcdWriteData(uint8_t dataByte1, uint8_t dataByte2)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	4603      	mov	r3, r0
 8000f84:	460a      	mov	r2, r1
 8000f86:	71fb      	strb	r3, [r7, #7]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	71bb      	strb	r3, [r7, #6]
	cd_set();
 8000f8c:	f000 fc3a 	bl	8001804 <cd_set>

	readWriteSPI2(dataByte1);
 8000f90:	79fb      	ldrb	r3, [r7, #7]
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fbd6 	bl	8001744 <readWriteSPI2>
	readWriteSPI2(dataByte2);
 8000f98:	79bb      	ldrb	r3, [r7, #6]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f000 fbd2 	bl	8001744 <readWriteSPI2>
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <lcdInitialise>:

// Initialise the display with the require screen orientation
void lcdInitialise(uint8_t orientation)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	4603      	mov	r3, r0
 8000fb0:	71fb      	strb	r3, [r7, #7]
	// Set up the IO ports for communication with the LCD


	// Hardware reset the LCD
	lcdReset();
 8000fb2:	f7ff ffb3 	bl	8000f1c <lcdReset>

    lcdWriteCommand(EXIT_SLEEP_MODE);
 8000fb6:	2011      	movs	r0, #17
 8000fb8:	f7ff ffc0 	bl	8000f3c <lcdWriteCommand>
    Delay(10000); // Wait for the screen to wake up
 8000fbc:	f242 7010 	movw	r0, #10000	; 0x2710
 8000fc0:	f000 fe0c 	bl	8001bdc <Delay>

    lcdWriteCommand(SET_PIXEL_FORMAT);
 8000fc4:	203a      	movs	r0, #58	; 0x3a
 8000fc6:	f7ff ffb9 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x05); // 16 bits per pixel
 8000fca:	2005      	movs	r0, #5
 8000fcc:	f7ff ffc6 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(SET_GAMMA_CURVE);
 8000fd0:	2026      	movs	r0, #38	; 0x26
 8000fd2:	f7ff ffb3 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x04); // Select gamma curve 3
 8000fd6:	2004      	movs	r0, #4
 8000fd8:	f7ff ffc0 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(GAM_R_SEL);
 8000fdc:	20f2      	movs	r0, #242	; 0xf2
 8000fde:	f7ff ffad 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x01); // Gamma adjustment enabled
 8000fe2:	2001      	movs	r0, #1
 8000fe4:	f7ff ffba 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(POSITIVE_GAMMA_CORRECT);
 8000fe8:	20e0      	movs	r0, #224	; 0xe0
 8000fea:	f7ff ffa7 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x3f); // 1st Parameter
 8000fee:	203f      	movs	r0, #63	; 0x3f
 8000ff0:	f7ff ffb4 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 2nd Parameter
 8000ff4:	2025      	movs	r0, #37	; 0x25
 8000ff6:	f7ff ffb1 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x1c); // 3rd Parameter
 8000ffa:	201c      	movs	r0, #28
 8000ffc:	f7ff ffae 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x1e); // 4th Parameter
 8001000:	201e      	movs	r0, #30
 8001002:	f7ff ffab 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 5th Parameter
 8001006:	2020      	movs	r0, #32
 8001008:	f7ff ffa8 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x12); // 6th Parameter
 800100c:	2012      	movs	r0, #18
 800100e:	f7ff ffa5 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 7th Parameter
 8001012:	202a      	movs	r0, #42	; 0x2a
 8001014:	f7ff ffa2 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x90); // 8th Parameter
 8001018:	2090      	movs	r0, #144	; 0x90
 800101a:	f7ff ff9f 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x24); // 9th Parameter
 800101e:	2024      	movs	r0, #36	; 0x24
 8001020:	f7ff ff9c 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x11); // 10th Parameter
 8001024:	2011      	movs	r0, #17
 8001026:	f7ff ff99 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 11th Parameter
 800102a:	2000      	movs	r0, #0
 800102c:	f7ff ff96 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 12th Parameter
 8001030:	2000      	movs	r0, #0
 8001032:	f7ff ff93 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 13th Parameter
 8001036:	2000      	movs	r0, #0
 8001038:	f7ff ff90 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 14th Parameter
 800103c:	2000      	movs	r0, #0
 800103e:	f7ff ff8d 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 15th Parameter
 8001042:	2000      	movs	r0, #0
 8001044:	f7ff ff8a 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(NEGATIVE_GAMMA_CORRECT);
 8001048:	20e1      	movs	r0, #225	; 0xe1
 800104a:	f7ff ff77 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x20); // 1st Parameter
 800104e:	2020      	movs	r0, #32
 8001050:	f7ff ff84 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 2nd Parameter
 8001054:	2020      	movs	r0, #32
 8001056:	f7ff ff81 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 3rd Parameter
 800105a:	2020      	movs	r0, #32
 800105c:	f7ff ff7e 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x20); // 4th Parameter
 8001060:	2020      	movs	r0, #32
 8001062:	f7ff ff7b 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x05); // 5th Parameter
 8001066:	2005      	movs	r0, #5
 8001068:	f7ff ff78 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // 6th Parameter
 800106c:	2000      	movs	r0, #0
 800106e:	f7ff ff75 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x15); // 7th Parameter
 8001072:	2015      	movs	r0, #21
 8001074:	f7ff ff72 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0xa7); // 8th Parameter
 8001078:	20a7      	movs	r0, #167	; 0xa7
 800107a:	f7ff ff6f 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x3d); // 9th Parameter
 800107e:	203d      	movs	r0, #61	; 0x3d
 8001080:	f7ff ff6c 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x18); // 10th Parameter
 8001084:	2018      	movs	r0, #24
 8001086:	f7ff ff69 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x25); // 11th Parameter
 800108a:	2025      	movs	r0, #37	; 0x25
 800108c:	f7ff ff66 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x2a); // 12th Parameter
 8001090:	202a      	movs	r0, #42	; 0x2a
 8001092:	f7ff ff63 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 13th Parameter
 8001096:	202b      	movs	r0, #43	; 0x2b
 8001098:	f7ff ff60 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x2b); // 14th Parameter
 800109c:	202b      	movs	r0, #43	; 0x2b
 800109e:	f7ff ff5d 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x3a); // 15th Parameter
 80010a2:	203a      	movs	r0, #58	; 0x3a
 80010a4:	f7ff ff5a 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(FRAME_RATE_CONTROL1);
 80010a8:	20b1      	movs	r0, #177	; 0xb1
 80010aa:	f7ff ff47 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x08); // DIVA = 8
 80010ae:	2008      	movs	r0, #8
 80010b0:	f7ff ff54 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x08); // VPA = 8
 80010b4:	2008      	movs	r0, #8
 80010b6:	f7ff ff51 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(DISPLAY_INVERSION);
 80010ba:	20b4      	movs	r0, #180	; 0xb4
 80010bc:	f7ff ff3e 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x07); // NLA = 1, NLB = 1, NLC = 1 (all on Frame Inversion)
 80010c0:	2007      	movs	r0, #7
 80010c2:	f7ff ff4b 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL1);
 80010c6:	20c0      	movs	r0, #192	; 0xc0
 80010c8:	f7ff ff38 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x0a); // VRH = 10:  GVDD = 4.30
 80010cc:	200a      	movs	r0, #10
 80010ce:	f7ff ff45 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x02); // VC = 2: VCI1 = 2.65
 80010d2:	2002      	movs	r0, #2
 80010d4:	f7ff ff42 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(POWER_CONTROL2);
 80010d8:	20c1      	movs	r0, #193	; 0xc1
 80010da:	f7ff ff2f 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x02); // BT = 2: AVDD = 2xVCI1, VCL = -1xVCI1, VGH = 5xVCI1, VGL = -2xVCI1
 80010de:	2002      	movs	r0, #2
 80010e0:	f7ff ff3c 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(VCOM_CONTROL1);
 80010e4:	20c5      	movs	r0, #197	; 0xc5
 80010e6:	f7ff ff29 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x50); // VMH = 80: VCOMH voltage = 4.5
 80010ea:	2050      	movs	r0, #80	; 0x50
 80010ec:	f7ff ff36 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x5b); // VML = 91: VCOML voltage = -0.225
 80010f0:	205b      	movs	r0, #91	; 0x5b
 80010f2:	f7ff ff33 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(VCOM_OFFSET_CONTROL);
 80010f6:	20c7      	movs	r0, #199	; 0xc7
 80010f8:	f7ff ff20 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x40); // nVM = 0, VMF = 64: VCOMH output = VMH, VCOML output = VML
 80010fc:	2040      	movs	r0, #64	; 0x40
 80010fe:	f7ff ff2d 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(SET_COLUMN_ADDRESS);
 8001102:	202a      	movs	r0, #42	; 0x2a
 8001104:	f7ff ff1a 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x00); // XSH
 8001108:	2000      	movs	r0, #0
 800110a:	f7ff ff27 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XSL
 800110e:	2000      	movs	r0, #0
 8001110:	f7ff ff24 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00); // XEH
 8001114:	2000      	movs	r0, #0
 8001116:	f7ff ff21 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // XEL (128 pixels x)
 800111a:	207f      	movs	r0, #127	; 0x7f
 800111c:	f7ff ff1e 	bl	8000f5c <lcdWriteParameter>

    lcdWriteCommand(SET_PAGE_ADDRESS);
 8001120:	202b      	movs	r0, #43	; 0x2b
 8001122:	f7ff ff0b 	bl	8000f3c <lcdWriteCommand>
    lcdWriteParameter(0x00);
 8001126:	2000      	movs	r0, #0
 8001128:	f7ff ff18 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f7ff ff15 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f7ff ff12 	bl	8000f5c <lcdWriteParameter>
    lcdWriteParameter(0x7f); // 128 pixels y
 8001138:	207f      	movs	r0, #127	; 0x7f
 800113a:	f7ff ff0f 	bl	8000f5c <lcdWriteParameter>

	// Select display orientation
    lcdWriteCommand(SET_ADDRESS_MODE);
 800113e:	2036      	movs	r0, #54	; 0x36
 8001140:	f7ff fefc 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(orientation);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	4618      	mov	r0, r3
 8001148:	f7ff ff08 	bl	8000f5c <lcdWriteParameter>

	// Set the display to on
    lcdWriteCommand(SET_DISPLAY_ON);
 800114c:	2029      	movs	r0, #41	; 0x29
 800114e:	f7ff fef5 	bl	8000f3c <lcdWriteCommand>
    lcdWriteCommand(WRITE_MEMORY_START);
 8001152:	202c      	movs	r0, #44	; 0x2c
 8001154:	f7ff fef2 	bl	8000f3c <lcdWriteCommand>
}
 8001158:	bf00      	nop
 800115a:	3708      	adds	r7, #8
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <lcdClearDisplay>:

// LCD graphics functions -----------------------------------------------------------------------------------

void lcdClearDisplay(uint16_t colour)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b084      	sub	sp, #16
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	80fb      	strh	r3, [r7, #6]
	uint16_t pixel;

	// Set the column address to 0-127
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 800116a:	202a      	movs	r0, #42	; 0x2a
 800116c:	f7ff fee6 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001170:	2000      	movs	r0, #0
 8001172:	f7ff fef3 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001176:	2000      	movs	r0, #0
 8001178:	f7ff fef0 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800117c:	2000      	movs	r0, #0
 800117e:	f7ff feed 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001182:	207f      	movs	r0, #127	; 0x7f
 8001184:	f7ff feea 	bl	8000f5c <lcdWriteParameter>

	// Set the page address to 0-127
	lcdWriteCommand(SET_PAGE_ADDRESS);
 8001188:	202b      	movs	r0, #43	; 0x2b
 800118a:	f7ff fed7 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800118e:	2000      	movs	r0, #0
 8001190:	f7ff fee4 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001194:	2000      	movs	r0, #0
 8001196:	f7ff fee1 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 800119a:	2000      	movs	r0, #0
 800119c:	f7ff fede 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 80011a0:	207f      	movs	r0, #127	; 0x7f
 80011a2:	f7ff fedb 	bl	8000f5c <lcdWriteParameter>

	// Plot the pixels
	lcdWriteCommand(WRITE_MEMORY_START);
 80011a6:	202c      	movs	r0, #44	; 0x2c
 80011a8:	f7ff fec8 	bl	8000f3c <lcdWriteCommand>
	for(pixel = 0; pixel < 16385; pixel++) lcdWriteData(colour >> 8, colour);
 80011ac:	2300      	movs	r3, #0
 80011ae:	81fb      	strh	r3, [r7, #14]
 80011b0:	e00c      	b.n	80011cc <lcdClearDisplay+0x6c>
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	0a1b      	lsrs	r3, r3, #8
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	b2db      	uxtb	r3, r3
 80011ba:	88fa      	ldrh	r2, [r7, #6]
 80011bc:	b2d2      	uxtb	r2, r2
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f7ff fedb 	bl	8000f7c <lcdWriteData>
 80011c6:	89fb      	ldrh	r3, [r7, #14]
 80011c8:	3301      	adds	r3, #1
 80011ca:	81fb      	strh	r3, [r7, #14]
 80011cc:	89fb      	ldrh	r3, [r7, #14]
 80011ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80011d2:	d9ee      	bls.n	80011b2 <lcdClearDisplay+0x52>
}
 80011d4:	bf00      	nop
 80011d6:	3710      	adds	r7, #16
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}

080011dc <lcdPlot>:

void lcdPlot(uint8_t x, uint8_t y, uint16_t colour)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	71fb      	strb	r3, [r7, #7]
 80011e6:	460b      	mov	r3, r1
 80011e8:	71bb      	strb	r3, [r7, #6]
 80011ea:	4613      	mov	r3, r2
 80011ec:	80bb      	strh	r3, [r7, #4]
	// Horizontal Address Start Position
	lcdWriteCommand(SET_COLUMN_ADDRESS);
 80011ee:	202a      	movs	r0, #42	; 0x2a
 80011f0:	f7ff fea4 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 80011f4:	2000      	movs	r0, #0
 80011f6:	f7ff feb1 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(x);
 80011fa:	79fb      	ldrb	r3, [r7, #7]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff fead 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff feaa 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 8001208:	207f      	movs	r0, #127	; 0x7f
 800120a:	f7ff fea7 	bl	8000f5c <lcdWriteParameter>

	// Vertical Address end Position
	lcdWriteCommand(SET_PAGE_ADDRESS);
 800120e:	202b      	movs	r0, #43	; 0x2b
 8001210:	f7ff fe94 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fea1 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(y);
 800121a:	79bb      	ldrb	r3, [r7, #6]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff fe9d 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001222:	2000      	movs	r0, #0
 8001224:	f7ff fe9a 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);//7f
 8001228:	207f      	movs	r0, #127	; 0x7f
 800122a:	f7ff fe97 	bl	8000f5c <lcdWriteParameter>

	// Plot the point
	lcdWriteCommand(WRITE_MEMORY_START);
 800122e:	202c      	movs	r0, #44	; 0x2c
 8001230:	f7ff fe84 	bl	8000f3c <lcdWriteCommand>
	lcdWriteData(colour >> 8, colour);
 8001234:	88bb      	ldrh	r3, [r7, #4]
 8001236:	0a1b      	lsrs	r3, r3, #8
 8001238:	b29b      	uxth	r3, r3
 800123a:	b2db      	uxtb	r3, r3
 800123c:	88ba      	ldrh	r2, [r7, #4]
 800123e:	b2d2      	uxtb	r2, r2
 8001240:	4611      	mov	r1, r2
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe9a 	bl	8000f7c <lcdWriteData>
}
 8001248:	bf00      	nop
 800124a:	3708      	adds	r7, #8
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}

08001250 <lcdLine>:

// Draw a line from x0, y0 to x1, y1
// Note:	This is a version of Bresenham's line drawing algorithm
//			It only draws lines from left to right!
void lcdLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t colour)
{
 8001250:	b590      	push	{r4, r7, lr}
 8001252:	b087      	sub	sp, #28
 8001254:	af00      	add	r7, sp, #0
 8001256:	4604      	mov	r4, r0
 8001258:	4608      	mov	r0, r1
 800125a:	4611      	mov	r1, r2
 800125c:	461a      	mov	r2, r3
 800125e:	4623      	mov	r3, r4
 8001260:	80fb      	strh	r3, [r7, #6]
 8001262:	4603      	mov	r3, r0
 8001264:	80bb      	strh	r3, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	807b      	strh	r3, [r7, #2]
 800126a:	4613      	mov	r3, r2
 800126c:	803b      	strh	r3, [r7, #0]
	int16_t dy = y1 - y0;
 800126e:	883a      	ldrh	r2, [r7, #0]
 8001270:	88bb      	ldrh	r3, [r7, #4]
 8001272:	1ad3      	subs	r3, r2, r3
 8001274:	b29b      	uxth	r3, r3
 8001276:	82fb      	strh	r3, [r7, #22]
	int16_t dx = x1 - x0;
 8001278:	887a      	ldrh	r2, [r7, #2]
 800127a:	88fb      	ldrh	r3, [r7, #6]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	b29b      	uxth	r3, r3
 8001280:	82bb      	strh	r3, [r7, #20]
	int16_t stepx, stepy;

	if (dy < 0)
 8001282:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001286:	2b00      	cmp	r3, #0
 8001288:	da07      	bge.n	800129a <lcdLine+0x4a>
	{
		dy = -dy; stepy = -1;
 800128a:	8afb      	ldrh	r3, [r7, #22]
 800128c:	425b      	negs	r3, r3
 800128e:	b29b      	uxth	r3, r3
 8001290:	82fb      	strh	r3, [r7, #22]
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001296:	823b      	strh	r3, [r7, #16]
 8001298:	e001      	b.n	800129e <lcdLine+0x4e>
	}
	else stepy = 1;
 800129a:	2301      	movs	r3, #1
 800129c:	823b      	strh	r3, [r7, #16]

 	if (dx < 0)
 800129e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	da07      	bge.n	80012b6 <lcdLine+0x66>
	{
		dx = -dx; stepx = -1;
 80012a6:	8abb      	ldrh	r3, [r7, #20]
 80012a8:	425b      	negs	r3, r3
 80012aa:	b29b      	uxth	r3, r3
 80012ac:	82bb      	strh	r3, [r7, #20]
 80012ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b2:	827b      	strh	r3, [r7, #18]
 80012b4:	e001      	b.n	80012ba <lcdLine+0x6a>
	}
	else stepx = 1;
 80012b6:	2301      	movs	r3, #1
 80012b8:	827b      	strh	r3, [r7, #18]

	dy <<= 1; 							// dy is now 2*dy
 80012ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012be:	005b      	lsls	r3, r3, #1
 80012c0:	82fb      	strh	r3, [r7, #22]
	dx <<= 1; 							// dx is now 2*dx
 80012c2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012c6:	005b      	lsls	r3, r3, #1
 80012c8:	82bb      	strh	r3, [r7, #20]

	lcdPlot(x0, y0, colour);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	88ba      	ldrh	r2, [r7, #4]
 80012d0:	b2d1      	uxtb	r1, r2
 80012d2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff ff81 	bl	80011dc <lcdPlot>

	if (dx > dy) {
 80012da:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012de:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dd2e      	ble.n	8001344 <lcdLine+0xf4>
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
 80012e6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012ea:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012ee:	1052      	asrs	r2, r2, #1
 80012f0:	b212      	sxth	r2, r2
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	60fb      	str	r3, [r7, #12]
		while (x0 != x1)
 80012f6:	e01e      	b.n	8001336 <lcdLine+0xe6>
		{
			if (fraction >= 0)
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	db09      	blt.n	8001312 <lcdLine+0xc2>
			{
				y0 += stepy;
 80012fe:	88ba      	ldrh	r2, [r7, #4]
 8001300:	8a3b      	ldrh	r3, [r7, #16]
 8001302:	4413      	add	r3, r2
 8001304:	b29b      	uxth	r3, r3
 8001306:	80bb      	strh	r3, [r7, #4]
				fraction -= dx; 		// same as fraction -= 2*dx
 8001308:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800130c:	68fa      	ldr	r2, [r7, #12]
 800130e:	1ad3      	subs	r3, r2, r3
 8001310:	60fb      	str	r3, [r7, #12]
			}

   			x0 += stepx;
 8001312:	88fa      	ldrh	r2, [r7, #6]
 8001314:	8a7b      	ldrh	r3, [r7, #18]
 8001316:	4413      	add	r3, r2
 8001318:	b29b      	uxth	r3, r3
 800131a:	80fb      	strh	r3, [r7, #6]
   			fraction += dy; 				// same as fraction -= 2*dy
 800131c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001320:	68fa      	ldr	r2, [r7, #12]
 8001322:	4413      	add	r3, r2
 8001324:	60fb      	str	r3, [r7, #12]
   			lcdPlot(x0, y0, colour);
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	b2db      	uxtb	r3, r3
 800132a:	88ba      	ldrh	r2, [r7, #4]
 800132c:	b2d1      	uxtb	r1, r2
 800132e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff ff53 	bl	80011dc <lcdPlot>

	lcdPlot(x0, y0, colour);

	if (dx > dy) {
		int fraction = dy - (dx >> 1);	// same as 2*dy - dx
		while (x0 != x1)
 8001336:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800133a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800133e:	429a      	cmp	r2, r3
 8001340:	d1da      	bne.n	80012f8 <lcdLine+0xa8>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 8001342:	e02d      	b.n	80013a0 <lcdLine+0x150>
   			lcdPlot(x0, y0, colour);
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
 8001344:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001348:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800134c:	1052      	asrs	r2, r2, #1
 800134e:	b212      	sxth	r2, r2
 8001350:	1a9b      	subs	r3, r3, r2
 8001352:	60bb      	str	r3, [r7, #8]
		while (y0 != y1)
 8001354:	e01e      	b.n	8001394 <lcdLine+0x144>
		{
			if (fraction >= 0)
 8001356:	68bb      	ldr	r3, [r7, #8]
 8001358:	2b00      	cmp	r3, #0
 800135a:	db09      	blt.n	8001370 <lcdLine+0x120>
			{
				x0 += stepx;
 800135c:	88fa      	ldrh	r2, [r7, #6]
 800135e:	8a7b      	ldrh	r3, [r7, #18]
 8001360:	4413      	add	r3, r2
 8001362:	b29b      	uxth	r3, r3
 8001364:	80fb      	strh	r3, [r7, #6]
				fraction -= dy;
 8001366:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	60bb      	str	r3, [r7, #8]
			}

			y0 += stepy;
 8001370:	88ba      	ldrh	r2, [r7, #4]
 8001372:	8a3b      	ldrh	r3, [r7, #16]
 8001374:	4413      	add	r3, r2
 8001376:	b29b      	uxth	r3, r3
 8001378:	80bb      	strh	r3, [r7, #4]
			fraction += dx;
 800137a:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800137e:	68ba      	ldr	r2, [r7, #8]
 8001380:	4413      	add	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
			lcdPlot(x0, y0, colour);
 8001384:	88fb      	ldrh	r3, [r7, #6]
 8001386:	b2db      	uxtb	r3, r3
 8001388:	88ba      	ldrh	r2, [r7, #4]
 800138a:	b2d1      	uxtb	r1, r2
 800138c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800138e:	4618      	mov	r0, r3
 8001390:	f7ff ff24 	bl	80011dc <lcdPlot>
		}
	}
	else
	{
		int fraction = dx - (dy >> 1);
		while (y0 != y1)
 8001394:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001398:	f9b7 3000 	ldrsh.w	r3, [r7]
 800139c:	429a      	cmp	r2, r3
 800139e:	d1da      	bne.n	8001356 <lcdLine+0x106>
			y0 += stepy;
			fraction += dx;
			lcdPlot(x0, y0, colour);
		}
	}
}
 80013a0:	bf00      	nop
 80013a2:	371c      	adds	r7, #28
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd90      	pop	{r4, r7, pc}

080013a8 <lcdPlnyTrojuholnik>:
		lcdWriteData(colour >> 8, colour);;
}

// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b087      	sub	sp, #28
 80013ac:	af02      	add	r7, sp, #8
 80013ae:	4604      	mov	r4, r0
 80013b0:	4608      	mov	r0, r1
 80013b2:	4611      	mov	r1, r2
 80013b4:	461a      	mov	r2, r3
 80013b6:	4623      	mov	r3, r4
 80013b8:	80fb      	strh	r3, [r7, #6]
 80013ba:	4603      	mov	r3, r0
 80013bc:	80bb      	strh	r3, [r7, #4]
 80013be:	460b      	mov	r3, r1
 80013c0:	807b      	strh	r3, [r7, #2]
 80013c2:	4613      	mov	r3, r2
 80013c4:	803b      	strh	r3, [r7, #0]
	uint16_t pixels;
	uint16_t c = (B-A)/2;
 80013c6:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 80013ca:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	0fda      	lsrs	r2, r3, #31
 80013d2:	4413      	add	r3, r2
 80013d4:	105b      	asrs	r3, r3, #1
 80013d6:	81bb      	strh	r3, [r7, #12]
	for(pixels = 0; pixels < c+1; pixels++){
 80013d8:	2300      	movs	r3, #0
 80013da:	81fb      	strh	r3, [r7, #14]
 80013dc:	e01c      	b.n	8001418 <lcdPlnyTrojuholnik+0x70>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	89fb      	ldrh	r3, [r7, #14]
 80013e2:	4413      	add	r3, r2
 80013e4:	b29b      	uxth	r3, r3
 80013e6:	b218      	sxth	r0, r3
 80013e8:	887a      	ldrh	r2, [r7, #2]
 80013ea:	89fb      	ldrh	r3, [r7, #14]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	b219      	sxth	r1, r3
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	89fb      	ldrh	r3, [r7, #14]
 80013f6:	4413      	add	r3, r2
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	b21c      	sxth	r4, r3
 80013fc:	88ba      	ldrh	r2, [r7, #4]
 80013fe:	89fb      	ldrh	r3, [r7, #14]
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	b21a      	sxth	r2, r3
 8001406:	883b      	ldrh	r3, [r7, #0]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4613      	mov	r3, r2
 800140c:	4622      	mov	r2, r4
 800140e:	f7ff ff1f 	bl	8001250 <lcdLine>
// x0 posunutie od kraja displeja
// funkcia kresli len rovnoramenny trojuholnik
int16_t lcdPlnyTrojuholnik(int16_t x0, int16_t A, int16_t B, uint16_t colour){
	uint16_t pixels;
	uint16_t c = (B-A)/2;
	for(pixels = 0; pixels < c+1; pixels++){
 8001412:	89fb      	ldrh	r3, [r7, #14]
 8001414:	3301      	adds	r3, #1
 8001416:	81fb      	strh	r3, [r7, #14]
 8001418:	89fa      	ldrh	r2, [r7, #14]
 800141a:	89bb      	ldrh	r3, [r7, #12]
 800141c:	3301      	adds	r3, #1
 800141e:	429a      	cmp	r2, r3
 8001420:	dbdd      	blt.n	80013de <lcdPlnyTrojuholnik+0x36>
		lcdLine(x0+pixels, B-pixels, x0+pixels, A+pixels, colour);
	}
	return A;
 8001422:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3714      	adds	r7, #20
 800142a:	46bd      	mov	sp, r7
 800142c:	bd90      	pop	{r4, r7, pc}
 800142e:	bf00      	nop

08001430 <lcdPutCh>:

// LCD text manipulation functions --------------------------------------------------------------------------
#define pgm_read_byte_near(address_short) (uint16_t)(address_short)
// Plot a character at the specified x, y co-ordinates (top left hand corner of character)
void lcdPutCh(unsigned char character, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0
 8001436:	4604      	mov	r4, r0
 8001438:	4608      	mov	r0, r1
 800143a:	4611      	mov	r1, r2
 800143c:	461a      	mov	r2, r3
 800143e:	4623      	mov	r3, r4
 8001440:	71fb      	strb	r3, [r7, #7]
 8001442:	4603      	mov	r3, r0
 8001444:	71bb      	strb	r3, [r7, #6]
 8001446:	460b      	mov	r3, r1
 8001448:	717b      	strb	r3, [r7, #5]
 800144a:	4613      	mov	r3, r2
 800144c:	807b      	strh	r3, [r7, #2]

	// To speed up plotting we define a x window of 6 pixels and then
	// write out one row at a time.  This means the LCD will correctly
	// update the memory pointer saving us a good few bytes

	lcdWriteCommand(SET_COLUMN_ADDRESS); // Horizontal Address Start Position
 800144e:	202a      	movs	r0, #42	; 0x2a
 8001450:	f7ff fd74 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 8001454:	2000      	movs	r0, #0
 8001456:	f7ff fd81 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(x);
 800145a:	79bb      	ldrb	r3, [r7, #6]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fd7d 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001462:	2000      	movs	r0, #0
 8001464:	f7ff fd7a 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(x+5);
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	3305      	adds	r3, #5
 800146c:	b2db      	uxtb	r3, r3
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fd74 	bl	8000f5c <lcdWriteParameter>

	lcdWriteCommand(SET_PAGE_ADDRESS); // Vertical Address end Position
 8001474:	202b      	movs	r0, #43	; 0x2b
 8001476:	f7ff fd61 	bl	8000f3c <lcdWriteCommand>
	lcdWriteParameter(0x00);
 800147a:	2000      	movs	r0, #0
 800147c:	f7ff fd6e 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(y);
 8001480:	797b      	ldrb	r3, [r7, #5]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff fd6a 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x00);
 8001488:	2000      	movs	r0, #0
 800148a:	f7ff fd67 	bl	8000f5c <lcdWriteParameter>
	lcdWriteParameter(0x7f);
 800148e:	207f      	movs	r0, #127	; 0x7f
 8001490:	f7ff fd64 	bl	8000f5c <lcdWriteParameter>

	lcdWriteCommand(WRITE_MEMORY_START);
 8001494:	202c      	movs	r0, #44	; 0x2c
 8001496:	f7ff fd51 	bl	8000f3c <lcdWriteCommand>

	// Plot the font data
	for (row = 0; row < 8; row++)
 800149a:	2300      	movs	r3, #0
 800149c:	73fb      	strb	r3, [r7, #15]
 800149e:	e032      	b.n	8001506 <lcdPutCh+0xd6>
	{
		for (column = 0; column < 6; column++)
 80014a0:	2300      	movs	r3, #0
 80014a2:	73bb      	strb	r3, [r7, #14]
 80014a4:	e029      	b.n	80014fa <lcdPutCh+0xca>
		{
			if ((font5x8[character][column]) & (1 << row))
 80014a6:	79fa      	ldrb	r2, [r7, #7]
 80014a8:	7bb9      	ldrb	r1, [r7, #14]
 80014aa:	481a      	ldr	r0, [pc, #104]	; (8001514 <lcdPutCh+0xe4>)
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4403      	add	r3, r0
 80014b6:	440b      	add	r3, r1
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	7bfb      	ldrb	r3, [r7, #15]
 80014be:	fa42 f303 	asr.w	r3, r2, r3
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d00a      	beq.n	80014e0 <lcdPutCh+0xb0>
				lcdWriteData(fgColour>>8, fgColour);
 80014ca:	887b      	ldrh	r3, [r7, #2]
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	b29b      	uxth	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	887a      	ldrh	r2, [r7, #2]
 80014d4:	b2d2      	uxtb	r2, r2
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff fd4f 	bl	8000f7c <lcdWriteData>
 80014de:	e009      	b.n	80014f4 <lcdPutCh+0xc4>
			else lcdWriteData(bgColour >> 8, bgColour);
 80014e0:	8c3b      	ldrh	r3, [r7, #32]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	8c3a      	ldrh	r2, [r7, #32]
 80014ea:	b2d2      	uxtb	r2, r2
 80014ec:	4611      	mov	r1, r2
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fd44 	bl	8000f7c <lcdWriteData>
	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
	{
		for (column = 0; column < 6; column++)
 80014f4:	7bbb      	ldrb	r3, [r7, #14]
 80014f6:	3301      	adds	r3, #1
 80014f8:	73bb      	strb	r3, [r7, #14]
 80014fa:	7bbb      	ldrb	r3, [r7, #14]
 80014fc:	2b05      	cmp	r3, #5
 80014fe:	d9d2      	bls.n	80014a6 <lcdPutCh+0x76>
	lcdWriteParameter(0x7f);

	lcdWriteCommand(WRITE_MEMORY_START);

	// Plot the font data
	for (row = 0; row < 8; row++)
 8001500:	7bfb      	ldrb	r3, [r7, #15]
 8001502:	3301      	adds	r3, #1
 8001504:	73fb      	strb	r3, [r7, #15]
 8001506:	7bfb      	ldrb	r3, [r7, #15]
 8001508:	2b07      	cmp	r3, #7
 800150a:	d9c9      	bls.n	80014a0 <lcdPutCh+0x70>
			if ((font5x8[character][column]) & (1 << row))
				lcdWriteData(fgColour>>8, fgColour);
			else lcdWriteData(bgColour >> 8, bgColour);
		}
	}
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	bd90      	pop	{r4, r7, pc}
 8001514:	080022ac 	.word	0x080022ac

08001518 <decodeRgbValue>:

// Translates a 3 byte RGB value into a 2 byte value for the LCD (values should be 0-31)
uint16_t decodeRgbValue(uint8_t r, uint8_t g, uint8_t b)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]
 8001522:	460b      	mov	r3, r1
 8001524:	71bb      	strb	r3, [r7, #6]
 8001526:	4613      	mov	r3, r2
 8001528:	717b      	strb	r3, [r7, #5]
	return (b << 11) | (g << 6) | (r);
 800152a:	797b      	ldrb	r3, [r7, #5]
 800152c:	02db      	lsls	r3, r3, #11
 800152e:	b21a      	sxth	r2, r3
 8001530:	79bb      	ldrb	r3, [r7, #6]
 8001532:	019b      	lsls	r3, r3, #6
 8001534:	b21b      	sxth	r3, r3
 8001536:	4313      	orrs	r3, r2
 8001538:	b21a      	sxth	r2, r3
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21b      	sxth	r3, r3
 8001542:	b29b      	uxth	r3, r3
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop

08001550 <lcdPutS>:
// it easy to place text
uint8_t lcdTextY(uint8_t y) { return y*8; }

// Plot a string of characters to the LCD
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
 8001550:	b590      	push	{r4, r7, lr}
 8001552:	b087      	sub	sp, #28
 8001554:	af02      	add	r7, sp, #8
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4603      	mov	r3, r0
 8001560:	70fb      	strb	r3, [r7, #3]
 8001562:	460b      	mov	r3, r1
 8001564:	70bb      	strb	r3, [r7, #2]
 8001566:	4613      	mov	r3, r2
 8001568:	803b      	strh	r3, [r7, #0]
	uint8_t origin = x;
 800156a:	78fb      	ldrb	r3, [r7, #3]
 800156c:	73bb      	strb	r3, [r7, #14]
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 800156e:	2300      	movs	r3, #0
 8001570:	73fb      	strb	r3, [r7, #15]
 8001572:	e01c      	b.n	80015ae <lcdPutS+0x5e>
	{
		// Check if we are out of bounds and move to
		// the next line if we are
		if (x > 121)
 8001574:	78fb      	ldrb	r3, [r7, #3]
 8001576:	2b79      	cmp	r3, #121	; 0x79
 8001578:	d904      	bls.n	8001584 <lcdPutS+0x34>
		{
			x = origin;
 800157a:	7bbb      	ldrb	r3, [r7, #14]
 800157c:	70fb      	strb	r3, [r7, #3]
			y += 8;
 800157e:	78bb      	ldrb	r3, [r7, #2]
 8001580:	3308      	adds	r3, #8
 8001582:	70bb      	strb	r3, [r7, #2]
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 8001584:	78bb      	ldrb	r3, [r7, #2]
 8001586:	2b78      	cmp	r3, #120	; 0x78
 8001588:	d819      	bhi.n	80015be <lcdPutS+0x6e>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
 800158a:	7bfb      	ldrb	r3, [r7, #15]
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	4413      	add	r3, r2
 8001590:	7818      	ldrb	r0, [r3, #0]
 8001592:	883c      	ldrh	r4, [r7, #0]
 8001594:	78ba      	ldrb	r2, [r7, #2]
 8001596:	78f9      	ldrb	r1, [r7, #3]
 8001598:	8c3b      	ldrh	r3, [r7, #32]
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	4623      	mov	r3, r4
 800159e:	f7ff ff47 	bl	8001430 <lcdPutCh>
		x += 6;
 80015a2:	78fb      	ldrb	r3, [r7, #3]
 80015a4:	3306      	adds	r3, #6
 80015a6:	70fb      	strb	r3, [r7, #3]
void lcdPutS(const char *string, uint8_t x, uint8_t y, uint16_t fgColour, uint16_t bgColour)
{
	uint8_t origin = x;
	uint8_t characterNumber;

	for (characterNumber = 0; characterNumber < strlen(string); characterNumber++)
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	3301      	adds	r3, #1
 80015ac:	73fb      	strb	r3, [r7, #15]
 80015ae:	7bfc      	ldrb	r4, [r7, #15]
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7fe fde3 	bl	800017c <strlen>
 80015b6:	4603      	mov	r3, r0
 80015b8:	429c      	cmp	r4, r3
 80015ba:	d3db      	bcc.n	8001574 <lcdPutS+0x24>

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 80015bc:	e000      	b.n	80015c0 <lcdPutS+0x70>
			x = origin;
			y += 8;
		}

		// If we move past the bottom of the screen just exit
		if (y > 120) break;
 80015be:	bf00      	nop

		// Plot the current character
		lcdPutCh(string[characterNumber], x, y, fgColour, bgColour);
		x += 6;
	}
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd90      	pop	{r4, r7, pc}

080015c8 <ADC1_IRQHandler>:
**  Abstract: main program
**
**===========================================================================
*/

void ADC1_IRQHandler(void){		//handler k ADC
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	if (ADC1->SR & ADC_SR_EOC) {
 80015cc:	4b07      	ldr	r3, [pc, #28]	; (80015ec <ADC1_IRQHandler+0x24>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f003 0302 	and.w	r3, r3, #2
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d004      	beq.n	80015e2 <ADC1_IRQHandler+0x1a>
		klavesnica = ADC1->DR;
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <ADC1_IRQHandler+0x24>)
 80015da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015dc:	b29a      	uxth	r2, r3
 80015de:	4b04      	ldr	r3, [pc, #16]	; (80015f0 <ADC1_IRQHandler+0x28>)
 80015e0:	801a      	strh	r2, [r3, #0]
		}
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bc80      	pop	{r7}
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	40012400 	.word	0x40012400
 80015f0:	20000036 	.word	0x20000036

080015f4 <main>:

int main(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	af00      	add	r7, sp, #0
	initSPI2();
 80015f8:	f000 f854 	bl	80016a4 <initSPI2>
	initGPIO();
 80015fc:	f000 fd5e 	bl	80020bc <initGPIO>
	initCD_Pin();
 8001600:	f000 f8e2 	bl	80017c8 <initCD_Pin>
	initCS_Pin();
 8001604:	f000 f8c2 	bl	800178c <initCS_Pin>
	initRES_Pin();
 8001608:	f000 f914 	bl	8001834 <initRES_Pin>
	initMenu();
 800160c:	f000 fce8 	bl	8001fe0 <initMenu>
	adc_init();
 8001610:	f000 fd7c 	bl	800210c <adc_init>
	nvic_init();
 8001614:	f000 fdb6 	bl	8002184 <nvic_init>

	while (1)
	{
		pohybMenu(klavesnica);
 8001618:	4b03      	ldr	r3, [pc, #12]	; (8001628 <main+0x34>)
 800161a:	881b      	ldrh	r3, [r3, #0]
 800161c:	b29b      	uxth	r3, r3
 800161e:	4618      	mov	r0, r3
 8001620:	f000 faf0 	bl	8001c04 <pohybMenu>
	}
 8001624:	e7f8      	b.n	8001618 <main+0x24>
 8001626:	bf00      	nop
 8001628:	20000036 	.word	0x20000036

0800162c <TIM7_IRQHandler>:
static uint16_t backlitModulo = 0;
static uint16_t shimmerModulo = 0;
static uint16_t shimmerDutyCycle = SHIMMER_DUTY_CYCLE;

void TIM7_IRQHandler(void)
{
 800162c:	b598      	push	{r3, r4, r7, lr}
 800162e:	af00      	add	r7, sp, #0
	if (TIM_GetITStatus(TIM7, TIM_IT_Update) == SET)
 8001630:	2101      	movs	r1, #1
 8001632:	4817      	ldr	r0, [pc, #92]	; (8001690 <TIM7_IRQHandler+0x64>)
 8001634:	f7ff fbd0 	bl	8000dd8 <TIM_GetITStatus>
 8001638:	4603      	mov	r3, r0
 800163a:	2b01      	cmp	r3, #1
 800163c:	d126      	bne.n	800168c <TIM7_IRQHandler+0x60>
	{
		backlitTimer++;
 800163e:	4b15      	ldr	r3, [pc, #84]	; (8001694 <TIM7_IRQHandler+0x68>)
 8001640:	cb18      	ldmia	r3, {r3, r4}
 8001642:	3301      	adds	r3, #1
 8001644:	f144 0400 	adc.w	r4, r4, #0
 8001648:	4a12      	ldr	r2, [pc, #72]	; (8001694 <TIM7_IRQHandler+0x68>)
 800164a:	e882 0018 	stmia.w	r2, {r3, r4}

		shimmerModulo = backlitTimer % SHIMMER_PERIOD;
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <TIM7_IRQHandler+0x68>)
 8001650:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001654:	f242 7210 	movw	r2, #10000	; 0x2710
 8001658:	f04f 0300 	mov.w	r3, #0
 800165c:	f7fe fd96 	bl	800018c <__aeabi_uldivmod>
 8001660:	461c      	mov	r4, r3
 8001662:	4613      	mov	r3, r2
 8001664:	b29a      	uxth	r2, r3
 8001666:	4b0c      	ldr	r3, [pc, #48]	; (8001698 <TIM7_IRQHandler+0x6c>)
 8001668:	801a      	strh	r2, [r3, #0]

		if(shimmerDutyCycle < shimmerModulo)
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <TIM7_IRQHandler+0x70>)
 800166c:	881a      	ldrh	r2, [r3, #0]
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <TIM7_IRQHandler+0x6c>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d203      	bcs.n	800167e <TIM7_IRQHandler+0x52>
		{
			gShimmerFlag = 0;
 8001676:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <TIM7_IRQHandler+0x74>)
 8001678:	2200      	movs	r2, #0
 800167a:	701a      	strb	r2, [r3, #0]
 800167c:	e002      	b.n	8001684 <TIM7_IRQHandler+0x58>
		}
		else
		{
			gShimmerFlag = 1;
 800167e:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <TIM7_IRQHandler+0x74>)
 8001680:	2201      	movs	r2, #1
 8001682:	701a      	strb	r2, [r3, #0]
				GPIOB->BSRRH = GPIO_Pin_0;
				GPIOA->BSRRH = GPIO_Pin_7;
			}
		}*/

		TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
 8001684:	2101      	movs	r1, #1
 8001686:	4802      	ldr	r0, [pc, #8]	; (8001690 <TIM7_IRQHandler+0x64>)
 8001688:	f7ff fbd0 	bl	8000e2c <TIM_ClearITPendingBit>
	}
}
 800168c:	bf00      	nop
 800168e:	bd98      	pop	{r3, r4, r7, pc}
 8001690:	40001400 	.word	0x40001400
 8001694:	20000028 	.word	0x20000028
 8001698:	20000030 	.word	0x20000030
 800169c:	20000000 	.word	0x20000000
 80016a0:	20000024 	.word	0x20000024

080016a4 <initSPI2>:
#include "mcu.h"

//TODO rework to STM32L mcu's

void initSPI2(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;

	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
 80016aa:	2101      	movs	r1, #1
 80016ac:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80016b0:	f7ff fac2 	bl	8000c38 <RCC_APB2PeriphClockCmd>
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 80016b4:	2101      	movs	r1, #1
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff faa0 	bl	8000bfc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
 80016bc:	2302      	movs	r3, #2
 80016be:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80016c0:	2300      	movs	r3, #0
 80016c2:	77bb      	strb	r3, [r7, #30]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80016c4:	2303      	movs	r3, #3
 80016c6:	777b      	strb	r3, [r7, #29]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80016c8:	2300      	movs	r3, #0
 80016ca:	77fb      	strb	r3, [r7, #31]

	//PB3 - SPI2_SCK
	//PB4 - SPI2_MISO
	//PB5 - SPI2_MOSI
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3|GPIO_Pin_4|GPIO_Pin_5;
 80016cc:	2338      	movs	r3, #56	; 0x38
 80016ce:	61bb      	str	r3, [r7, #24]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80016d0:	f107 0318 	add.w	r3, r7, #24
 80016d4:	4619      	mov	r1, r3
 80016d6:	4819      	ldr	r0, [pc, #100]	; (800173c <initSPI2+0x98>)
 80016d8:	f7ff f9a2 	bl	8000a20 <GPIO_Init>

	GPIO_PinAFConfig(GPIOB, GPIO_PinSource3, GPIO_AF_SPI1);
 80016dc:	2205      	movs	r2, #5
 80016de:	2103      	movs	r1, #3
 80016e0:	4816      	ldr	r0, [pc, #88]	; (800173c <initSPI2+0x98>)
 80016e2:	f7ff fa33 	bl	8000b4c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource4, GPIO_AF_SPI1);
 80016e6:	2205      	movs	r2, #5
 80016e8:	2104      	movs	r1, #4
 80016ea:	4814      	ldr	r0, [pc, #80]	; (800173c <initSPI2+0x98>)
 80016ec:	f7ff fa2e 	bl	8000b4c <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOB, GPIO_PinSource5, GPIO_AF_SPI1);
 80016f0:	2205      	movs	r2, #5
 80016f2:	2105      	movs	r1, #5
 80016f4:	4811      	ldr	r0, [pc, #68]	; (800173c <initSPI2+0x98>)
 80016f6:	f7ff fa29 	bl	8000b4c <GPIO_PinAFConfig>

	SPI_InitTypeDef  SPI_InitStructure;
	SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_2;
 80016fa:	2300      	movs	r3, #0
 80016fc:	823b      	strh	r3, [r7, #16]
	SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
 80016fe:	2300      	movs	r3, #0
 8001700:	81bb      	strh	r3, [r7, #12]
	SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
 8001702:	2300      	movs	r3, #0
 8001704:	817b      	strh	r3, [r7, #10]
	SPI_InitStructure.SPI_CRCPolynomial = SPI_CRC_Rx;
 8001706:	2301      	movs	r3, #1
 8001708:	82bb      	strh	r3, [r7, #20]
	SPI_InitStructure.SPI_DataSize = SPI_DataSize_8b;
 800170a:	2300      	movs	r3, #0
 800170c:	813b      	strh	r3, [r7, #8]
	SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;
 800170e:	2300      	movs	r3, #0
 8001710:	80bb      	strh	r3, [r7, #4]
	SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;
 8001712:	2300      	movs	r3, #0
 8001714:	827b      	strh	r3, [r7, #18]
	SPI_InitStructure.SPI_Mode = SPI_Mode_Master;
 8001716:	f44f 7382 	mov.w	r3, #260	; 0x104
 800171a:	80fb      	strh	r3, [r7, #6]
	SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;
 800171c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001720:	81fb      	strh	r3, [r7, #14]

	/* Apply SPI configuration after enabling it */
	SPI_Init(SPI1, &SPI_InitStructure);
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	4619      	mov	r1, r3
 8001726:	4806      	ldr	r0, [pc, #24]	; (8001740 <initSPI2+0x9c>)
 8001728:	f7ff fad6 	bl	8000cd8 <SPI_Init>
	/* SPI Peripheral Enable */
	SPI_Cmd(SPI1, ENABLE);
 800172c:	2101      	movs	r1, #1
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <initSPI2+0x9c>)
 8001730:	f7ff fb16 	bl	8000d60 <SPI_Cmd>
}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40020400 	.word	0x40020400
 8001740:	40013000 	.word	0x40013000

08001744 <readWriteSPI2>:

unsigned char readWriteSPI2(unsigned char txData)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b084      	sub	sp, #16
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
	unsigned char  rxData;

	SPI1->DR = txData;
 800174e:	4b0e      	ldr	r3, [pc, #56]	; (8001788 <readWriteSPI2+0x44>)
 8001750:	79fa      	ldrb	r2, [r7, #7]
 8001752:	b292      	uxth	r2, r2
 8001754:	819a      	strh	r2, [r3, #12]
	// wait until TXE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_TXE) != SET);
 8001756:	bf00      	nop
 8001758:	2102      	movs	r1, #2
 800175a:	480b      	ldr	r0, [pc, #44]	; (8001788 <readWriteSPI2+0x44>)
 800175c:	f7ff fb20 	bl	8000da0 <SPI_I2S_GetFlagStatus>
 8001760:	4603      	mov	r3, r0
 8001762:	2b01      	cmp	r3, #1
 8001764:	d1f8      	bne.n	8001758 <readWriteSPI2+0x14>
	// wait until RXNE = 1
	while(SPI_I2S_GetFlagStatus(SPI1,SPI_I2S_FLAG_RXNE) != SET);
 8001766:	bf00      	nop
 8001768:	2101      	movs	r1, #1
 800176a:	4807      	ldr	r0, [pc, #28]	; (8001788 <readWriteSPI2+0x44>)
 800176c:	f7ff fb18 	bl	8000da0 <SPI_I2S_GetFlagStatus>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d1f8      	bne.n	8001768 <readWriteSPI2+0x24>
	// read the rx buff to clear the RXNE flag (garbage)
	rxData = SPI1->DR;
 8001776:	4b04      	ldr	r3, [pc, #16]	; (8001788 <readWriteSPI2+0x44>)
 8001778:	899b      	ldrh	r3, [r3, #12]
 800177a:	b29b      	uxth	r3, r3
 800177c:	73fb      	strb	r3, [r7, #15]

	return rxData;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40013000 	.word	0x40013000

0800178c <initCS_Pin>:

void initCS_Pin(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOB, ENABLE);
 8001792:	2101      	movs	r1, #1
 8001794:	2002      	movs	r0, #2
 8001796:	f7ff fa31 	bl	8000bfc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 800179a:	2300      	movs	r3, #0
 800179c:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 800179e:	2303      	movs	r3, #3
 80017a0:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017a2:	2300      	movs	r3, #0
 80017a4:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
 80017a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80017aa:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80017ac:	2301      	movs	r3, #1
 80017ae:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOB, &GPIO_InitStructure);
 80017b0:	463b      	mov	r3, r7
 80017b2:	4619      	mov	r1, r3
 80017b4:	4803      	ldr	r0, [pc, #12]	; (80017c4 <initCS_Pin+0x38>)
 80017b6:	f7ff f933 	bl	8000a20 <GPIO_Init>
}
 80017ba:	bf00      	nop
 80017bc:	3708      	adds	r7, #8
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40020400 	.word	0x40020400

080017c8 <initCD_Pin>:

void initCD_Pin(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b082      	sub	sp, #8
 80017cc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80017ce:	2101      	movs	r1, #1
 80017d0:	2001      	movs	r0, #1
 80017d2:	f7ff fa13 	bl	8000bfc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 80017d6:	2300      	movs	r3, #0
 80017d8:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 80017da:	2303      	movs	r3, #3
 80017dc:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;
 80017e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017e6:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 80017e8:	2301      	movs	r3, #1
 80017ea:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 80017ec:	463b      	mov	r3, r7
 80017ee:	4619      	mov	r1, r3
 80017f0:	4803      	ldr	r0, [pc, #12]	; (8001800 <initCD_Pin+0x38>)
 80017f2:	f7ff f915 	bl	8000a20 <GPIO_Init>
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40020000 	.word	0x40020000

08001804 <cd_set>:

void cd_set(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_8;
 8001808:	4b03      	ldr	r3, [pc, #12]	; (8001818 <cd_set+0x14>)
 800180a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800180e:	831a      	strh	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	bc80      	pop	{r7}
 8001816:	4770      	bx	lr
 8001818:	40020000 	.word	0x40020000

0800181c <cd_reset>:

void cd_reset(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_8;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <cd_reset+0x14>)
 8001822:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001826:	835a      	strh	r2, [r3, #26]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	bc80      	pop	{r7}
 800182e:	4770      	bx	lr
 8001830:	40020000 	.word	0x40020000

08001834 <initRES_Pin>:

void initRES_Pin(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 800183a:	2101      	movs	r1, #1
 800183c:	2001      	movs	r0, #1
 800183e:	f7ff f9dd 	bl	8000bfc <RCC_AHBPeriphClockCmd>

	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;
 8001842:	2300      	movs	r3, #0
 8001844:	71bb      	strb	r3, [r7, #6]
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_40MHz;
 8001846:	2303      	movs	r3, #3
 8001848:	717b      	strb	r3, [r7, #5]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	71fb      	strb	r3, [r7, #7]
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
 800184e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001852:	603b      	str	r3, [r7, #0]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_OUT;
 8001854:	2301      	movs	r3, #1
 8001856:	713b      	strb	r3, [r7, #4]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8001858:	463b      	mov	r3, r7
 800185a:	4619      	mov	r1, r3
 800185c:	4803      	ldr	r0, [pc, #12]	; (800186c <initRES_Pin+0x38>)
 800185e:	f7ff f8df 	bl	8000a20 <GPIO_Init>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	40020000 	.word	0x40020000

08001870 <res_set>:

void res_set(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
	GPIOA->BSRRL = GPIO_Pin_9;
 8001874:	4b03      	ldr	r3, [pc, #12]	; (8001884 <res_set+0x14>)
 8001876:	f44f 7200 	mov.w	r2, #512	; 0x200
 800187a:	831a      	strh	r2, [r3, #24]
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	bc80      	pop	{r7}
 8001882:	4770      	bx	lr
 8001884:	40020000 	.word	0x40020000

08001888 <res_reset>:

void res_reset(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
	GPIOA->BSRRH = GPIO_Pin_9;
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <res_reset+0x14>)
 800188e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001892:	835a      	strh	r2, [r3, #26]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	40020000 	.word	0x40020000

080018a0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018d8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80018a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80018a6:	e003      	b.n	80018b0 <LoopCopyDataInit>

080018a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80018a8:	4b0c      	ldr	r3, [pc, #48]	; (80018dc <LoopFillZerobss+0x18>)
  ldr r3, [r3, r1]
 80018aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80018ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80018ae:	3104      	adds	r1, #4

080018b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80018b0:	480b      	ldr	r0, [pc, #44]	; (80018e0 <LoopFillZerobss+0x1c>)
  ldr r3, =_edata
 80018b2:	4b0c      	ldr	r3, [pc, #48]	; (80018e4 <LoopFillZerobss+0x20>)
  adds r2, r0, r1
 80018b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80018b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80018b8:	d3f6      	bcc.n	80018a8 <CopyDataInit>
  ldr r2, =_sbss
 80018ba:	4a0b      	ldr	r2, [pc, #44]	; (80018e8 <LoopFillZerobss+0x24>)
  b LoopFillZerobss
 80018bc:	e002      	b.n	80018c4 <LoopFillZerobss>

080018be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80018be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80018c0:	f842 3b04 	str.w	r3, [r2], #4

080018c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80018c4:	4b09      	ldr	r3, [pc, #36]	; (80018ec <LoopFillZerobss+0x28>)
  cmp r2, r3
 80018c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80018c8:	d3f9      	bcc.n	80018be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018ca:	f000 f8c3 	bl	8001a54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018ce:	f000 fc7d 	bl	80021cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d2:	f7ff fe8f 	bl	80015f4 <main>
  bx lr
 80018d6:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018d8:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80018dc:	080028bc 	.word	0x080028bc
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80018e4:	20000004 	.word	0x20000004
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80018e8:	20000008 	.word	0x20000008
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80018ec:	2000003c 	.word	0x2000003c

080018f0 <AES_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f0:	e7fe      	b.n	80018f0 <AES_IRQHandler>
	...

080018f4 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
}
 80018f8:	bf00      	nop
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bc80      	pop	{r7}
 80018fe:	4770      	bx	lr

08001900 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8001904:	e7fe      	b.n	8001904 <HardFault_Handler+0x4>
 8001906:	bf00      	nop

08001908 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001908:	b480      	push	{r7}
 800190a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 800190c:	e7fe      	b.n	800190c <MemManage_Handler+0x4>
 800190e:	bf00      	nop

08001910 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8001914:	e7fe      	b.n	8001914 <BusFault_Handler+0x4>
 8001916:	bf00      	nop

08001918 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 800191c:	e7fe      	b.n	800191c <UsageFault_Handler+0x4>
 800191e:	bf00      	nop

08001920 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
}
 8001924:	bf00      	nop
 8001926:	46bd      	mov	sp, r7
 8001928:	bc80      	pop	{r7}
 800192a:	4770      	bx	lr

0800192c <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr

08001938 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	bc80      	pop	{r7}
 8001942:	4770      	bx	lr

08001944 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8001948:	bf00      	nop
 800194a:	46bd      	mov	sp, r7
 800194c:	bc80      	pop	{r7}
 800194e:	4770      	bx	lr

08001950 <otvorInfo>:
#include "ili9163.h"
#include <stddef.h>
#include "stm32l1xx.h"


void otvorInfo(){
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af02      	add	r7, sp, #8
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001956:	22ff      	movs	r2, #255	; 0xff
 8001958:	21ff      	movs	r1, #255	; 0xff
 800195a:	20ff      	movs	r0, #255	; 0xff
 800195c:	f7ff fddc 	bl	8001518 <decodeRgbValue>
 8001960:	4603      	mov	r3, r0
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff fbfc 	bl	8001160 <lcdClearDisplay>
	lcdPutS("Otvoril som Info",23, 17, 0x0000, 0xFFFF);
 8001968:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	2211      	movs	r2, #17
 8001972:	2117      	movs	r1, #23
 8001974:	4802      	ldr	r0, [pc, #8]	; (8001980 <otvorInfo+0x30>)
 8001976:	f7ff fdeb 	bl	8001550 <lcdPutS>
}
 800197a:	bf00      	nop
 800197c:	46bd      	mov	sp, r7
 800197e:	bd80      	pop	{r7, pc}
 8001980:	08002230 	.word	0x08002230

08001984 <otvorRevers>:

void otvorRevers(){
 8001984:	b580      	push	{r7, lr}
 8001986:	b082      	sub	sp, #8
 8001988:	af02      	add	r7, sp, #8
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 800198a:	22ff      	movs	r2, #255	; 0xff
 800198c:	21ff      	movs	r1, #255	; 0xff
 800198e:	20ff      	movs	r0, #255	; 0xff
 8001990:	f7ff fdc2 	bl	8001518 <decodeRgbValue>
 8001994:	4603      	mov	r3, r0
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff fbe2 	bl	8001160 <lcdClearDisplay>
	lcdPutS("Otvoril som Revers",23, 17, 0x0000, 0xFFFF);
 800199c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a0:	9300      	str	r3, [sp, #0]
 80019a2:	2300      	movs	r3, #0
 80019a4:	2211      	movs	r2, #17
 80019a6:	2117      	movs	r1, #23
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <otvorRevers+0x30>)
 80019aa:	f7ff fdd1 	bl	8001550 <lcdPutS>
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	08002244 	.word	0x08002244

080019b8 <otvorExpo>:

void otvorExpo(){
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af02      	add	r7, sp, #8
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 80019be:	22ff      	movs	r2, #255	; 0xff
 80019c0:	21ff      	movs	r1, #255	; 0xff
 80019c2:	20ff      	movs	r0, #255	; 0xff
 80019c4:	f7ff fda8 	bl	8001518 <decodeRgbValue>
 80019c8:	4603      	mov	r3, r0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fbc8 	bl	8001160 <lcdClearDisplay>
	lcdPutS("Otvoril som Expo",23, 17, 0x0000, 0xFFFF);
 80019d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d4:	9300      	str	r3, [sp, #0]
 80019d6:	2300      	movs	r3, #0
 80019d8:	2211      	movs	r2, #17
 80019da:	2117      	movs	r1, #23
 80019dc:	4802      	ldr	r0, [pc, #8]	; (80019e8 <otvorExpo+0x30>)
 80019de:	f7ff fdb7 	bl	8001550 <lcdPutS>
}
 80019e2:	bf00      	nop
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	08002258 	.word	0x08002258

080019ec <otvorMix>:

void otvorMix(){
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af02      	add	r7, sp, #8
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 80019f2:	22ff      	movs	r2, #255	; 0xff
 80019f4:	21ff      	movs	r1, #255	; 0xff
 80019f6:	20ff      	movs	r0, #255	; 0xff
 80019f8:	f7ff fd8e 	bl	8001518 <decodeRgbValue>
 80019fc:	4603      	mov	r3, r0
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7ff fbae 	bl	8001160 <lcdClearDisplay>
	lcdPutS("Otvoril som Mix",23, 17, 0x0000, 0xFFFF);
 8001a04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	2211      	movs	r2, #17
 8001a0e:	2117      	movs	r1, #23
 8001a10:	4802      	ldr	r0, [pc, #8]	; (8001a1c <otvorMix+0x30>)
 8001a12:	f7ff fd9d 	bl	8001550 <lcdPutS>
}
 8001a16:	bf00      	nop
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bd80      	pop	{r7, pc}
 8001a1c:	0800226c 	.word	0x0800226c

08001a20 <otvorEPA>:

void otvorEPA(){
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af02      	add	r7, sp, #8
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001a26:	22ff      	movs	r2, #255	; 0xff
 8001a28:	21ff      	movs	r1, #255	; 0xff
 8001a2a:	20ff      	movs	r0, #255	; 0xff
 8001a2c:	f7ff fd74 	bl	8001518 <decodeRgbValue>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff fb94 	bl	8001160 <lcdClearDisplay>
	lcdPutS("Otvoril som EPA",23, 17, 0x0000, 0xFFFF);
 8001a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3c:	9300      	str	r3, [sp, #0]
 8001a3e:	2300      	movs	r3, #0
 8001a40:	2211      	movs	r2, #17
 8001a42:	2117      	movs	r1, #23
 8001a44:	4802      	ldr	r0, [pc, #8]	; (8001a50 <otvorEPA+0x30>)
 8001a46:	f7ff fd83 	bl	8001550 <lcdPutS>
}
 8001a4a:	bf00      	nop
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	0800227c 	.word	0x0800227c

08001a54 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8001a58:	4a15      	ldr	r2, [pc, #84]	; (8001ab0 <SystemInit+0x5c>)
 8001a5a:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <SystemInit+0x5c>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a62:	6013      	str	r3, [r2, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8001a64:	4912      	ldr	r1, [pc, #72]	; (8001ab0 <SystemInit+0x5c>)
 8001a66:	4b12      	ldr	r3, [pc, #72]	; (8001ab0 <SystemInit+0x5c>)
 8001a68:	689a      	ldr	r2, [r3, #8]
 8001a6a:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <SystemInit+0x60>)
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	608b      	str	r3, [r1, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8001a70:	4a0f      	ldr	r2, [pc, #60]	; (8001ab0 <SystemInit+0x5c>)
 8001a72:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <SystemInit+0x5c>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 8001a7a:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 8001a7e:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <SystemInit+0x5c>)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <SystemInit+0x5c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a8a:	6013      	str	r3, [r2, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 8001a8c:	4a08      	ldr	r2, [pc, #32]	; (8001ab0 <SystemInit+0x5c>)
 8001a8e:	4b08      	ldr	r3, [pc, #32]	; (8001ab0 <SystemInit+0x5c>)
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001a96:	6093      	str	r3, [r2, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001a98:	4b05      	ldr	r3, [pc, #20]	; (8001ab0 <SystemInit+0x5c>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 8001a9e:	f000 f80d 	bl	8001abc <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001aa2:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <SystemInit+0x64>)
 8001aa4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001aa8:	609a      	str	r2, [r3, #8]
#endif
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	40023800 	.word	0x40023800
 8001ab4:	88ffc00c 	.word	0x88ffc00c
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001aca:	4a41      	ldr	r2, [pc, #260]	; (8001bd0 <SetSysClock+0x114>)
 8001acc:	4b40      	ldr	r3, [pc, #256]	; (8001bd0 <SetSysClock+0x114>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8001ad6:	4b3e      	ldr	r3, [pc, #248]	; (8001bd0 <SetSysClock+0x114>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ade:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d103      	bne.n	8001af4 <SetSysClock+0x38>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001af2:	d1f0      	bne.n	8001ad6 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8001af4:	4b36      	ldr	r3, [pc, #216]	; (8001bd0 <SetSysClock+0x114>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8001b00:	2301      	movs	r3, #1
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	e001      	b.n	8001b0a <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8001b06:	2300      	movs	r3, #0
 8001b08:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d15a      	bne.n	8001bc6 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8001b10:	4a30      	ldr	r2, [pc, #192]	; (8001bd4 <SetSysClock+0x118>)
 8001b12:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <SetSysClock+0x118>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f043 0304 	orr.w	r3, r3, #4
 8001b1a:	6013      	str	r3, [r2, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8001b1c:	4a2d      	ldr	r2, [pc, #180]	; (8001bd4 <SetSysClock+0x118>)
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <SetSysClock+0x118>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f043 0302 	orr.w	r3, r3, #2
 8001b26:	6013      	str	r3, [r2, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8001b28:	4a2a      	ldr	r2, [pc, #168]	; (8001bd4 <SetSysClock+0x118>)
 8001b2a:	4b2a      	ldr	r3, [pc, #168]	; (8001bd4 <SetSysClock+0x118>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f043 0301 	orr.w	r3, r3, #1
 8001b32:	6013      	str	r3, [r2, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8001b34:	4a26      	ldr	r2, [pc, #152]	; (8001bd0 <SetSysClock+0x114>)
 8001b36:	4b26      	ldr	r3, [pc, #152]	; (8001bd0 <SetSysClock+0x114>)
 8001b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6253      	str	r3, [r2, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8001b40:	4b25      	ldr	r3, [pc, #148]	; (8001bd8 <SetSysClock+0x11c>)
 8001b42:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b46:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8001b48:	bf00      	nop
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <SetSysClock+0x11c>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f003 0310 	and.w	r3, r3, #16
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d1f9      	bne.n	8001b4a <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8001b56:	4a1e      	ldr	r2, [pc, #120]	; (8001bd0 <SetSysClock+0x114>)
 8001b58:	4b1d      	ldr	r3, [pc, #116]	; (8001bd0 <SetSysClock+0x114>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	6093      	str	r3, [r2, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8001b5e:	4a1c      	ldr	r2, [pc, #112]	; (8001bd0 <SetSysClock+0x114>)
 8001b60:	4b1b      	ldr	r3, [pc, #108]	; (8001bd0 <SetSysClock+0x114>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8001b66:	4a1a      	ldr	r2, [pc, #104]	; (8001bd0 <SetSysClock+0x114>)
 8001b68:	4b19      	ldr	r3, [pc, #100]	; (8001bd0 <SetSysClock+0x114>)
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	6093      	str	r3, [r2, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8001b6e:	4a18      	ldr	r2, [pc, #96]	; (8001bd0 <SetSysClock+0x114>)
 8001b70:	4b17      	ldr	r3, [pc, #92]	; (8001bd0 <SetSysClock+0x114>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	f423 037d 	bic.w	r3, r3, #16580608	; 0xfd0000
 8001b78:	6093      	str	r3, [r2, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 8001b7a:	4a15      	ldr	r2, [pc, #84]	; (8001bd0 <SetSysClock+0x114>)
 8001b7c:	4b14      	ldr	r3, [pc, #80]	; (8001bd0 <SetSysClock+0x114>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f443 0311 	orr.w	r3, r3, #9502720	; 0x910000
 8001b84:	6093      	str	r3, [r2, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <SetSysClock+0x114>)
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <SetSysClock+0x114>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b90:	6013      	str	r3, [r2, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001b92:	bf00      	nop
 8001b94:	4b0e      	ldr	r3, [pc, #56]	; (8001bd0 <SetSysClock+0x114>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d0f9      	beq.n	8001b94 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <SetSysClock+0x114>)
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <SetSysClock+0x114>)
 8001ba4:	689b      	ldr	r3, [r3, #8]
 8001ba6:	f023 0303 	bic.w	r3, r3, #3
 8001baa:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 8001bac:	4a08      	ldr	r2, [pc, #32]	; (8001bd0 <SetSysClock+0x114>)
 8001bae:	4b08      	ldr	r3, [pc, #32]	; (8001bd0 <SetSysClock+0x114>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f043 0303 	orr.w	r3, r3, #3
 8001bb6:	6093      	str	r3, [r2, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 8001bb8:	bf00      	nop
 8001bba:	4b05      	ldr	r3, [pc, #20]	; (8001bd0 <SetSysClock+0x114>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 030c 	and.w	r3, r3, #12
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d1f9      	bne.n	8001bba <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 8001bc6:	bf00      	nop
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bc80      	pop	{r7}
 8001bce:	4770      	bx	lr
 8001bd0:	40023800 	.word	0x40023800
 8001bd4:	40023c00 	.word	0x40023c00
 8001bd8:	40007000 	.word	0x40007000

08001bdc <Delay>:
#include "ili9163.h"
#include <stddef.h>
#include "stm32l1xx.h"

void Delay(uint16_t n)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	80fb      	strh	r3, [r7, #6]
	uint32_t nl = n*2;
 8001be6:	88fb      	ldrh	r3, [r7, #6]
 8001be8:	005b      	lsls	r3, r3, #1
 8001bea:	60fb      	str	r3, [r7, #12]
	while(nl--);
 8001bec:	bf00      	nop
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	1e5a      	subs	r2, r3, #1
 8001bf2:	60fa      	str	r2, [r7, #12]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1fa      	bne.n	8001bee <Delay+0x12>
	return;
 8001bf8:	bf00      	nop
}
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bc80      	pop	{r7}
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop

08001c04 <pohybMenu>:

void pohybMenu(uint16_t klavesnica){
 8001c04:	b5b0      	push	{r4, r5, r7, lr}
 8001c06:	b084      	sub	sp, #16
 8001c08:	af02      	add	r7, sp, #8
 8001c0a:	4603      	mov	r3, r0
 8001c0c:	80fb      	strh	r3, [r7, #6]

	  if ((klavesnica >= 1952) && (klavesnica <= 2100)){
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	f5b3 6ff4 	cmp.w	r3, #1952	; 0x7a0
 8001c14:	d307      	bcc.n	8001c26 <pohybMenu+0x22>
 8001c16:	88fb      	ldrh	r3, [r7, #6]
 8001c18:	f640 0234 	movw	r2, #2100	; 0x834
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d802      	bhi.n	8001c26 <pohybMenu+0x22>
		  posunSipkyHore();
 8001c20:	f000 f942 	bl	8001ea8 <posunSipkyHore>
 8001c24:	e082      	b.n	8001d2c <pohybMenu+0x128>
	  }
	  else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
 8001c26:	88fb      	ldrh	r3, [r7, #6]
 8001c28:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8001c2c:	d320      	bcc.n	8001c70 <pohybMenu+0x6c>
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	f640 327c 	movw	r2, #2940	; 0xb7c
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d81b      	bhi.n	8001c70 <pohybMenu+0x6c>
		  switch(aktualneA){
 8001c38:	4b3e      	ldr	r3, [pc, #248]	; (8001d34 <pohybMenu+0x130>)
 8001c3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c3e:	2b34      	cmp	r3, #52	; 0x34
 8001c40:	d00f      	beq.n	8001c62 <pohybMenu+0x5e>
 8001c42:	2b34      	cmp	r3, #52	; 0x34
 8001c44:	dc04      	bgt.n	8001c50 <pohybMenu+0x4c>
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d007      	beq.n	8001c5a <pohybMenu+0x56>
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d007      	beq.n	8001c5e <pohybMenu+0x5a>
 8001c4e:	e06d      	b.n	8001d2c <pohybMenu+0x128>
 8001c50:	2b48      	cmp	r3, #72	; 0x48
 8001c52:	d008      	beq.n	8001c66 <pohybMenu+0x62>
 8001c54:	2b5c      	cmp	r3, #92	; 0x5c
 8001c56:	d008      	beq.n	8001c6a <pohybMenu+0x66>
 8001c58:	e068      	b.n	8001d2c <pohybMenu+0x128>
		  case 12:
			  otvorInfo();
 8001c5a:	f7ff fe79 	bl	8001950 <otvorInfo>
		  case 32:
			  otvorRevers();
 8001c5e:	f7ff fe91 	bl	8001984 <otvorRevers>
		  case 52:
			  otvorExpo();
 8001c62:	f7ff fea9 	bl	80019b8 <otvorExpo>
		  case 72:
			 otvorMix();
 8001c66:	f7ff fec1 	bl	80019ec <otvorMix>
		  case 92:
			  otvorEPA();
 8001c6a:	f7ff fed9 	bl	8001a20 <otvorEPA>

	  if ((klavesnica >= 1952) && (klavesnica <= 2100)){
		  posunSipkyHore();
	  }
	  else if ((klavesnica >= 2800) && (klavesnica <= 2940)){
		  switch(aktualneA){
 8001c6e:	e05d      	b.n	8001d2c <pohybMenu+0x128>
			 otvorMix();
		  case 92:
			  otvorEPA();
		  }
	  }
	  else if ((klavesnica >= 3440) && (klavesnica <= 3480)){
 8001c70:	88fb      	ldrh	r3, [r7, #6]
 8001c72:	f5b3 6f57 	cmp.w	r3, #3440	; 0xd70
 8001c76:	d34c      	bcc.n	8001d12 <pohybMenu+0x10e>
 8001c78:	88fb      	ldrh	r3, [r7, #6]
 8001c7a:	f640 5298 	movw	r2, #3480	; 0xd98
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d847      	bhi.n	8001d12 <pohybMenu+0x10e>
		  lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8001c82:	22ff      	movs	r2, #255	; 0xff
 8001c84:	21ff      	movs	r1, #255	; 0xff
 8001c86:	20ff      	movs	r0, #255	; 0xff
 8001c88:	f7ff fc46 	bl	8001518 <decodeRgbValue>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fa66 	bl	8001160 <lcdClearDisplay>
		  lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 8001c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	2211      	movs	r2, #17
 8001c9e:	2114      	movs	r1, #20
 8001ca0:	4825      	ldr	r0, [pc, #148]	; (8001d38 <pohybMenu+0x134>)
 8001ca2:	f7ff fc55 	bl	8001550 <lcdPutS>
		  lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 8001ca6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	2225      	movs	r2, #37	; 0x25
 8001cb0:	2114      	movs	r1, #20
 8001cb2:	4822      	ldr	r0, [pc, #136]	; (8001d3c <pohybMenu+0x138>)
 8001cb4:	f7ff fc4c 	bl	8001550 <lcdPutS>
		  lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 8001cb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cbc:	9300      	str	r3, [sp, #0]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	2239      	movs	r2, #57	; 0x39
 8001cc2:	2114      	movs	r1, #20
 8001cc4:	481e      	ldr	r0, [pc, #120]	; (8001d40 <pohybMenu+0x13c>)
 8001cc6:	f7ff fc43 	bl	8001550 <lcdPutS>
		  lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 8001cca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cce:	9300      	str	r3, [sp, #0]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	224d      	movs	r2, #77	; 0x4d
 8001cd4:	2114      	movs	r1, #20
 8001cd6:	481b      	ldr	r0, [pc, #108]	; (8001d44 <pohybMenu+0x140>)
 8001cd8:	f7ff fc3a 	bl	8001550 <lcdPutS>
		  lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 8001cdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2261      	movs	r2, #97	; 0x61
 8001ce6:	2114      	movs	r1, #20
 8001ce8:	4817      	ldr	r0, [pc, #92]	; (8001d48 <pohybMenu+0x144>)
 8001cea:	f7ff fc31 	bl	8001550 <lcdPutS>
		  lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <pohybMenu+0x130>)
 8001cf0:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001cf4:	4b15      	ldr	r3, [pc, #84]	; (8001d4c <pohybMenu+0x148>)
 8001cf6:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	2000      	movs	r0, #0
 8001d00:	f7ff fc0a 	bl	8001518 <decodeRgbValue>
 8001d04:	4603      	mov	r3, r0
 8001d06:	462a      	mov	r2, r5
 8001d08:	4621      	mov	r1, r4
 8001d0a:	2005      	movs	r0, #5
 8001d0c:	f7ff fb4c 	bl	80013a8 <lcdPlnyTrojuholnik>
 8001d10:	e00c      	b.n	8001d2c <pohybMenu+0x128>
	  }
	  else if ((klavesnica >= 3630) && (klavesnica <= 3690)){
 8001d12:	88fb      	ldrh	r3, [r7, #6]
 8001d14:	f640 622d 	movw	r2, #3629	; 0xe2d
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d907      	bls.n	8001d2c <pohybMenu+0x128>
 8001d1c:	88fb      	ldrh	r3, [r7, #6]
 8001d1e:	f640 626a 	movw	r2, #3690	; 0xe6a
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d802      	bhi.n	8001d2c <pohybMenu+0x128>
		  posunSipkyDole();
 8001d26:	f000 f813 	bl	8001d50 <posunSipkyDole>
	  }
}
 8001d2a:	e7ff      	b.n	8001d2c <pohybMenu+0x128>
 8001d2c:	bf00      	nop
 8001d2e:	3708      	adds	r7, #8
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bdb0      	pop	{r4, r5, r7, pc}
 8001d34:	20000038 	.word	0x20000038
 8001d38:	0800228c 	.word	0x0800228c
 8001d3c:	08002294 	.word	0x08002294
 8001d40:	0800229c 	.word	0x0800229c
 8001d44:	080022a4 	.word	0x080022a4
 8001d48:	080022a8 	.word	0x080022a8
 8001d4c:	20000034 	.word	0x20000034

08001d50 <posunSipkyDole>:

void posunSipkyDole(){
 8001d50:	b5b0      	push	{r4, r5, r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	if (aktualneA == 0){
 8001d54:	4b50      	ldr	r3, [pc, #320]	; (8001e98 <posunSipkyDole+0x148>)
 8001d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d134      	bne.n	8001dc8 <posunSipkyDole+0x78>
		aktualneA = defaultA;
 8001d5e:	4b4f      	ldr	r3, [pc, #316]	; (8001e9c <posunSipkyDole+0x14c>)
 8001d60:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d64:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <posunSipkyDole+0x148>)
 8001d66:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB;
 8001d68:	4b4d      	ldr	r3, [pc, #308]	; (8001ea0 <posunSipkyDole+0x150>)
 8001d6a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6e:	4b4d      	ldr	r3, [pc, #308]	; (8001ea4 <posunSipkyDole+0x154>)
 8001d70:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8001d72:	4b49      	ldr	r3, [pc, #292]	; (8001e98 <posunSipkyDole+0x148>)
 8001d74:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001d78:	4b4a      	ldr	r3, [pc, #296]	; (8001ea4 <posunSipkyDole+0x154>)
 8001d7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001d7e:	221f      	movs	r2, #31
 8001d80:	211f      	movs	r1, #31
 8001d82:	201f      	movs	r0, #31
 8001d84:	f7ff fbc8 	bl	8001518 <decodeRgbValue>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	462a      	mov	r2, r5
 8001d8c:	4621      	mov	r1, r4
 8001d8e:	2005      	movs	r0, #5
 8001d90:	f7ff fb0a 	bl	80013a8 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, aktualneA + 20, aktualneB + 20, decodeRgbValue(0, 0, 0));
 8001d94:	4b40      	ldr	r3, [pc, #256]	; (8001e98 <posunSipkyDole+0x148>)
 8001d96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	3314      	adds	r3, #20
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	b21c      	sxth	r4, r3
 8001da2:	4b40      	ldr	r3, [pc, #256]	; (8001ea4 <posunSipkyDole+0x154>)
 8001da4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	3314      	adds	r3, #20
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	b21d      	sxth	r5, r3
 8001db0:	2200      	movs	r2, #0
 8001db2:	2100      	movs	r1, #0
 8001db4:	2000      	movs	r0, #0
 8001db6:	f7ff fbaf 	bl	8001518 <decodeRgbValue>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	462a      	mov	r2, r5
 8001dbe:	4621      	mov	r1, r4
 8001dc0:	2005      	movs	r0, #5
 8001dc2:	f7ff faf1 	bl	80013a8 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
}
 8001dc6:	e065      	b.n	8001e94 <posunSipkyDole+0x144>
		aktualneA = defaultA;
		aktualneB = defaultB;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
		lcdPlnyTrojuholnik(5, aktualneA + 20, aktualneB + 20, decodeRgbValue(0, 0, 0));
	}
	else if (aktualneB >= 100){
 8001dc8:	4b36      	ldr	r3, [pc, #216]	; (8001ea4 <posunSipkyDole+0x154>)
 8001dca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dce:	2b63      	cmp	r3, #99	; 0x63
 8001dd0:	dd2c      	ble.n	8001e2c <posunSipkyDole+0xdc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8001dd2:	4b31      	ldr	r3, [pc, #196]	; (8001e98 <posunSipkyDole+0x148>)
 8001dd4:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001dd8:	4b32      	ldr	r3, [pc, #200]	; (8001ea4 <posunSipkyDole+0x154>)
 8001dda:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001dde:	221f      	movs	r2, #31
 8001de0:	211f      	movs	r1, #31
 8001de2:	201f      	movs	r0, #31
 8001de4:	f7ff fb98 	bl	8001518 <decodeRgbValue>
 8001de8:	4603      	mov	r3, r0
 8001dea:	462a      	mov	r2, r5
 8001dec:	4621      	mov	r1, r4
 8001dee:	2005      	movs	r0, #5
 8001df0:	f7ff fada 	bl	80013a8 <lcdPlnyTrojuholnik>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
 8001df4:	4b29      	ldr	r3, [pc, #164]	; (8001e9c <posunSipkyDole+0x14c>)
 8001df6:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001dfa:	4b29      	ldr	r3, [pc, #164]	; (8001ea0 <posunSipkyDole+0x150>)
 8001dfc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	2000      	movs	r0, #0
 8001e06:	f7ff fb87 	bl	8001518 <decodeRgbValue>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	462a      	mov	r2, r5
 8001e0e:	4621      	mov	r1, r4
 8001e10:	2005      	movs	r0, #5
 8001e12:	f7ff fac9 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = defaultA;
 8001e16:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <posunSipkyDole+0x14c>)
 8001e18:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e1c:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <posunSipkyDole+0x148>)
 8001e1e:	801a      	strh	r2, [r3, #0]
		aktualneB = defaultB;
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <posunSipkyDole+0x150>)
 8001e22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e26:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <posunSipkyDole+0x154>)
 8001e28:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
		aktualneA = aktualneA + 20;
		aktualneB = aktualneB + 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
}
 8001e2a:	e033      	b.n	8001e94 <posunSipkyDole+0x144>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
		aktualneA = defaultA;
		aktualneB = defaultB;
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8001e2c:	4b1a      	ldr	r3, [pc, #104]	; (8001e98 <posunSipkyDole+0x148>)
 8001e2e:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001e32:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <posunSipkyDole+0x154>)
 8001e34:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e38:	221f      	movs	r2, #31
 8001e3a:	211f      	movs	r1, #31
 8001e3c:	201f      	movs	r0, #31
 8001e3e:	f7ff fb6b 	bl	8001518 <decodeRgbValue>
 8001e42:	4603      	mov	r3, r0
 8001e44:	462a      	mov	r2, r5
 8001e46:	4621      	mov	r1, r4
 8001e48:	2005      	movs	r0, #5
 8001e4a:	f7ff faad 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA + 20;
 8001e4e:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <posunSipkyDole+0x148>)
 8001e50:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	3314      	adds	r3, #20
 8001e58:	b29b      	uxth	r3, r3
 8001e5a:	b21a      	sxth	r2, r3
 8001e5c:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <posunSipkyDole+0x148>)
 8001e5e:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB + 20;
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <posunSipkyDole+0x154>)
 8001e62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3314      	adds	r3, #20
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	b21a      	sxth	r2, r3
 8001e6e:	4b0d      	ldr	r3, [pc, #52]	; (8001ea4 <posunSipkyDole+0x154>)
 8001e70:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <posunSipkyDole+0x148>)
 8001e74:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001e78:	4b0a      	ldr	r3, [pc, #40]	; (8001ea4 <posunSipkyDole+0x154>)
 8001e7a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	2000      	movs	r0, #0
 8001e84:	f7ff fb48 	bl	8001518 <decodeRgbValue>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	462a      	mov	r2, r5
 8001e8c:	4621      	mov	r1, r4
 8001e8e:	2005      	movs	r0, #5
 8001e90:	f7ff fa8a 	bl	80013a8 <lcdPlnyTrojuholnik>
	}
}
 8001e94:	bf00      	nop
 8001e96:	bdb0      	pop	{r4, r5, r7, pc}
 8001e98:	20000038 	.word	0x20000038
 8001e9c:	2000003a 	.word	0x2000003a
 8001ea0:	20000032 	.word	0x20000032
 8001ea4:	20000034 	.word	0x20000034

08001ea8 <posunSipkyHore>:

void posunSipkyHore(){
 8001ea8:	b5b0      	push	{r4, r5, r7, lr}
 8001eaa:	af00      	add	r7, sp, #0
	if (aktualneA == 0){
 8001eac:	4b48      	ldr	r3, [pc, #288]	; (8001fd0 <posunSipkyHore+0x128>)
 8001eae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d128      	bne.n	8001f08 <posunSipkyHore+0x60>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
 8001eb6:	4b47      	ldr	r3, [pc, #284]	; (8001fd4 <posunSipkyHore+0x12c>)
 8001eb8:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001ebc:	4b46      	ldr	r3, [pc, #280]	; (8001fd8 <posunSipkyHore+0x130>)
 8001ebe:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ec2:	221f      	movs	r2, #31
 8001ec4:	211f      	movs	r1, #31
 8001ec6:	201f      	movs	r0, #31
 8001ec8:	f7ff fb26 	bl	8001518 <decodeRgbValue>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	462a      	mov	r2, r5
 8001ed0:	4621      	mov	r1, r4
 8001ed2:	2005      	movs	r0, #5
 8001ed4:	f7ff fa68 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 8001ed8:	4b3d      	ldr	r3, [pc, #244]	; (8001fd0 <posunSipkyHore+0x128>)
 8001eda:	225c      	movs	r2, #92	; 0x5c
 8001edc:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 8001ede:	4b3f      	ldr	r3, [pc, #252]	; (8001fdc <posunSipkyHore+0x134>)
 8001ee0:	226b      	movs	r2, #107	; 0x6b
 8001ee2:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8001ee4:	4b3a      	ldr	r3, [pc, #232]	; (8001fd0 <posunSipkyHore+0x128>)
 8001ee6:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001eea:	4b3c      	ldr	r3, [pc, #240]	; (8001fdc <posunSipkyHore+0x134>)
 8001eec:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	2100      	movs	r1, #0
 8001ef4:	2000      	movs	r0, #0
 8001ef6:	f7ff fb0f 	bl	8001518 <decodeRgbValue>
 8001efa:	4603      	mov	r3, r0
 8001efc:	462a      	mov	r2, r5
 8001efe:	4621      	mov	r1, r4
 8001f00:	2005      	movs	r0, #5
 8001f02:	f7ff fa51 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 8001f06:	e061      	b.n	8001fcc <posunSipkyHore+0x124>
		lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(31, 31, 31));
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
	else if (aktualneB <= 30){
 8001f08:	4b34      	ldr	r3, [pc, #208]	; (8001fdc <posunSipkyHore+0x134>)
 8001f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f0e:	2b1e      	cmp	r3, #30
 8001f10:	dc28      	bgt.n	8001f64 <posunSipkyHore+0xbc>
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8001f12:	4b2f      	ldr	r3, [pc, #188]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f14:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f18:	4b30      	ldr	r3, [pc, #192]	; (8001fdc <posunSipkyHore+0x134>)
 8001f1a:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f1e:	221f      	movs	r2, #31
 8001f20:	211f      	movs	r1, #31
 8001f22:	201f      	movs	r0, #31
 8001f24:	f7ff faf8 	bl	8001518 <decodeRgbValue>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	462a      	mov	r2, r5
 8001f2c:	4621      	mov	r1, r4
 8001f2e:	2005      	movs	r0, #5
 8001f30:	f7ff fa3a 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = 92;
 8001f34:	4b26      	ldr	r3, [pc, #152]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f36:	225c      	movs	r2, #92	; 0x5c
 8001f38:	801a      	strh	r2, [r3, #0]
		aktualneB = 107;
 8001f3a:	4b28      	ldr	r3, [pc, #160]	; (8001fdc <posunSipkyHore+0x134>)
 8001f3c:	226b      	movs	r2, #107	; 0x6b
 8001f3e:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f42:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f46:	4b25      	ldr	r3, [pc, #148]	; (8001fdc <posunSipkyHore+0x134>)
 8001f48:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	2100      	movs	r1, #0
 8001f50:	2000      	movs	r0, #0
 8001f52:	f7ff fae1 	bl	8001518 <decodeRgbValue>
 8001f56:	4603      	mov	r3, r0
 8001f58:	462a      	mov	r2, r5
 8001f5a:	4621      	mov	r1, r4
 8001f5c:	2005      	movs	r0, #5
 8001f5e:	f7ff fa23 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
		aktualneB = aktualneB - 20;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}

}
 8001f62:	e033      	b.n	8001fcc <posunSipkyHore+0x124>
		aktualneA = 92;
		aktualneB = 107;
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
	}
	else{
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(31, 31, 31));
 8001f64:	4b1a      	ldr	r3, [pc, #104]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f66:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001f6a:	4b1c      	ldr	r3, [pc, #112]	; (8001fdc <posunSipkyHore+0x134>)
 8001f6c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001f70:	221f      	movs	r2, #31
 8001f72:	211f      	movs	r1, #31
 8001f74:	201f      	movs	r0, #31
 8001f76:	f7ff facf 	bl	8001518 <decodeRgbValue>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	462a      	mov	r2, r5
 8001f7e:	4621      	mov	r1, r4
 8001f80:	2005      	movs	r0, #5
 8001f82:	f7ff fa11 	bl	80013a8 <lcdPlnyTrojuholnik>
		aktualneA = aktualneA - 20;
 8001f86:	4b12      	ldr	r3, [pc, #72]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f88:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	3b14      	subs	r3, #20
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <posunSipkyHore+0x128>)
 8001f96:	801a      	strh	r2, [r3, #0]
		aktualneB = aktualneB - 20;
 8001f98:	4b10      	ldr	r3, [pc, #64]	; (8001fdc <posunSipkyHore+0x134>)
 8001f9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f9e:	b29b      	uxth	r3, r3
 8001fa0:	3b14      	subs	r3, #20
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	b21a      	sxth	r2, r3
 8001fa6:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <posunSipkyHore+0x134>)
 8001fa8:	801a      	strh	r2, [r3, #0]
		lcdPlnyTrojuholnik(5, aktualneA, aktualneB, decodeRgbValue(0, 0, 0));
 8001faa:	4b09      	ldr	r3, [pc, #36]	; (8001fd0 <posunSipkyHore+0x128>)
 8001fac:	f9b3 4000 	ldrsh.w	r4, [r3]
 8001fb0:	4b0a      	ldr	r3, [pc, #40]	; (8001fdc <posunSipkyHore+0x134>)
 8001fb2:	f9b3 5000 	ldrsh.w	r5, [r3]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	2100      	movs	r1, #0
 8001fba:	2000      	movs	r0, #0
 8001fbc:	f7ff faac 	bl	8001518 <decodeRgbValue>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	462a      	mov	r2, r5
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	2005      	movs	r0, #5
 8001fc8:	f7ff f9ee 	bl	80013a8 <lcdPlnyTrojuholnik>
	}

}
 8001fcc:	bf00      	nop
 8001fce:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd0:	20000038 	.word	0x20000038
 8001fd4:	2000003a 	.word	0x2000003a
 8001fd8:	20000032 	.word	0x20000032
 8001fdc:	20000034 	.word	0x20000034

08001fe0 <initMenu>:
void initMenu(){
 8001fe0:	b5b0      	push	{r4, r5, r7, lr}
 8001fe2:	b082      	sub	sp, #8
 8001fe4:	af02      	add	r7, sp, #8
	defaultA = 12;
 8001fe6:	4b2c      	ldr	r3, [pc, #176]	; (8002098 <initMenu+0xb8>)
 8001fe8:	220c      	movs	r2, #12
 8001fea:	801a      	strh	r2, [r3, #0]
	defaultB = 27;
 8001fec:	4b2b      	ldr	r3, [pc, #172]	; (800209c <initMenu+0xbc>)
 8001fee:	221b      	movs	r2, #27
 8001ff0:	801a      	strh	r2, [r3, #0]
	aktualneA = 0;
 8001ff2:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <initMenu+0xc0>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
	aktualneB = 0;
 8001ff8:	4b2a      	ldr	r3, [pc, #168]	; (80020a4 <initMenu+0xc4>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	801a      	strh	r2, [r3, #0]

	lcdInitialise(LCD_ORIENTATION2);
 8001ffe:	20a0      	movs	r0, #160	; 0xa0
 8002000:	f7fe ffd2 	bl	8000fa8 <lcdInitialise>
	lcdClearDisplay(decodeRgbValue(255, 255, 255));
 8002004:	22ff      	movs	r2, #255	; 0xff
 8002006:	21ff      	movs	r1, #255	; 0xff
 8002008:	20ff      	movs	r0, #255	; 0xff
 800200a:	f7ff fa85 	bl	8001518 <decodeRgbValue>
 800200e:	4603      	mov	r3, r0
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff f8a5 	bl	8001160 <lcdClearDisplay>
	  lcdPutS("Info", 20, 17, 0x0000, 0xFFFF); 		//aktualneA 12, aktualneB 27
 8002016:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	2300      	movs	r3, #0
 800201e:	2211      	movs	r2, #17
 8002020:	2114      	movs	r1, #20
 8002022:	4821      	ldr	r0, [pc, #132]	; (80020a8 <initMenu+0xc8>)
 8002024:	f7ff fa94 	bl	8001550 <lcdPutS>
	  lcdPutS("Revers", 20, 37, 0x0000, 0xFFFF); 	//aktualneA 32, aktualneB 47
 8002028:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800202c:	9300      	str	r3, [sp, #0]
 800202e:	2300      	movs	r3, #0
 8002030:	2225      	movs	r2, #37	; 0x25
 8002032:	2114      	movs	r1, #20
 8002034:	481d      	ldr	r0, [pc, #116]	; (80020ac <initMenu+0xcc>)
 8002036:	f7ff fa8b 	bl	8001550 <lcdPutS>
	  lcdPutS("Expo", 20, 57, 0x0000, 0xFFFF); 		//aktualneA 52, aktualneB 67
 800203a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	2300      	movs	r3, #0
 8002042:	2239      	movs	r2, #57	; 0x39
 8002044:	2114      	movs	r1, #20
 8002046:	481a      	ldr	r0, [pc, #104]	; (80020b0 <initMenu+0xd0>)
 8002048:	f7ff fa82 	bl	8001550 <lcdPutS>
	  lcdPutS("Mix", 20, 77, 0x0000, 0xFFFF); 		//aktualneA 72, aktualneB 87
 800204c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002050:	9300      	str	r3, [sp, #0]
 8002052:	2300      	movs	r3, #0
 8002054:	224d      	movs	r2, #77	; 0x4d
 8002056:	2114      	movs	r1, #20
 8002058:	4816      	ldr	r0, [pc, #88]	; (80020b4 <initMenu+0xd4>)
 800205a:	f7ff fa79 	bl	8001550 <lcdPutS>
	  lcdPutS("EPA", 20, 97, 0x0000, 0xFFFF); 		//aktualneA 92, aktualneB 107
 800205e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002062:	9300      	str	r3, [sp, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	2261      	movs	r2, #97	; 0x61
 8002068:	2114      	movs	r1, #20
 800206a:	4813      	ldr	r0, [pc, #76]	; (80020b8 <initMenu+0xd8>)
 800206c:	f7ff fa70 	bl	8001550 <lcdPutS>
	lcdPlnyTrojuholnik(5, defaultA, defaultB, decodeRgbValue(0, 0, 0));
 8002070:	4b09      	ldr	r3, [pc, #36]	; (8002098 <initMenu+0xb8>)
 8002072:	f9b3 4000 	ldrsh.w	r4, [r3]
 8002076:	4b09      	ldr	r3, [pc, #36]	; (800209c <initMenu+0xbc>)
 8002078:	f9b3 5000 	ldrsh.w	r5, [r3]
 800207c:	2200      	movs	r2, #0
 800207e:	2100      	movs	r1, #0
 8002080:	2000      	movs	r0, #0
 8002082:	f7ff fa49 	bl	8001518 <decodeRgbValue>
 8002086:	4603      	mov	r3, r0
 8002088:	462a      	mov	r2, r5
 800208a:	4621      	mov	r1, r4
 800208c:	2005      	movs	r0, #5
 800208e:	f7ff f98b 	bl	80013a8 <lcdPlnyTrojuholnik>
}
 8002092:	bf00      	nop
 8002094:	46bd      	mov	sp, r7
 8002096:	bdb0      	pop	{r4, r5, r7, pc}
 8002098:	2000003a 	.word	0x2000003a
 800209c:	20000032 	.word	0x20000032
 80020a0:	20000038 	.word	0x20000038
 80020a4:	20000034 	.word	0x20000034
 80020a8:	0800228c 	.word	0x0800228c
 80020ac:	08002294 	.word	0x08002294
 80020b0:	0800229c 	.word	0x0800229c
 80020b4:	080022a4 	.word	0x080022a4
 80020b8:	080022a8 	.word	0x080022a8

080020bc <initGPIO>:

void initGPIO(){			// inicalizujem GPIO piny
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0

  	GPIO_InitTypeDef GPIO_InitStructure;

  	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOC, ENABLE);
 80020c2:	2101      	movs	r1, #1
 80020c4:	2004      	movs	r0, #4
 80020c6:	f7fe fd99 	bl	8000bfc <RCC_AHBPeriphClockCmd>
  	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 80020ca:	2302      	movs	r3, #2
 80020cc:	603b      	str	r3, [r7, #0]
  	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80020ce:	2303      	movs	r3, #3
 80020d0:	713b      	strb	r3, [r7, #4]
  	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 80020d2:	2300      	movs	r3, #0
 80020d4:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80020d6:	463b      	mov	r3, r7
 80020d8:	4619      	mov	r1, r3
 80020da:	480b      	ldr	r0, [pc, #44]	; (8002108 <initGPIO+0x4c>)
 80020dc:	f7fe fca0 	bl	8000a20 <GPIO_Init>
  		/////
  	GPIO_Init(GPIOC, &GPIO_InitStructure);
 80020e0:	463b      	mov	r3, r7
 80020e2:	4619      	mov	r1, r3
 80020e4:	4808      	ldr	r0, [pc, #32]	; (8002108 <initGPIO+0x4c>)
 80020e6:	f7fe fc9b 	bl	8000a20 <GPIO_Init>
  	RCC_HSICmd(ENABLE);
 80020ea:	2001      	movs	r0, #1
 80020ec:	f7fe fd76 	bl	8000bdc <RCC_HSICmd>
  	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 80020f0:	bf00      	nop
 80020f2:	2021      	movs	r0, #33	; 0x21
 80020f4:	f7fe fdbe 	bl	8000c74 <RCC_GetFlagStatus>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f9      	beq.n	80020f2 <initGPIO+0x36>

}
 80020fe:	bf00      	nop
 8002100:	3708      	adds	r7, #8
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	40020800 	.word	0x40020800

0800210c <adc_init>:

void adc_init(void)			// inicalizujem ADC
  {
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
	//RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
  	//RCC_HSICmd(ENABLE);
  	ADC_InitTypeDef ADC_InitStructure;
  	//while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
  	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8002112:	2101      	movs	r1, #1
 8002114:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002118:	f7fe fd8e 	bl	8000c38 <RCC_APB2PeriphClockCmd>
  	ADC_StructInit(&ADC_InitStructure);
 800211c:	463b      	mov	r3, r7
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fa8a 	bl	8000638 <ADC_StructInit>
  	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8002124:	2300      	movs	r3, #0
 8002126:	603b      	str	r3, [r7, #0]
  	ADC_InitStructure.ADC_ContinuousConvMode = ENABLE;
 8002128:	2301      	movs	r3, #1
 800212a:	717b      	strb	r3, [r7, #5]
  	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
  	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8002130:	2300      	movs	r3, #0
 8002132:	613b      	str	r3, [r7, #16]
  	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8002134:	2301      	movs	r3, #1
 8002136:	753b      	strb	r3, [r7, #20]
  	ADC_Init(ADC1, &ADC_InitStructure);
 8002138:	463b      	mov	r3, r7
 800213a:	4619      	mov	r1, r3
 800213c:	4810      	ldr	r0, [pc, #64]	; (8002180 <adc_init+0x74>)
 800213e:	f7fe fa27 	bl	8000590 <ADC_Init>
  	ADC_RegularChannelConfig(ADC1, ADC_Channel_11, 1, ADC_SampleTime_16Cycles);
 8002142:	2302      	movs	r3, #2
 8002144:	2201      	movs	r2, #1
 8002146:	210b      	movs	r1, #11
 8002148:	480d      	ldr	r0, [pc, #52]	; (8002180 <adc_init+0x74>)
 800214a:	f7fe fab1 	bl	80006b0 <ADC_RegularChannelConfig>
  	ADC_Cmd(ADC1, ENABLE);
 800214e:	2101      	movs	r1, #1
 8002150:	480b      	ldr	r0, [pc, #44]	; (8002180 <adc_init+0x74>)
 8002152:	f7fe fa91 	bl	8000678 <ADC_Cmd>
  	ADC_ITConfig(ADC1,ADC_IT_EOC,ENABLE);
 8002156:	2201      	movs	r2, #1
 8002158:	f240 2105 	movw	r1, #517	; 0x205
 800215c:	4808      	ldr	r0, [pc, #32]	; (8002180 <adc_init+0x74>)
 800215e:	f7fe fc1d 	bl	800099c <ADC_ITConfig>
  	/*ADC_ITConfig(ADC1,ADC_IT_OVR,ENABLE);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC);
	ADC_GetFlagStatus(ADC1, ADC_FLAG_OVR);*/
  	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 8002162:	bf00      	nop
 8002164:	2140      	movs	r1, #64	; 0x40
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <adc_init+0x74>)
 8002168:	f7fe fc40 	bl	80009ec <ADC_GetFlagStatus>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d0f8      	beq.n	8002164 <adc_init+0x58>
  	ADC_SoftwareStartConv(ADC1);
 8002172:	4803      	ldr	r0, [pc, #12]	; (8002180 <adc_init+0x74>)
 8002174:	f7fe fc02 	bl	800097c <ADC_SoftwareStartConv>
  }
 8002178:	bf00      	nop
 800217a:	3718      	adds	r7, #24
 800217c:	46bd      	mov	sp, r7
 800217e:	bd80      	pop	{r7, pc}
 8002180:	40012400 	.word	0x40012400

08002184 <nvic_init>:

void nvic_init(){			// inicializacia prerusenia pre ADC a USART2
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_0);
 800218a:	f44f 60e0 	mov.w	r0, #1792	; 0x700
 800218e:	f7fe f98d 	bl	80004ac <NVIC_PriorityGroupConfig>
	NVIC_InitTypeDef NVIC_InitStructure;
	NVIC_InitStructure.NVIC_IRQChannel = ADC1_IRQn;
 8002192:	2312      	movs	r3, #18
 8002194:	713b      	strb	r3, [r7, #4]
	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
 8002196:	2302      	movs	r3, #2
 8002198:	717b      	strb	r3, [r7, #5]
	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	71bb      	strb	r3, [r7, #6]
	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
 800219e:	2301      	movs	r3, #1
 80021a0:	71fb      	strb	r3, [r7, #7]
	NVIC_Init(&NVIC_InitStructure);
 80021a2:	1d3b      	adds	r3, r7, #4
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7fe f993 	bl	80004d0 <NVIC_Init>
	USART_ITConfig(USART2, USART_IT_RXNE, ENABLE);
 80021aa:	2201      	movs	r2, #1
 80021ac:	f240 5125 	movw	r1, #1317	; 0x525
 80021b0:	4805      	ldr	r0, [pc, #20]	; (80021c8 <nvic_init+0x44>)
 80021b2:	f7fe fe6b 	bl	8000e8c <USART_ITConfig>
	USART_Cmd(USART2, ENABLE);
 80021b6:	2101      	movs	r1, #1
 80021b8:	4803      	ldr	r0, [pc, #12]	; (80021c8 <nvic_init+0x44>)
 80021ba:	f7fe fe47 	bl	8000e4c <USART_Cmd>
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40004400 	.word	0x40004400

080021cc <__libc_init_array>:
 80021cc:	4b0e      	ldr	r3, [pc, #56]	; (8002208 <__libc_init_array+0x3c>)
 80021ce:	b570      	push	{r4, r5, r6, lr}
 80021d0:	461e      	mov	r6, r3
 80021d2:	4c0e      	ldr	r4, [pc, #56]	; (800220c <__libc_init_array+0x40>)
 80021d4:	2500      	movs	r5, #0
 80021d6:	1ae4      	subs	r4, r4, r3
 80021d8:	10a4      	asrs	r4, r4, #2
 80021da:	42a5      	cmp	r5, r4
 80021dc:	d004      	beq.n	80021e8 <__libc_init_array+0x1c>
 80021de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80021e2:	4798      	blx	r3
 80021e4:	3501      	adds	r5, #1
 80021e6:	e7f8      	b.n	80021da <__libc_init_array+0xe>
 80021e8:	f000 f816 	bl	8002218 <_init>
 80021ec:	4b08      	ldr	r3, [pc, #32]	; (8002210 <__libc_init_array+0x44>)
 80021ee:	4c09      	ldr	r4, [pc, #36]	; (8002214 <__libc_init_array+0x48>)
 80021f0:	461e      	mov	r6, r3
 80021f2:	1ae4      	subs	r4, r4, r3
 80021f4:	10a4      	asrs	r4, r4, #2
 80021f6:	2500      	movs	r5, #0
 80021f8:	42a5      	cmp	r5, r4
 80021fa:	d004      	beq.n	8002206 <__libc_init_array+0x3a>
 80021fc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002200:	4798      	blx	r3
 8002202:	3501      	adds	r5, #1
 8002204:	e7f8      	b.n	80021f8 <__libc_init_array+0x2c>
 8002206:	bd70      	pop	{r4, r5, r6, pc}
 8002208:	080028b4 	.word	0x080028b4
 800220c:	080028b4 	.word	0x080028b4
 8002210:	080028b4 	.word	0x080028b4
 8002214:	080028b8 	.word	0x080028b8

08002218 <_init>:
 8002218:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800221a:	bf00      	nop
 800221c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800221e:	bc08      	pop	{r3}
 8002220:	469e      	mov	lr, r3
 8002222:	4770      	bx	lr

08002224 <_fini>:
 8002224:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002226:	bf00      	nop
 8002228:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800222a:	bc08      	pop	{r3}
 800222c:	469e      	mov	lr, r3
 800222e:	4770      	bx	lr
